package com.parzivail.pswm.world.gen.moseisleynew;

import net.minecraft.world.World;

import static com.parzivail.pswm.StarWarsMod.blockTatooineSand;
import static com.parzivail.util.world.WorldUtils.b;
import static net.minecraft.init.Blocks.air;


/*
 * Generated by SchematicExporter
 * 5/29/2016 3:05:20 PM
 */
//@formatter:off
public class WorldGenMosEisleyBig_x192_z272
{
	public static void generate(World w, int i, int j, int k)
	{
		b(w, i, j, k, blockTatooineSand, 0);
		b(w, i, j, k + 1, blockTatooineSand, 0);
		b(w, i, j + 1, k, air, 0);
		b(w, i, j + 1, k + 1, air, 0);
		b(w, i, j + 2, k, air, 0);
		b(w, i, j + 2, k + 1, air, 0);
		b(w, i, j + 3, k, air, 0);
		b(w, i, j + 3, k + 1, air, 0);
		b(w, i, j + 4, k, air, 0);
		b(w, i, j + 4, k + 1, air, 0);
		b(w, i, j + 5, k, air, 0);
		b(w, i, j + 5, k + 1, air, 0);
		b(w, i, j + 6, k, air, 0);
		b(w, i, j + 6, k + 1, air, 0);
		b(w, i, j + 7, k, air, 0);
		b(w, i, j + 7, k + 1, air, 0);
		b(w, i, j + 8, k, air, 0);
		b(w, i, j + 8, k + 1, air, 0);
		b(w, i, j + 9, k, air, 0);
		b(w, i, j + 9, k + 1, air, 0);
		b(w, i, j + 10, k, air, 0);
		b(w, i, j + 10, k + 1, air, 0);
		b(w, i, j + 11, k, air, 0);
		b(w, i, j + 11, k + 1, air, 0);
		b(w, i, j + 12, k, air, 0);
		b(w, i, j + 12, k + 1, air, 0);
		b(w, i, j + 13, k, air, 0);
		b(w, i, j + 13, k + 1, air, 0);
		b(w, i, j + 14, k, air, 0);
		b(w, i, j + 14, k + 1, air, 0);
		b(w, i, j + 15, k, air, 0);
		b(w, i, j + 15, k + 1, air, 0);
		b(w, i, j + 16, k, air, 0);
		b(w, i, j + 16, k + 1, air, 0);
		b(w, i, j + 17, k, air, 0);
		b(w, i, j + 17, k + 1, air, 0);
		b(w, i, j + 18, k, air, 0);
		b(w, i, j + 18, k + 1, air, 0);
		b(w, i, j + 19, k, air, 0);
		b(w, i, j + 19, k + 1, air, 0);
		b(w, i, j + 20, k, air, 0);
		b(w, i, j + 20, k + 1, air, 0);
		b(w, i, j + 21, k, air, 0);
		b(w, i, j + 21, k + 1, air, 0);
		b(w, i, j + 22, k, air, 0);
		b(w, i, j + 22, k + 1, air, 0);
		b(w, i, j + 23, k, air, 0);
		b(w, i, j + 23, k + 1, air, 0);
		b(w, i, j + 24, k, air, 0);
		b(w, i, j + 24, k + 1, air, 0);
		b(w, i, j + 25, k, air, 0);
		b(w, i, j + 25, k + 1, air, 0);
		b(w, i, j + 26, k, air, 0);
		b(w, i, j + 26, k + 1, air, 0);
		b(w, i, j + 27, k, air, 0);
		b(w, i, j + 27, k + 1, air, 0);
		b(w, i, j + 28, k, air, 0);
		b(w, i, j + 28, k + 1, air, 0);
		b(w, i + 1, j, k, blockTatooineSand, 0);
		b(w, i + 1, j, k + 1, blockTatooineSand, 0);
		b(w, i + 1, j + 1, k, air, 0);
		b(w, i + 1, j + 1, k + 1, air, 0);
		b(w, i + 1, j + 2, k, air, 0);
		b(w, i + 1, j + 2, k + 1, air, 0);
		b(w, i + 1, j + 3, k, air, 0);
		b(w, i + 1, j + 3, k + 1, air, 0);
		b(w, i + 1, j + 4, k, air, 0);
		b(w, i + 1, j + 4, k + 1, air, 0);
		b(w, i + 1, j + 5, k, air, 0);
		b(w, i + 1, j + 5, k + 1, air, 0);
		b(w, i + 1, j + 6, k, air, 0);
		b(w, i + 1, j + 6, k + 1, air, 0);
		b(w, i + 1, j + 7, k, air, 0);
		b(w, i + 1, j + 7, k + 1, air, 0);
		b(w, i + 1, j + 8, k, air, 0);
		b(w, i + 1, j + 8, k + 1, air, 0);
		b(w, i + 1, j + 9, k, air, 0);
		b(w, i + 1, j + 9, k + 1, air, 0);
		b(w, i + 1, j + 10, k, air, 0);
		b(w, i + 1, j + 10, k + 1, air, 0);
		b(w, i + 1, j + 11, k, air, 0);
		b(w, i + 1, j + 11, k + 1, air, 0);
		b(w, i + 1, j + 12, k, air, 0);
		b(w, i + 1, j + 12, k + 1, air, 0);
		b(w, i + 1, j + 13, k, air, 0);
		b(w, i + 1, j + 13, k + 1, air, 0);
		b(w, i + 1, j + 14, k, air, 0);
		b(w, i + 1, j + 14, k + 1, air, 0);
		b(w, i + 1, j + 15, k, air, 0);
		b(w, i + 1, j + 15, k + 1, air, 0);
		b(w, i + 1, j + 16, k, air, 0);
		b(w, i + 1, j + 16, k + 1, air, 0);
		b(w, i + 1, j + 17, k, air, 0);
		b(w, i + 1, j + 17, k + 1, air, 0);
		b(w, i + 1, j + 18, k, air, 0);
		b(w, i + 1, j + 18, k + 1, air, 0);
		b(w, i + 1, j + 19, k, air, 0);
		b(w, i + 1, j + 19, k + 1, air, 0);
		b(w, i + 1, j + 20, k, air, 0);
		b(w, i + 1, j + 20, k + 1, air, 0);
		b(w, i + 1, j + 21, k, air, 0);
		b(w, i + 1, j + 21, k + 1, air, 0);
		b(w, i + 1, j + 22, k, air, 0);
		b(w, i + 1, j + 22, k + 1, air, 0);
		b(w, i + 1, j + 23, k, air, 0);
		b(w, i + 1, j + 23, k + 1, air, 0);
		b(w, i + 1, j + 24, k, air, 0);
		b(w, i + 1, j + 24, k + 1, air, 0);
		b(w, i + 1, j + 25, k, air, 0);
		b(w, i + 1, j + 25, k + 1, air, 0);
		b(w, i + 1, j + 26, k, air, 0);
		b(w, i + 1, j + 26, k + 1, air, 0);
		b(w, i + 1, j + 27, k, air, 0);
		b(w, i + 1, j + 27, k + 1, air, 0);
		b(w, i + 1, j + 28, k, air, 0);
		b(w, i + 1, j + 28, k + 1, air, 0);
	}

}
//@formatter:on
