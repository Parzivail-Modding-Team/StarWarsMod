package com.parzivail.pswm.world.gen.moseisleynew;

import net.minecraft.world.World;

import static com.parzivail.pswm.StarWarsMod.blockTatooineSand;
import static com.parzivail.util.world.WorldUtils.b;
import static com.parzivail.util.world.WorldUtils.m;
import static net.minecraft.init.Blocks.*;

/*
 * Generated by SchematicExporter
 * 5/29/2016 3:05:18 PM
 */
//@formatter:off
public class WorldGenMosEisleyBig_x16_z128
{
	public static void generate(World w, int i, int j, int k)
	{
		b(w, i, j, k, blockTatooineSand, 0);
		b(w, i, j, k + 1, blockTatooineSand, 0);
		b(w, i, j, k + 2, blockTatooineSand, 0);
		b(w, i, j, k + 3, blockTatooineSand, 0);
		b(w, i, j, k + 4, blockTatooineSand, 0);
		b(w, i, j, k + 5, blockTatooineSand, 0);
		b(w, i, j, k + 6, blockTatooineSand, 0);
		b(w, i, j, k + 7, blockTatooineSand, 0);
		b(w, i, j, k + 8, blockTatooineSand, 0);
		b(w, i, j, k + 9, blockTatooineSand, 0);
		b(w, i, j, k + 10, blockTatooineSand, 0);
		b(w, i, j, k + 11, blockTatooineSand, 0);
		b(w, i, j, k + 12, blockTatooineSand, 0);
		b(w, i, j, k + 13, blockTatooineSand, 0);
		b(w, i, j, k + 14, blockTatooineSand, 0);
		b(w, i, j, k + 15, blockTatooineSand, 0);
		b(w, i, j + 1, k, air, 0);
		b(w, i, j + 1, k + 1, air, 0);
		b(w, i, j + 1, k + 2, air, 0);
		b(w, i, j + 1, k + 3, air, 0);
		b(w, i, j + 1, k + 4, air, 0);
		b(w, i, j + 1, k + 5, air, 0);
		b(w, i, j + 1, k + 6, air, 0);
		b(w, i, j + 1, k + 7, air, 0);
		b(w, i, j + 1, k + 8, air, 0);
		b(w, i, j + 1, k + 9, air, 0);
		b(w, i, j + 1, k + 10, air, 0);
		b(w, i, j + 1, k + 11, air, 0);
		b(w, i, j + 1, k + 12, air, 0);
		b(w, i, j + 1, k + 13, air, 0);
		b(w, i, j + 1, k + 14, air, 0);
		b(w, i, j + 1, k + 15, air, 0);
		b(w, i, j + 2, k, air, 0);
		b(w, i, j + 2, k + 1, air, 0);
		b(w, i, j + 2, k + 2, air, 0);
		b(w, i, j + 2, k + 3, air, 0);
		b(w, i, j + 2, k + 4, air, 0);
		b(w, i, j + 2, k + 5, air, 0);
		b(w, i, j + 2, k + 6, air, 0);
		b(w, i, j + 2, k + 7, air, 0);
		b(w, i, j + 2, k + 8, air, 0);
		b(w, i, j + 2, k + 9, air, 0);
		b(w, i, j + 2, k + 10, air, 0);
		b(w, i, j + 2, k + 11, air, 0);
		b(w, i, j + 2, k + 12, air, 0);
		b(w, i, j + 2, k + 13, air, 0);
		b(w, i, j + 2, k + 14, air, 0);
		b(w, i, j + 2, k + 15, air, 0);
		b(w, i, j + 3, k, air, 0);
		b(w, i, j + 3, k + 1, air, 0);
		b(w, i, j + 3, k + 2, air, 0);
		b(w, i, j + 3, k + 3, air, 0);
		b(w, i, j + 3, k + 4, air, 0);
		b(w, i, j + 3, k + 5, air, 0);
		b(w, i, j + 3, k + 6, air, 0);
		b(w, i, j + 3, k + 7, air, 0);
		b(w, i, j + 3, k + 8, air, 0);
		b(w, i, j + 3, k + 9, air, 0);
		b(w, i, j + 3, k + 10, air, 0);
		b(w, i, j + 3, k + 11, air, 0);
		b(w, i, j + 3, k + 12, air, 0);
		b(w, i, j + 3, k + 13, air, 0);
		b(w, i, j + 3, k + 14, air, 0);
		b(w, i, j + 3, k + 15, air, 0);
		b(w, i, j + 4, k, air, 0);
		b(w, i, j + 4, k + 1, air, 0);
		b(w, i, j + 4, k + 2, air, 0);
		b(w, i, j + 4, k + 3, air, 0);
		b(w, i, j + 4, k + 4, air, 0);
		b(w, i, j + 4, k + 5, air, 0);
		b(w, i, j + 4, k + 6, air, 0);
		b(w, i, j + 4, k + 7, air, 0);
		b(w, i, j + 4, k + 8, air, 0);
		b(w, i, j + 4, k + 9, air, 0);
		b(w, i, j + 4, k + 10, air, 0);
		b(w, i, j + 4, k + 11, air, 0);
		b(w, i, j + 4, k + 12, air, 0);
		b(w, i, j + 4, k + 13, air, 0);
		b(w, i, j + 4, k + 14, air, 0);
		b(w, i, j + 4, k + 15, air, 0);
		b(w, i, j + 5, k, air, 0);
		b(w, i, j + 5, k + 1, air, 0);
		b(w, i, j + 5, k + 2, air, 0);
		b(w, i, j + 5, k + 3, air, 0);
		b(w, i, j + 5, k + 4, air, 0);
		b(w, i, j + 5, k + 5, air, 0);
		b(w, i, j + 5, k + 6, air, 0);
		b(w, i, j + 5, k + 7, air, 0);
		b(w, i, j + 5, k + 8, air, 0);
		b(w, i, j + 5, k + 9, air, 0);
		b(w, i, j + 5, k + 10, air, 0);
		b(w, i, j + 5, k + 11, air, 0);
		b(w, i, j + 5, k + 12, air, 0);
		b(w, i, j + 5, k + 13, air, 0);
		b(w, i, j + 5, k + 14, air, 0);
		b(w, i, j + 5, k + 15, air, 0);
		b(w, i, j + 6, k, air, 0);
		b(w, i, j + 6, k + 1, air, 0);
		b(w, i, j + 6, k + 2, air, 0);
		b(w, i, j + 6, k + 3, air, 0);
		b(w, i, j + 6, k + 4, air, 0);
		b(w, i, j + 6, k + 5, air, 0);
		b(w, i, j + 6, k + 6, air, 0);
		b(w, i, j + 6, k + 7, air, 0);
		b(w, i, j + 6, k + 8, air, 0);
		b(w, i, j + 6, k + 9, air, 0);
		b(w, i, j + 6, k + 10, air, 0);
		b(w, i, j + 6, k + 11, air, 0);
		b(w, i, j + 6, k + 12, air, 0);
		b(w, i, j + 6, k + 13, air, 0);
		b(w, i, j + 6, k + 14, air, 0);
		b(w, i, j + 6, k + 15, air, 0);
		b(w, i, j + 7, k, air, 0);
		b(w, i, j + 7, k + 1, air, 0);
		b(w, i, j + 7, k + 2, air, 0);
		b(w, i, j + 7, k + 3, air, 0);
		b(w, i, j + 7, k + 4, air, 0);
		b(w, i, j + 7, k + 5, air, 0);
		b(w, i, j + 7, k + 6, air, 0);
		b(w, i, j + 7, k + 7, air, 0);
		b(w, i, j + 7, k + 8, air, 0);
		b(w, i, j + 7, k + 9, air, 0);
		b(w, i, j + 7, k + 10, air, 0);
		b(w, i, j + 7, k + 11, air, 0);
		b(w, i, j + 7, k + 12, air, 0);
		b(w, i, j + 7, k + 13, air, 0);
		b(w, i, j + 7, k + 14, air, 0);
		b(w, i, j + 7, k + 15, air, 0);
		b(w, i, j + 8, k, air, 0);
		b(w, i, j + 8, k + 1, air, 0);
		b(w, i, j + 8, k + 2, air, 0);
		b(w, i, j + 8, k + 3, air, 0);
		b(w, i, j + 8, k + 4, air, 0);
		b(w, i, j + 8, k + 5, air, 0);
		b(w, i, j + 8, k + 6, air, 0);
		b(w, i, j + 8, k + 7, air, 0);
		b(w, i, j + 8, k + 8, air, 0);
		b(w, i, j + 8, k + 9, air, 0);
		b(w, i, j + 8, k + 10, air, 0);
		b(w, i, j + 8, k + 11, air, 0);
		b(w, i, j + 8, k + 12, air, 0);
		b(w, i, j + 8, k + 13, air, 0);
		b(w, i, j + 8, k + 14, air, 0);
		b(w, i, j + 8, k + 15, air, 0);
		b(w, i, j + 9, k, air, 0);
		b(w, i, j + 9, k + 1, air, 0);
		b(w, i, j + 9, k + 2, air, 0);
		b(w, i, j + 9, k + 3, air, 0);
		b(w, i, j + 9, k + 4, air, 0);
		b(w, i, j + 9, k + 5, air, 0);
		b(w, i, j + 9, k + 6, air, 0);
		b(w, i, j + 9, k + 7, air, 0);
		b(w, i, j + 9, k + 8, air, 0);
		b(w, i, j + 9, k + 9, air, 0);
		b(w, i, j + 9, k + 10, air, 0);
		b(w, i, j + 9, k + 11, air, 0);
		b(w, i, j + 9, k + 12, air, 0);
		b(w, i, j + 9, k + 13, air, 0);
		b(w, i, j + 9, k + 14, air, 0);
		b(w, i, j + 9, k + 15, air, 0);
		b(w, i, j + 10, k, air, 0);
		b(w, i, j + 10, k + 1, air, 0);
		b(w, i, j + 10, k + 2, air, 0);
		b(w, i, j + 10, k + 3, air, 0);
		b(w, i, j + 10, k + 4, air, 0);
		b(w, i, j + 10, k + 5, air, 0);
		b(w, i, j + 10, k + 6, air, 0);
		b(w, i, j + 10, k + 7, air, 0);
		b(w, i, j + 10, k + 8, air, 0);
		b(w, i, j + 10, k + 9, air, 0);
		b(w, i, j + 10, k + 10, air, 0);
		b(w, i, j + 10, k + 11, air, 0);
		b(w, i, j + 10, k + 12, air, 0);
		b(w, i, j + 10, k + 13, air, 0);
		b(w, i, j + 10, k + 14, air, 0);
		b(w, i, j + 10, k + 15, air, 0);
		b(w, i, j + 11, k, air, 0);
		b(w, i, j + 11, k + 1, air, 0);
		b(w, i, j + 11, k + 2, air, 0);
		b(w, i, j + 11, k + 3, air, 0);
		b(w, i, j + 11, k + 4, air, 0);
		b(w, i, j + 11, k + 5, air, 0);
		b(w, i, j + 11, k + 6, air, 0);
		b(w, i, j + 11, k + 7, air, 0);
		b(w, i, j + 11, k + 8, air, 0);
		b(w, i, j + 11, k + 9, air, 0);
		b(w, i, j + 11, k + 10, air, 0);
		b(w, i, j + 11, k + 11, air, 0);
		b(w, i, j + 11, k + 12, air, 0);
		b(w, i, j + 11, k + 13, air, 0);
		b(w, i, j + 11, k + 14, air, 0);
		b(w, i, j + 11, k + 15, air, 0);
		b(w, i, j + 12, k, air, 0);
		b(w, i, j + 12, k + 1, air, 0);
		b(w, i, j + 12, k + 2, air, 0);
		b(w, i, j + 12, k + 3, air, 0);
		b(w, i, j + 12, k + 4, air, 0);
		b(w, i, j + 12, k + 5, air, 0);
		b(w, i, j + 12, k + 6, air, 0);
		b(w, i, j + 12, k + 7, air, 0);
		b(w, i, j + 12, k + 8, air, 0);
		b(w, i, j + 12, k + 9, air, 0);
		b(w, i, j + 12, k + 10, air, 0);
		b(w, i, j + 12, k + 11, air, 0);
		b(w, i, j + 12, k + 12, air, 0);
		b(w, i, j + 12, k + 13, air, 0);
		b(w, i, j + 12, k + 14, air, 0);
		b(w, i, j + 12, k + 15, air, 0);
		b(w, i, j + 13, k, air, 0);
		b(w, i, j + 13, k + 1, air, 0);
		b(w, i, j + 13, k + 2, air, 0);
		b(w, i, j + 13, k + 3, air, 0);
		b(w, i, j + 13, k + 4, air, 0);
		b(w, i, j + 13, k + 5, air, 0);
		b(w, i, j + 13, k + 6, air, 0);
		b(w, i, j + 13, k + 7, air, 0);
		b(w, i, j + 13, k + 8, air, 0);
		b(w, i, j + 13, k + 9, air, 0);
		b(w, i, j + 13, k + 10, air, 0);
		b(w, i, j + 13, k + 11, air, 0);
		b(w, i, j + 13, k + 12, air, 0);
		b(w, i, j + 13, k + 13, air, 0);
		b(w, i, j + 13, k + 14, air, 0);
		b(w, i, j + 13, k + 15, air, 0);
		b(w, i, j + 14, k, air, 0);
		b(w, i, j + 14, k + 1, air, 0);
		b(w, i, j + 14, k + 2, air, 0);
		b(w, i, j + 14, k + 3, air, 0);
		b(w, i, j + 14, k + 4, air, 0);
		b(w, i, j + 14, k + 5, air, 0);
		b(w, i, j + 14, k + 6, air, 0);
		b(w, i, j + 14, k + 7, air, 0);
		b(w, i, j + 14, k + 8, air, 0);
		b(w, i, j + 14, k + 9, air, 0);
		b(w, i, j + 14, k + 10, air, 0);
		b(w, i, j + 14, k + 11, air, 0);
		b(w, i, j + 14, k + 12, air, 0);
		b(w, i, j + 14, k + 13, air, 0);
		b(w, i, j + 14, k + 14, air, 0);
		b(w, i, j + 14, k + 15, air, 0);
		b(w, i, j + 15, k, air, 0);
		b(w, i, j + 15, k + 1, air, 0);
		b(w, i, j + 15, k + 2, air, 0);
		b(w, i, j + 15, k + 3, air, 0);
		b(w, i, j + 15, k + 4, air, 0);
		b(w, i, j + 15, k + 5, air, 0);
		b(w, i, j + 15, k + 6, air, 0);
		b(w, i, j + 15, k + 7, air, 0);
		b(w, i, j + 15, k + 8, air, 0);
		b(w, i, j + 15, k + 9, air, 0);
		b(w, i, j + 15, k + 10, air, 0);
		b(w, i, j + 15, k + 11, air, 0);
		b(w, i, j + 15, k + 12, air, 0);
		b(w, i, j + 15, k + 13, air, 0);
		b(w, i, j + 15, k + 14, air, 0);
		b(w, i, j + 15, k + 15, air, 0);
		b(w, i, j + 16, k, air, 0);
		b(w, i, j + 16, k + 1, air, 0);
		b(w, i, j + 16, k + 2, air, 0);
		b(w, i, j + 16, k + 3, air, 0);
		b(w, i, j + 16, k + 4, air, 0);
		b(w, i, j + 16, k + 5, air, 0);
		b(w, i, j + 16, k + 6, air, 0);
		b(w, i, j + 16, k + 7, air, 0);
		b(w, i, j + 16, k + 8, air, 0);
		b(w, i, j + 16, k + 9, air, 0);
		b(w, i, j + 16, k + 10, air, 0);
		b(w, i, j + 16, k + 11, air, 0);
		b(w, i, j + 16, k + 12, air, 0);
		b(w, i, j + 16, k + 13, air, 0);
		b(w, i, j + 16, k + 14, air, 0);
		b(w, i, j + 16, k + 15, air, 0);
		b(w, i, j + 17, k, air, 0);
		b(w, i, j + 17, k + 1, air, 0);
		b(w, i, j + 17, k + 2, air, 0);
		b(w, i, j + 17, k + 3, air, 0);
		b(w, i, j + 17, k + 4, air, 0);
		b(w, i, j + 17, k + 5, air, 0);
		b(w, i, j + 17, k + 6, air, 0);
		b(w, i, j + 17, k + 7, air, 0);
		b(w, i, j + 17, k + 8, air, 0);
		b(w, i, j + 17, k + 9, air, 0);
		b(w, i, j + 17, k + 10, air, 0);
		b(w, i, j + 17, k + 11, air, 0);
		b(w, i, j + 17, k + 12, air, 0);
		b(w, i, j + 17, k + 13, air, 0);
		b(w, i, j + 17, k + 14, air, 0);
		b(w, i, j + 17, k + 15, air, 0);
		b(w, i, j + 18, k, air, 0);
		b(w, i, j + 18, k + 1, air, 0);
		b(w, i, j + 18, k + 2, air, 0);
		b(w, i, j + 18, k + 3, air, 0);
		b(w, i, j + 18, k + 4, air, 0);
		b(w, i, j + 18, k + 5, air, 0);
		b(w, i, j + 18, k + 6, air, 0);
		b(w, i, j + 18, k + 7, air, 0);
		b(w, i, j + 18, k + 8, air, 0);
		b(w, i, j + 18, k + 9, air, 0);
		b(w, i, j + 18, k + 10, air, 0);
		b(w, i, j + 18, k + 11, air, 0);
		b(w, i, j + 18, k + 12, air, 0);
		b(w, i, j + 18, k + 13, air, 0);
		b(w, i, j + 18, k + 14, air, 0);
		b(w, i, j + 18, k + 15, air, 0);
		b(w, i, j + 19, k, air, 0);
		b(w, i, j + 19, k + 1, air, 0);
		b(w, i, j + 19, k + 2, air, 0);
		b(w, i, j + 19, k + 3, air, 0);
		b(w, i, j + 19, k + 4, air, 0);
		b(w, i, j + 19, k + 5, air, 0);
		b(w, i, j + 19, k + 6, air, 0);
		b(w, i, j + 19, k + 7, air, 0);
		b(w, i, j + 19, k + 8, air, 0);
		b(w, i, j + 19, k + 9, air, 0);
		b(w, i, j + 19, k + 10, air, 0);
		b(w, i, j + 19, k + 11, air, 0);
		b(w, i, j + 19, k + 12, air, 0);
		b(w, i, j + 19, k + 13, air, 0);
		b(w, i, j + 19, k + 14, air, 0);
		b(w, i, j + 19, k + 15, air, 0);
		b(w, i, j + 20, k, air, 0);
		b(w, i, j + 20, k + 1, air, 0);
		b(w, i, j + 20, k + 2, air, 0);
		b(w, i, j + 20, k + 3, air, 0);
		b(w, i, j + 20, k + 4, air, 0);
		b(w, i, j + 20, k + 5, air, 0);
		b(w, i, j + 20, k + 6, air, 0);
		b(w, i, j + 20, k + 7, air, 0);
		b(w, i, j + 20, k + 8, air, 0);
		b(w, i, j + 20, k + 9, air, 0);
		b(w, i, j + 20, k + 10, air, 0);
		b(w, i, j + 20, k + 11, air, 0);
		b(w, i, j + 20, k + 12, air, 0);
		b(w, i, j + 20, k + 13, air, 0);
		b(w, i, j + 20, k + 14, air, 0);
		b(w, i, j + 20, k + 15, air, 0);
		b(w, i, j + 21, k, air, 0);
		b(w, i, j + 21, k + 1, air, 0);
		b(w, i, j + 21, k + 2, air, 0);
		b(w, i, j + 21, k + 3, air, 0);
		b(w, i, j + 21, k + 4, air, 0);
		b(w, i, j + 21, k + 5, air, 0);
		b(w, i, j + 21, k + 6, air, 0);
		b(w, i, j + 21, k + 7, air, 0);
		b(w, i, j + 21, k + 8, air, 0);
		b(w, i, j + 21, k + 9, air, 0);
		b(w, i, j + 21, k + 10, air, 0);
		b(w, i, j + 21, k + 11, air, 0);
		b(w, i, j + 21, k + 12, air, 0);
		b(w, i, j + 21, k + 13, air, 0);
		b(w, i, j + 21, k + 14, air, 0);
		b(w, i, j + 21, k + 15, air, 0);
		b(w, i, j + 22, k, air, 0);
		b(w, i, j + 22, k + 1, air, 0);
		b(w, i, j + 22, k + 2, air, 0);
		b(w, i, j + 22, k + 3, air, 0);
		b(w, i, j + 22, k + 4, air, 0);
		b(w, i, j + 22, k + 5, air, 0);
		b(w, i, j + 22, k + 6, air, 0);
		b(w, i, j + 22, k + 7, air, 0);
		b(w, i, j + 22, k + 8, air, 0);
		b(w, i, j + 22, k + 9, air, 0);
		b(w, i, j + 22, k + 10, air, 0);
		b(w, i, j + 22, k + 11, air, 0);
		b(w, i, j + 22, k + 12, air, 0);
		b(w, i, j + 22, k + 13, air, 0);
		b(w, i, j + 22, k + 14, air, 0);
		b(w, i, j + 22, k + 15, air, 0);
		b(w, i, j + 23, k, air, 0);
		b(w, i, j + 23, k + 1, air, 0);
		b(w, i, j + 23, k + 2, air, 0);
		b(w, i, j + 23, k + 3, air, 0);
		b(w, i, j + 23, k + 4, air, 0);
		b(w, i, j + 23, k + 5, air, 0);
		b(w, i, j + 23, k + 6, air, 0);
		b(w, i, j + 23, k + 7, air, 0);
		b(w, i, j + 23, k + 8, air, 0);
		b(w, i, j + 23, k + 9, air, 0);
		b(w, i, j + 23, k + 10, air, 0);
		b(w, i, j + 23, k + 11, air, 0);
		b(w, i, j + 23, k + 12, air, 0);
		b(w, i, j + 23, k + 13, air, 0);
		b(w, i, j + 23, k + 14, air, 0);
		b(w, i, j + 23, k + 15, air, 0);
		b(w, i, j + 24, k, air, 0);
		b(w, i, j + 24, k + 1, air, 0);
		b(w, i, j + 24, k + 2, air, 0);
		b(w, i, j + 24, k + 3, air, 0);
		b(w, i, j + 24, k + 4, air, 0);
		b(w, i, j + 24, k + 5, air, 0);
		b(w, i, j + 24, k + 6, air, 0);
		b(w, i, j + 24, k + 7, air, 0);
		b(w, i, j + 24, k + 8, air, 0);
		b(w, i, j + 24, k + 9, air, 0);
		b(w, i, j + 24, k + 10, air, 0);
		b(w, i, j + 24, k + 11, air, 0);
		b(w, i, j + 24, k + 12, air, 0);
		b(w, i, j + 24, k + 13, air, 0);
		b(w, i, j + 24, k + 14, air, 0);
		b(w, i, j + 24, k + 15, air, 0);
		b(w, i, j + 25, k, air, 0);
		b(w, i, j + 25, k + 1, air, 0);
		b(w, i, j + 25, k + 2, air, 0);
		b(w, i, j + 25, k + 3, air, 0);
		b(w, i, j + 25, k + 4, air, 0);
		b(w, i, j + 25, k + 5, air, 0);
		b(w, i, j + 25, k + 6, air, 0);
		b(w, i, j + 25, k + 7, air, 0);
		b(w, i, j + 25, k + 8, air, 0);
		b(w, i, j + 25, k + 9, air, 0);
		b(w, i, j + 25, k + 10, air, 0);
		b(w, i, j + 25, k + 11, air, 0);
		b(w, i, j + 25, k + 12, air, 0);
		b(w, i, j + 25, k + 13, air, 0);
		b(w, i, j + 25, k + 14, air, 0);
		b(w, i, j + 25, k + 15, air, 0);
		b(w, i, j + 26, k, air, 0);
		b(w, i, j + 26, k + 1, air, 0);
		b(w, i, j + 26, k + 2, air, 0);
		b(w, i, j + 26, k + 3, air, 0);
		b(w, i, j + 26, k + 4, air, 0);
		b(w, i, j + 26, k + 5, air, 0);
		b(w, i, j + 26, k + 6, air, 0);
		b(w, i, j + 26, k + 7, air, 0);
		b(w, i, j + 26, k + 8, air, 0);
		b(w, i, j + 26, k + 9, air, 0);
		b(w, i, j + 26, k + 10, air, 0);
		b(w, i, j + 26, k + 11, air, 0);
		b(w, i, j + 26, k + 12, air, 0);
		b(w, i, j + 26, k + 13, air, 0);
		b(w, i, j + 26, k + 14, air, 0);
		b(w, i, j + 26, k + 15, air, 0);
		b(w, i, j + 27, k, air, 0);
		b(w, i, j + 27, k + 1, air, 0);
		b(w, i, j + 27, k + 2, air, 0);
		b(w, i, j + 27, k + 3, air, 0);
		b(w, i, j + 27, k + 4, air, 0);
		b(w, i, j + 27, k + 5, air, 0);
		b(w, i, j + 27, k + 6, air, 0);
		b(w, i, j + 27, k + 7, air, 0);
		b(w, i, j + 27, k + 8, air, 0);
		b(w, i, j + 27, k + 9, air, 0);
		b(w, i, j + 27, k + 10, air, 0);
		b(w, i, j + 27, k + 11, air, 0);
		b(w, i, j + 27, k + 12, air, 0);
		b(w, i, j + 27, k + 13, air, 0);
		b(w, i, j + 27, k + 14, air, 0);
		b(w, i, j + 27, k + 15, air, 0);
		b(w, i, j + 28, k, air, 0);
		b(w, i, j + 28, k + 1, air, 0);
		b(w, i, j + 28, k + 2, air, 0);
		b(w, i, j + 28, k + 3, air, 0);
		b(w, i, j + 28, k + 4, air, 0);
		b(w, i, j + 28, k + 5, air, 0);
		b(w, i, j + 28, k + 6, air, 0);
		b(w, i, j + 28, k + 7, air, 0);
		b(w, i, j + 28, k + 8, air, 0);
		b(w, i, j + 28, k + 9, air, 0);
		b(w, i, j + 28, k + 10, air, 0);
		b(w, i, j + 28, k + 11, air, 0);
		b(w, i, j + 28, k + 12, air, 0);
		b(w, i, j + 28, k + 13, air, 0);
		b(w, i, j + 28, k + 14, air, 0);
		b(w, i, j + 28, k + 15, air, 0);
		b(w, i + 1, j, k, blockTatooineSand, 0);
		b(w, i + 1, j, k + 1, blockTatooineSand, 0);
		b(w, i + 1, j, k + 2, blockTatooineSand, 0);
		b(w, i + 1, j, k + 3, blockTatooineSand, 0);
		b(w, i + 1, j, k + 4, blockTatooineSand, 0);
		b(w, i + 1, j, k + 5, blockTatooineSand, 0);
		b(w, i + 1, j, k + 6, blockTatooineSand, 0);
		b(w, i + 1, j, k + 7, blockTatooineSand, 0);
		b(w, i + 1, j, k + 8, blockTatooineSand, 0);
		b(w, i + 1, j, k + 9, blockTatooineSand, 0);
		b(w, i + 1, j, k + 10, blockTatooineSand, 0);
		b(w, i + 1, j, k + 11, blockTatooineSand, 0);
		b(w, i + 1, j, k + 12, blockTatooineSand, 0);
		b(w, i + 1, j, k + 13, blockTatooineSand, 0);
		b(w, i + 1, j, k + 14, blockTatooineSand, 0);
		b(w, i + 1, j, k + 15, blockTatooineSand, 0);
		b(w, i + 1, j + 1, k, air, 0);
		b(w, i + 1, j + 1, k + 1, air, 0);
		b(w, i + 1, j + 1, k + 2, air, 0);
		b(w, i + 1, j + 1, k + 3, air, 0);
		b(w, i + 1, j + 1, k + 4, air, 0);
		b(w, i + 1, j + 1, k + 5, air, 0);
		b(w, i + 1, j + 1, k + 6, air, 0);
		b(w, i + 1, j + 1, k + 7, air, 0);
		b(w, i + 1, j + 1, k + 8, air, 0);
		b(w, i + 1, j + 1, k + 9, air, 0);
		b(w, i + 1, j + 1, k + 10, air, 0);
		b(w, i + 1, j + 1, k + 11, air, 0);
		b(w, i + 1, j + 1, k + 12, air, 0);
		b(w, i + 1, j + 1, k + 13, air, 0);
		b(w, i + 1, j + 1, k + 14, air, 0);
		b(w, i + 1, j + 1, k + 15, air, 0);
		b(w, i + 1, j + 2, k, air, 0);
		b(w, i + 1, j + 2, k + 1, air, 0);
		b(w, i + 1, j + 2, k + 2, air, 0);
		b(w, i + 1, j + 2, k + 3, air, 0);
		b(w, i + 1, j + 2, k + 4, air, 0);
		generate_1(w, i, j, k);
	}

	public static void generate_1(World w, int i, int j, int k)
	{
		b(w, i + 1, j + 2, k + 5, air, 0);
		b(w, i + 1, j + 2, k + 6, air, 0);
		b(w, i + 1, j + 2, k + 7, air, 0);
		b(w, i + 1, j + 2, k + 8, air, 0);
		b(w, i + 1, j + 2, k + 9, air, 0);
		b(w, i + 1, j + 2, k + 10, air, 0);
		b(w, i + 1, j + 2, k + 11, air, 0);
		b(w, i + 1, j + 2, k + 12, air, 0);
		b(w, i + 1, j + 2, k + 13, air, 0);
		b(w, i + 1, j + 2, k + 14, air, 0);
		b(w, i + 1, j + 2, k + 15, air, 0);
		b(w, i + 1, j + 3, k, air, 0);
		b(w, i + 1, j + 3, k + 1, air, 0);
		b(w, i + 1, j + 3, k + 2, air, 0);
		b(w, i + 1, j + 3, k + 3, air, 0);
		b(w, i + 1, j + 3, k + 4, air, 0);
		b(w, i + 1, j + 3, k + 5, air, 0);
		b(w, i + 1, j + 3, k + 6, air, 0);
		b(w, i + 1, j + 3, k + 7, air, 0);
		b(w, i + 1, j + 3, k + 8, air, 0);
		b(w, i + 1, j + 3, k + 9, air, 0);
		b(w, i + 1, j + 3, k + 10, air, 0);
		b(w, i + 1, j + 3, k + 11, air, 0);
		b(w, i + 1, j + 3, k + 12, air, 0);
		b(w, i + 1, j + 3, k + 13, air, 0);
		b(w, i + 1, j + 3, k + 14, air, 0);
		b(w, i + 1, j + 3, k + 15, air, 0);
		b(w, i + 1, j + 4, k, air, 0);
		b(w, i + 1, j + 4, k + 1, air, 0);
		b(w, i + 1, j + 4, k + 2, air, 0);
		b(w, i + 1, j + 4, k + 3, air, 0);
		b(w, i + 1, j + 4, k + 4, air, 0);
		b(w, i + 1, j + 4, k + 5, air, 0);
		b(w, i + 1, j + 4, k + 6, air, 0);
		b(w, i + 1, j + 4, k + 7, air, 0);
		b(w, i + 1, j + 4, k + 8, air, 0);
		b(w, i + 1, j + 4, k + 9, air, 0);
		b(w, i + 1, j + 4, k + 10, air, 0);
		b(w, i + 1, j + 4, k + 11, air, 0);
		b(w, i + 1, j + 4, k + 12, air, 0);
		b(w, i + 1, j + 4, k + 13, air, 0);
		b(w, i + 1, j + 4, k + 14, air, 0);
		b(w, i + 1, j + 4, k + 15, air, 0);
		b(w, i + 1, j + 5, k, air, 0);
		b(w, i + 1, j + 5, k + 1, air, 0);
		b(w, i + 1, j + 5, k + 2, air, 0);
		b(w, i + 1, j + 5, k + 3, air, 0);
		b(w, i + 1, j + 5, k + 4, air, 0);
		b(w, i + 1, j + 5, k + 5, air, 0);
		b(w, i + 1, j + 5, k + 6, air, 0);
		b(w, i + 1, j + 5, k + 7, air, 0);
		b(w, i + 1, j + 5, k + 8, air, 0);
		b(w, i + 1, j + 5, k + 9, air, 0);
		b(w, i + 1, j + 5, k + 10, air, 0);
		b(w, i + 1, j + 5, k + 11, air, 0);
		b(w, i + 1, j + 5, k + 12, air, 0);
		b(w, i + 1, j + 5, k + 13, air, 0);
		b(w, i + 1, j + 5, k + 14, air, 0);
		b(w, i + 1, j + 5, k + 15, air, 0);
		b(w, i + 1, j + 6, k, air, 0);
		b(w, i + 1, j + 6, k + 1, air, 0);
		b(w, i + 1, j + 6, k + 2, air, 0);
		b(w, i + 1, j + 6, k + 3, air, 0);
		b(w, i + 1, j + 6, k + 4, air, 0);
		b(w, i + 1, j + 6, k + 5, air, 0);
		b(w, i + 1, j + 6, k + 6, air, 0);
		b(w, i + 1, j + 6, k + 7, air, 0);
		b(w, i + 1, j + 6, k + 8, air, 0);
		b(w, i + 1, j + 6, k + 9, air, 0);
		b(w, i + 1, j + 6, k + 10, air, 0);
		b(w, i + 1, j + 6, k + 11, air, 0);
		b(w, i + 1, j + 6, k + 12, air, 0);
		b(w, i + 1, j + 6, k + 13, air, 0);
		b(w, i + 1, j + 6, k + 14, air, 0);
		b(w, i + 1, j + 6, k + 15, air, 0);
		b(w, i + 1, j + 7, k, air, 0);
		b(w, i + 1, j + 7, k + 1, air, 0);
		b(w, i + 1, j + 7, k + 2, air, 0);
		b(w, i + 1, j + 7, k + 3, air, 0);
		b(w, i + 1, j + 7, k + 4, air, 0);
		b(w, i + 1, j + 7, k + 5, air, 0);
		b(w, i + 1, j + 7, k + 6, air, 0);
		b(w, i + 1, j + 7, k + 7, air, 0);
		b(w, i + 1, j + 7, k + 8, air, 0);
		b(w, i + 1, j + 7, k + 9, air, 0);
		b(w, i + 1, j + 7, k + 10, air, 0);
		b(w, i + 1, j + 7, k + 11, air, 0);
		b(w, i + 1, j + 7, k + 12, air, 0);
		b(w, i + 1, j + 7, k + 13, air, 0);
		b(w, i + 1, j + 7, k + 14, air, 0);
		b(w, i + 1, j + 7, k + 15, air, 0);
		b(w, i + 1, j + 8, k, air, 0);
		b(w, i + 1, j + 8, k + 1, air, 0);
		b(w, i + 1, j + 8, k + 2, air, 0);
		b(w, i + 1, j + 8, k + 3, air, 0);
		b(w, i + 1, j + 8, k + 4, air, 0);
		b(w, i + 1, j + 8, k + 5, air, 0);
		b(w, i + 1, j + 8, k + 6, air, 0);
		b(w, i + 1, j + 8, k + 7, air, 0);
		b(w, i + 1, j + 8, k + 8, air, 0);
		b(w, i + 1, j + 8, k + 9, air, 0);
		b(w, i + 1, j + 8, k + 10, air, 0);
		b(w, i + 1, j + 8, k + 11, air, 0);
		b(w, i + 1, j + 8, k + 12, air, 0);
		b(w, i + 1, j + 8, k + 13, air, 0);
		b(w, i + 1, j + 8, k + 14, air, 0);
		b(w, i + 1, j + 8, k + 15, air, 0);
		b(w, i + 1, j + 9, k, air, 0);
		b(w, i + 1, j + 9, k + 1, air, 0);
		b(w, i + 1, j + 9, k + 2, air, 0);
		b(w, i + 1, j + 9, k + 3, air, 0);
		b(w, i + 1, j + 9, k + 4, air, 0);
		b(w, i + 1, j + 9, k + 5, air, 0);
		b(w, i + 1, j + 9, k + 6, air, 0);
		b(w, i + 1, j + 9, k + 7, air, 0);
		b(w, i + 1, j + 9, k + 8, air, 0);
		b(w, i + 1, j + 9, k + 9, air, 0);
		b(w, i + 1, j + 9, k + 10, air, 0);
		b(w, i + 1, j + 9, k + 11, air, 0);
		b(w, i + 1, j + 9, k + 12, air, 0);
		b(w, i + 1, j + 9, k + 13, air, 0);
		b(w, i + 1, j + 9, k + 14, air, 0);
		b(w, i + 1, j + 9, k + 15, air, 0);
		b(w, i + 1, j + 10, k, air, 0);
		b(w, i + 1, j + 10, k + 1, air, 0);
		b(w, i + 1, j + 10, k + 2, air, 0);
		b(w, i + 1, j + 10, k + 3, air, 0);
		b(w, i + 1, j + 10, k + 4, air, 0);
		b(w, i + 1, j + 10, k + 5, air, 0);
		b(w, i + 1, j + 10, k + 6, air, 0);
		b(w, i + 1, j + 10, k + 7, air, 0);
		b(w, i + 1, j + 10, k + 8, air, 0);
		b(w, i + 1, j + 10, k + 9, air, 0);
		b(w, i + 1, j + 10, k + 10, air, 0);
		b(w, i + 1, j + 10, k + 11, air, 0);
		b(w, i + 1, j + 10, k + 12, air, 0);
		b(w, i + 1, j + 10, k + 13, air, 0);
		b(w, i + 1, j + 10, k + 14, air, 0);
		b(w, i + 1, j + 10, k + 15, air, 0);
		b(w, i + 1, j + 11, k, air, 0);
		b(w, i + 1, j + 11, k + 1, air, 0);
		b(w, i + 1, j + 11, k + 2, air, 0);
		b(w, i + 1, j + 11, k + 3, air, 0);
		b(w, i + 1, j + 11, k + 4, air, 0);
		b(w, i + 1, j + 11, k + 5, air, 0);
		b(w, i + 1, j + 11, k + 6, air, 0);
		b(w, i + 1, j + 11, k + 7, air, 0);
		b(w, i + 1, j + 11, k + 8, air, 0);
		b(w, i + 1, j + 11, k + 9, air, 0);
		b(w, i + 1, j + 11, k + 10, air, 0);
		b(w, i + 1, j + 11, k + 11, air, 0);
		b(w, i + 1, j + 11, k + 12, air, 0);
		b(w, i + 1, j + 11, k + 13, air, 0);
		b(w, i + 1, j + 11, k + 14, air, 0);
		b(w, i + 1, j + 11, k + 15, air, 0);
		b(w, i + 1, j + 12, k, air, 0);
		b(w, i + 1, j + 12, k + 1, air, 0);
		b(w, i + 1, j + 12, k + 2, air, 0);
		b(w, i + 1, j + 12, k + 3, air, 0);
		b(w, i + 1, j + 12, k + 4, air, 0);
		b(w, i + 1, j + 12, k + 5, air, 0);
		b(w, i + 1, j + 12, k + 6, air, 0);
		b(w, i + 1, j + 12, k + 7, air, 0);
		b(w, i + 1, j + 12, k + 8, air, 0);
		b(w, i + 1, j + 12, k + 9, air, 0);
		b(w, i + 1, j + 12, k + 10, air, 0);
		b(w, i + 1, j + 12, k + 11, air, 0);
		b(w, i + 1, j + 12, k + 12, air, 0);
		b(w, i + 1, j + 12, k + 13, air, 0);
		b(w, i + 1, j + 12, k + 14, air, 0);
		b(w, i + 1, j + 12, k + 15, air, 0);
		b(w, i + 1, j + 13, k, air, 0);
		b(w, i + 1, j + 13, k + 1, air, 0);
		b(w, i + 1, j + 13, k + 2, air, 0);
		b(w, i + 1, j + 13, k + 3, air, 0);
		b(w, i + 1, j + 13, k + 4, air, 0);
		b(w, i + 1, j + 13, k + 5, air, 0);
		b(w, i + 1, j + 13, k + 6, air, 0);
		b(w, i + 1, j + 13, k + 7, air, 0);
		b(w, i + 1, j + 13, k + 8, air, 0);
		b(w, i + 1, j + 13, k + 9, air, 0);
		b(w, i + 1, j + 13, k + 10, air, 0);
		b(w, i + 1, j + 13, k + 11, air, 0);
		b(w, i + 1, j + 13, k + 12, air, 0);
		b(w, i + 1, j + 13, k + 13, air, 0);
		b(w, i + 1, j + 13, k + 14, air, 0);
		b(w, i + 1, j + 13, k + 15, air, 0);
		b(w, i + 1, j + 14, k, air, 0);
		b(w, i + 1, j + 14, k + 1, air, 0);
		b(w, i + 1, j + 14, k + 2, air, 0);
		b(w, i + 1, j + 14, k + 3, air, 0);
		b(w, i + 1, j + 14, k + 4, air, 0);
		b(w, i + 1, j + 14, k + 5, air, 0);
		b(w, i + 1, j + 14, k + 6, air, 0);
		b(w, i + 1, j + 14, k + 7, air, 0);
		b(w, i + 1, j + 14, k + 8, air, 0);
		b(w, i + 1, j + 14, k + 9, air, 0);
		b(w, i + 1, j + 14, k + 10, air, 0);
		b(w, i + 1, j + 14, k + 11, air, 0);
		b(w, i + 1, j + 14, k + 12, air, 0);
		b(w, i + 1, j + 14, k + 13, air, 0);
		b(w, i + 1, j + 14, k + 14, air, 0);
		b(w, i + 1, j + 14, k + 15, air, 0);
		b(w, i + 1, j + 15, k, air, 0);
		b(w, i + 1, j + 15, k + 1, air, 0);
		b(w, i + 1, j + 15, k + 2, air, 0);
		b(w, i + 1, j + 15, k + 3, air, 0);
		b(w, i + 1, j + 15, k + 4, air, 0);
		b(w, i + 1, j + 15, k + 5, air, 0);
		b(w, i + 1, j + 15, k + 6, air, 0);
		b(w, i + 1, j + 15, k + 7, air, 0);
		b(w, i + 1, j + 15, k + 8, air, 0);
		b(w, i + 1, j + 15, k + 9, air, 0);
		b(w, i + 1, j + 15, k + 10, air, 0);
		b(w, i + 1, j + 15, k + 11, air, 0);
		b(w, i + 1, j + 15, k + 12, air, 0);
		b(w, i + 1, j + 15, k + 13, air, 0);
		b(w, i + 1, j + 15, k + 14, air, 0);
		b(w, i + 1, j + 15, k + 15, air, 0);
		b(w, i + 1, j + 16, k, air, 0);
		b(w, i + 1, j + 16, k + 1, air, 0);
		b(w, i + 1, j + 16, k + 2, air, 0);
		b(w, i + 1, j + 16, k + 3, air, 0);
		b(w, i + 1, j + 16, k + 4, air, 0);
		b(w, i + 1, j + 16, k + 5, air, 0);
		b(w, i + 1, j + 16, k + 6, air, 0);
		b(w, i + 1, j + 16, k + 7, air, 0);
		b(w, i + 1, j + 16, k + 8, air, 0);
		b(w, i + 1, j + 16, k + 9, air, 0);
		b(w, i + 1, j + 16, k + 10, air, 0);
		b(w, i + 1, j + 16, k + 11, air, 0);
		b(w, i + 1, j + 16, k + 12, air, 0);
		b(w, i + 1, j + 16, k + 13, air, 0);
		b(w, i + 1, j + 16, k + 14, air, 0);
		b(w, i + 1, j + 16, k + 15, air, 0);
		b(w, i + 1, j + 17, k, air, 0);
		b(w, i + 1, j + 17, k + 1, air, 0);
		b(w, i + 1, j + 17, k + 2, air, 0);
		b(w, i + 1, j + 17, k + 3, air, 0);
		b(w, i + 1, j + 17, k + 4, air, 0);
		b(w, i + 1, j + 17, k + 5, air, 0);
		b(w, i + 1, j + 17, k + 6, air, 0);
		b(w, i + 1, j + 17, k + 7, air, 0);
		b(w, i + 1, j + 17, k + 8, air, 0);
		b(w, i + 1, j + 17, k + 9, air, 0);
		b(w, i + 1, j + 17, k + 10, air, 0);
		b(w, i + 1, j + 17, k + 11, air, 0);
		b(w, i + 1, j + 17, k + 12, air, 0);
		b(w, i + 1, j + 17, k + 13, air, 0);
		b(w, i + 1, j + 17, k + 14, air, 0);
		b(w, i + 1, j + 17, k + 15, air, 0);
		b(w, i + 1, j + 18, k, air, 0);
		b(w, i + 1, j + 18, k + 1, air, 0);
		b(w, i + 1, j + 18, k + 2, air, 0);
		b(w, i + 1, j + 18, k + 3, air, 0);
		b(w, i + 1, j + 18, k + 4, air, 0);
		b(w, i + 1, j + 18, k + 5, air, 0);
		b(w, i + 1, j + 18, k + 6, air, 0);
		b(w, i + 1, j + 18, k + 7, air, 0);
		b(w, i + 1, j + 18, k + 8, air, 0);
		b(w, i + 1, j + 18, k + 9, air, 0);
		b(w, i + 1, j + 18, k + 10, air, 0);
		b(w, i + 1, j + 18, k + 11, air, 0);
		b(w, i + 1, j + 18, k + 12, air, 0);
		b(w, i + 1, j + 18, k + 13, air, 0);
		b(w, i + 1, j + 18, k + 14, air, 0);
		b(w, i + 1, j + 18, k + 15, air, 0);
		b(w, i + 1, j + 19, k, air, 0);
		b(w, i + 1, j + 19, k + 1, air, 0);
		b(w, i + 1, j + 19, k + 2, air, 0);
		b(w, i + 1, j + 19, k + 3, air, 0);
		b(w, i + 1, j + 19, k + 4, air, 0);
		b(w, i + 1, j + 19, k + 5, air, 0);
		b(w, i + 1, j + 19, k + 6, air, 0);
		b(w, i + 1, j + 19, k + 7, air, 0);
		b(w, i + 1, j + 19, k + 8, air, 0);
		b(w, i + 1, j + 19, k + 9, air, 0);
		b(w, i + 1, j + 19, k + 10, air, 0);
		b(w, i + 1, j + 19, k + 11, air, 0);
		b(w, i + 1, j + 19, k + 12, air, 0);
		b(w, i + 1, j + 19, k + 13, air, 0);
		b(w, i + 1, j + 19, k + 14, air, 0);
		b(w, i + 1, j + 19, k + 15, air, 0);
		b(w, i + 1, j + 20, k, air, 0);
		b(w, i + 1, j + 20, k + 1, air, 0);
		b(w, i + 1, j + 20, k + 2, air, 0);
		b(w, i + 1, j + 20, k + 3, air, 0);
		b(w, i + 1, j + 20, k + 4, air, 0);
		b(w, i + 1, j + 20, k + 5, air, 0);
		b(w, i + 1, j + 20, k + 6, air, 0);
		b(w, i + 1, j + 20, k + 7, air, 0);
		b(w, i + 1, j + 20, k + 8, air, 0);
		b(w, i + 1, j + 20, k + 9, air, 0);
		b(w, i + 1, j + 20, k + 10, air, 0);
		b(w, i + 1, j + 20, k + 11, air, 0);
		b(w, i + 1, j + 20, k + 12, air, 0);
		b(w, i + 1, j + 20, k + 13, air, 0);
		b(w, i + 1, j + 20, k + 14, air, 0);
		b(w, i + 1, j + 20, k + 15, air, 0);
		b(w, i + 1, j + 21, k, air, 0);
		b(w, i + 1, j + 21, k + 1, air, 0);
		b(w, i + 1, j + 21, k + 2, air, 0);
		b(w, i + 1, j + 21, k + 3, air, 0);
		b(w, i + 1, j + 21, k + 4, air, 0);
		b(w, i + 1, j + 21, k + 5, air, 0);
		b(w, i + 1, j + 21, k + 6, air, 0);
		b(w, i + 1, j + 21, k + 7, air, 0);
		b(w, i + 1, j + 21, k + 8, air, 0);
		b(w, i + 1, j + 21, k + 9, air, 0);
		b(w, i + 1, j + 21, k + 10, air, 0);
		b(w, i + 1, j + 21, k + 11, air, 0);
		b(w, i + 1, j + 21, k + 12, air, 0);
		b(w, i + 1, j + 21, k + 13, air, 0);
		b(w, i + 1, j + 21, k + 14, air, 0);
		b(w, i + 1, j + 21, k + 15, air, 0);
		b(w, i + 1, j + 22, k, air, 0);
		b(w, i + 1, j + 22, k + 1, air, 0);
		b(w, i + 1, j + 22, k + 2, air, 0);
		b(w, i + 1, j + 22, k + 3, air, 0);
		b(w, i + 1, j + 22, k + 4, air, 0);
		b(w, i + 1, j + 22, k + 5, air, 0);
		b(w, i + 1, j + 22, k + 6, air, 0);
		b(w, i + 1, j + 22, k + 7, air, 0);
		b(w, i + 1, j + 22, k + 8, air, 0);
		b(w, i + 1, j + 22, k + 9, air, 0);
		b(w, i + 1, j + 22, k + 10, air, 0);
		b(w, i + 1, j + 22, k + 11, air, 0);
		b(w, i + 1, j + 22, k + 12, air, 0);
		b(w, i + 1, j + 22, k + 13, air, 0);
		b(w, i + 1, j + 22, k + 14, air, 0);
		b(w, i + 1, j + 22, k + 15, air, 0);
		b(w, i + 1, j + 23, k, air, 0);
		b(w, i + 1, j + 23, k + 1, air, 0);
		b(w, i + 1, j + 23, k + 2, air, 0);
		b(w, i + 1, j + 23, k + 3, air, 0);
		b(w, i + 1, j + 23, k + 4, air, 0);
		b(w, i + 1, j + 23, k + 5, air, 0);
		b(w, i + 1, j + 23, k + 6, air, 0);
		b(w, i + 1, j + 23, k + 7, air, 0);
		b(w, i + 1, j + 23, k + 8, air, 0);
		b(w, i + 1, j + 23, k + 9, air, 0);
		b(w, i + 1, j + 23, k + 10, air, 0);
		b(w, i + 1, j + 23, k + 11, air, 0);
		b(w, i + 1, j + 23, k + 12, air, 0);
		b(w, i + 1, j + 23, k + 13, air, 0);
		b(w, i + 1, j + 23, k + 14, air, 0);
		b(w, i + 1, j + 23, k + 15, air, 0);
		b(w, i + 1, j + 24, k, air, 0);
		b(w, i + 1, j + 24, k + 1, air, 0);
		b(w, i + 1, j + 24, k + 2, air, 0);
		b(w, i + 1, j + 24, k + 3, air, 0);
		b(w, i + 1, j + 24, k + 4, air, 0);
		b(w, i + 1, j + 24, k + 5, air, 0);
		b(w, i + 1, j + 24, k + 6, air, 0);
		b(w, i + 1, j + 24, k + 7, air, 0);
		b(w, i + 1, j + 24, k + 8, air, 0);
		b(w, i + 1, j + 24, k + 9, air, 0);
		b(w, i + 1, j + 24, k + 10, air, 0);
		b(w, i + 1, j + 24, k + 11, air, 0);
		b(w, i + 1, j + 24, k + 12, air, 0);
		b(w, i + 1, j + 24, k + 13, air, 0);
		b(w, i + 1, j + 24, k + 14, air, 0);
		b(w, i + 1, j + 24, k + 15, air, 0);
		b(w, i + 1, j + 25, k, air, 0);
		b(w, i + 1, j + 25, k + 1, air, 0);
		b(w, i + 1, j + 25, k + 2, air, 0);
		b(w, i + 1, j + 25, k + 3, air, 0);
		b(w, i + 1, j + 25, k + 4, air, 0);
		b(w, i + 1, j + 25, k + 5, air, 0);
		b(w, i + 1, j + 25, k + 6, air, 0);
		b(w, i + 1, j + 25, k + 7, air, 0);
		b(w, i + 1, j + 25, k + 8, air, 0);
		b(w, i + 1, j + 25, k + 9, air, 0);
		b(w, i + 1, j + 25, k + 10, air, 0);
		b(w, i + 1, j + 25, k + 11, air, 0);
		b(w, i + 1, j + 25, k + 12, air, 0);
		b(w, i + 1, j + 25, k + 13, air, 0);
		b(w, i + 1, j + 25, k + 14, air, 0);
		b(w, i + 1, j + 25, k + 15, air, 0);
		b(w, i + 1, j + 26, k, air, 0);
		b(w, i + 1, j + 26, k + 1, air, 0);
		b(w, i + 1, j + 26, k + 2, air, 0);
		b(w, i + 1, j + 26, k + 3, air, 0);
		b(w, i + 1, j + 26, k + 4, air, 0);
		b(w, i + 1, j + 26, k + 5, air, 0);
		b(w, i + 1, j + 26, k + 6, air, 0);
		b(w, i + 1, j + 26, k + 7, air, 0);
		b(w, i + 1, j + 26, k + 8, air, 0);
		b(w, i + 1, j + 26, k + 9, air, 0);
		b(w, i + 1, j + 26, k + 10, air, 0);
		b(w, i + 1, j + 26, k + 11, air, 0);
		b(w, i + 1, j + 26, k + 12, air, 0);
		b(w, i + 1, j + 26, k + 13, air, 0);
		b(w, i + 1, j + 26, k + 14, air, 0);
		b(w, i + 1, j + 26, k + 15, air, 0);
		b(w, i + 1, j + 27, k, air, 0);
		b(w, i + 1, j + 27, k + 1, air, 0);
		b(w, i + 1, j + 27, k + 2, air, 0);
		b(w, i + 1, j + 27, k + 3, air, 0);
		b(w, i + 1, j + 27, k + 4, air, 0);
		b(w, i + 1, j + 27, k + 5, air, 0);
		b(w, i + 1, j + 27, k + 6, air, 0);
		b(w, i + 1, j + 27, k + 7, air, 0);
		b(w, i + 1, j + 27, k + 8, air, 0);
		b(w, i + 1, j + 27, k + 9, air, 0);
		b(w, i + 1, j + 27, k + 10, air, 0);
		b(w, i + 1, j + 27, k + 11, air, 0);
		b(w, i + 1, j + 27, k + 12, air, 0);
		b(w, i + 1, j + 27, k + 13, air, 0);
		b(w, i + 1, j + 27, k + 14, air, 0);
		b(w, i + 1, j + 27, k + 15, air, 0);
		b(w, i + 1, j + 28, k, air, 0);
		b(w, i + 1, j + 28, k + 1, air, 0);
		b(w, i + 1, j + 28, k + 2, air, 0);
		b(w, i + 1, j + 28, k + 3, air, 0);
		b(w, i + 1, j + 28, k + 4, air, 0);
		b(w, i + 1, j + 28, k + 5, air, 0);
		b(w, i + 1, j + 28, k + 6, air, 0);
		b(w, i + 1, j + 28, k + 7, air, 0);
		b(w, i + 1, j + 28, k + 8, air, 0);
		b(w, i + 1, j + 28, k + 9, air, 0);
		b(w, i + 1, j + 28, k + 10, air, 0);
		b(w, i + 1, j + 28, k + 11, air, 0);
		b(w, i + 1, j + 28, k + 12, air, 0);
		b(w, i + 1, j + 28, k + 13, air, 0);
		b(w, i + 1, j + 28, k + 14, air, 0);
		b(w, i + 1, j + 28, k + 15, air, 0);
		b(w, i + 2, j, k, blockTatooineSand, 0);
		b(w, i + 2, j, k + 1, blockTatooineSand, 0);
		b(w, i + 2, j, k + 2, blockTatooineSand, 0);
		b(w, i + 2, j, k + 3, blockTatooineSand, 0);
		b(w, i + 2, j, k + 4, blockTatooineSand, 0);
		b(w, i + 2, j, k + 5, blockTatooineSand, 0);
		b(w, i + 2, j, k + 6, blockTatooineSand, 0);
		b(w, i + 2, j, k + 7, blockTatooineSand, 0);
		b(w, i + 2, j, k + 8, blockTatooineSand, 0);
		b(w, i + 2, j, k + 9, blockTatooineSand, 0);
		b(w, i + 2, j, k + 10, blockTatooineSand, 0);
		b(w, i + 2, j, k + 11, blockTatooineSand, 0);
		b(w, i + 2, j, k + 12, blockTatooineSand, 0);
		b(w, i + 2, j, k + 13, blockTatooineSand, 0);
		b(w, i + 2, j, k + 14, blockTatooineSand, 0);
		b(w, i + 2, j, k + 15, blockTatooineSand, 0);
		b(w, i + 2, j + 1, k, air, 0);
		b(w, i + 2, j + 1, k + 1, air, 0);
		b(w, i + 2, j + 1, k + 2, air, 0);
		b(w, i + 2, j + 1, k + 3, air, 0);
		b(w, i + 2, j + 1, k + 4, air, 0);
		b(w, i + 2, j + 1, k + 5, air, 0);
		b(w, i + 2, j + 1, k + 6, air, 0);
		b(w, i + 2, j + 1, k + 7, air, 0);
		b(w, i + 2, j + 1, k + 8, air, 0);
		b(w, i + 2, j + 1, k + 9, air, 0);
		b(w, i + 2, j + 1, k + 10, air, 0);
		b(w, i + 2, j + 1, k + 11, air, 0);
		b(w, i + 2, j + 1, k + 12, air, 0);
		b(w, i + 2, j + 1, k + 13, air, 0);
		b(w, i + 2, j + 1, k + 14, air, 0);
		b(w, i + 2, j + 1, k + 15, air, 0);
		b(w, i + 2, j + 2, k, air, 0);
		b(w, i + 2, j + 2, k + 1, air, 0);
		b(w, i + 2, j + 2, k + 2, air, 0);
		b(w, i + 2, j + 2, k + 3, air, 0);
		b(w, i + 2, j + 2, k + 4, air, 0);
		b(w, i + 2, j + 2, k + 5, air, 0);
		b(w, i + 2, j + 2, k + 6, air, 0);
		b(w, i + 2, j + 2, k + 7, air, 0);
		b(w, i + 2, j + 2, k + 8, air, 0);
		b(w, i + 2, j + 2, k + 9, air, 0);
		b(w, i + 2, j + 2, k + 10, air, 0);
		b(w, i + 2, j + 2, k + 11, air, 0);
		b(w, i + 2, j + 2, k + 12, air, 0);
		b(w, i + 2, j + 2, k + 13, air, 0);
		b(w, i + 2, j + 2, k + 14, air, 0);
		b(w, i + 2, j + 2, k + 15, air, 0);
		b(w, i + 2, j + 3, k, air, 0);
		b(w, i + 2, j + 3, k + 1, air, 0);
		b(w, i + 2, j + 3, k + 2, air, 0);
		b(w, i + 2, j + 3, k + 3, air, 0);
		b(w, i + 2, j + 3, k + 4, air, 0);
		b(w, i + 2, j + 3, k + 5, air, 0);
		b(w, i + 2, j + 3, k + 6, air, 0);
		b(w, i + 2, j + 3, k + 7, air, 0);
		b(w, i + 2, j + 3, k + 8, air, 0);
		b(w, i + 2, j + 3, k + 9, air, 0);
		b(w, i + 2, j + 3, k + 10, air, 0);
		b(w, i + 2, j + 3, k + 11, air, 0);
		b(w, i + 2, j + 3, k + 12, air, 0);
		b(w, i + 2, j + 3, k + 13, air, 0);
		b(w, i + 2, j + 3, k + 14, air, 0);
		b(w, i + 2, j + 3, k + 15, air, 0);
		b(w, i + 2, j + 4, k, air, 0);
		b(w, i + 2, j + 4, k + 1, air, 0);
		b(w, i + 2, j + 4, k + 2, air, 0);
		b(w, i + 2, j + 4, k + 3, air, 0);
		b(w, i + 2, j + 4, k + 4, air, 0);
		b(w, i + 2, j + 4, k + 5, air, 0);
		b(w, i + 2, j + 4, k + 6, air, 0);
		b(w, i + 2, j + 4, k + 7, air, 0);
		b(w, i + 2, j + 4, k + 8, air, 0);
		b(w, i + 2, j + 4, k + 9, air, 0);
		generate_2(w, i, j, k);
	}

	public static void generate_2(World w, int i, int j, int k)
	{
		b(w, i + 2, j + 4, k + 10, air, 0);
		b(w, i + 2, j + 4, k + 11, air, 0);
		b(w, i + 2, j + 4, k + 12, air, 0);
		b(w, i + 2, j + 4, k + 13, air, 0);
		b(w, i + 2, j + 4, k + 14, air, 0);
		b(w, i + 2, j + 4, k + 15, air, 0);
		b(w, i + 2, j + 5, k, air, 0);
		b(w, i + 2, j + 5, k + 1, air, 0);
		b(w, i + 2, j + 5, k + 2, air, 0);
		b(w, i + 2, j + 5, k + 3, air, 0);
		b(w, i + 2, j + 5, k + 4, air, 0);
		b(w, i + 2, j + 5, k + 5, air, 0);
		b(w, i + 2, j + 5, k + 6, air, 0);
		b(w, i + 2, j + 5, k + 7, air, 0);
		b(w, i + 2, j + 5, k + 8, air, 0);
		b(w, i + 2, j + 5, k + 9, air, 0);
		b(w, i + 2, j + 5, k + 10, air, 0);
		b(w, i + 2, j + 5, k + 11, air, 0);
		b(w, i + 2, j + 5, k + 12, air, 0);
		b(w, i + 2, j + 5, k + 13, air, 0);
		b(w, i + 2, j + 5, k + 14, air, 0);
		b(w, i + 2, j + 5, k + 15, air, 0);
		b(w, i + 2, j + 6, k, air, 0);
		b(w, i + 2, j + 6, k + 1, air, 0);
		b(w, i + 2, j + 6, k + 2, air, 0);
		b(w, i + 2, j + 6, k + 3, air, 0);
		b(w, i + 2, j + 6, k + 4, air, 0);
		b(w, i + 2, j + 6, k + 5, air, 0);
		b(w, i + 2, j + 6, k + 6, air, 0);
		b(w, i + 2, j + 6, k + 7, air, 0);
		b(w, i + 2, j + 6, k + 8, air, 0);
		b(w, i + 2, j + 6, k + 9, air, 0);
		b(w, i + 2, j + 6, k + 10, air, 0);
		b(w, i + 2, j + 6, k + 11, air, 0);
		b(w, i + 2, j + 6, k + 12, air, 0);
		b(w, i + 2, j + 6, k + 13, air, 0);
		b(w, i + 2, j + 6, k + 14, air, 0);
		b(w, i + 2, j + 6, k + 15, air, 0);
		b(w, i + 2, j + 7, k, air, 0);
		b(w, i + 2, j + 7, k + 1, air, 0);
		b(w, i + 2, j + 7, k + 2, air, 0);
		b(w, i + 2, j + 7, k + 3, air, 0);
		b(w, i + 2, j + 7, k + 4, air, 0);
		b(w, i + 2, j + 7, k + 5, air, 0);
		b(w, i + 2, j + 7, k + 6, air, 0);
		b(w, i + 2, j + 7, k + 7, air, 0);
		b(w, i + 2, j + 7, k + 8, air, 0);
		b(w, i + 2, j + 7, k + 9, air, 0);
		b(w, i + 2, j + 7, k + 10, air, 0);
		b(w, i + 2, j + 7, k + 11, air, 0);
		b(w, i + 2, j + 7, k + 12, air, 0);
		b(w, i + 2, j + 7, k + 13, air, 0);
		b(w, i + 2, j + 7, k + 14, air, 0);
		b(w, i + 2, j + 7, k + 15, air, 0);
		b(w, i + 2, j + 8, k, air, 0);
		b(w, i + 2, j + 8, k + 1, air, 0);
		b(w, i + 2, j + 8, k + 2, air, 0);
		b(w, i + 2, j + 8, k + 3, air, 0);
		b(w, i + 2, j + 8, k + 4, air, 0);
		b(w, i + 2, j + 8, k + 5, air, 0);
		b(w, i + 2, j + 8, k + 6, air, 0);
		b(w, i + 2, j + 8, k + 7, air, 0);
		b(w, i + 2, j + 8, k + 8, air, 0);
		b(w, i + 2, j + 8, k + 9, air, 0);
		b(w, i + 2, j + 8, k + 10, air, 0);
		b(w, i + 2, j + 8, k + 11, air, 0);
		b(w, i + 2, j + 8, k + 12, air, 0);
		b(w, i + 2, j + 8, k + 13, air, 0);
		b(w, i + 2, j + 8, k + 14, air, 0);
		b(w, i + 2, j + 8, k + 15, air, 0);
		b(w, i + 2, j + 9, k, air, 0);
		b(w, i + 2, j + 9, k + 1, air, 0);
		b(w, i + 2, j + 9, k + 2, air, 0);
		b(w, i + 2, j + 9, k + 3, air, 0);
		b(w, i + 2, j + 9, k + 4, air, 0);
		b(w, i + 2, j + 9, k + 5, air, 0);
		b(w, i + 2, j + 9, k + 6, air, 0);
		b(w, i + 2, j + 9, k + 7, air, 0);
		b(w, i + 2, j + 9, k + 8, air, 0);
		b(w, i + 2, j + 9, k + 9, air, 0);
		b(w, i + 2, j + 9, k + 10, air, 0);
		b(w, i + 2, j + 9, k + 11, air, 0);
		b(w, i + 2, j + 9, k + 12, air, 0);
		b(w, i + 2, j + 9, k + 13, air, 0);
		b(w, i + 2, j + 9, k + 14, air, 0);
		b(w, i + 2, j + 9, k + 15, air, 0);
		b(w, i + 2, j + 10, k, air, 0);
		b(w, i + 2, j + 10, k + 1, air, 0);
		b(w, i + 2, j + 10, k + 2, air, 0);
		b(w, i + 2, j + 10, k + 3, air, 0);
		b(w, i + 2, j + 10, k + 4, air, 0);
		b(w, i + 2, j + 10, k + 5, air, 0);
		b(w, i + 2, j + 10, k + 6, air, 0);
		b(w, i + 2, j + 10, k + 7, air, 0);
		b(w, i + 2, j + 10, k + 8, air, 0);
		b(w, i + 2, j + 10, k + 9, air, 0);
		b(w, i + 2, j + 10, k + 10, air, 0);
		b(w, i + 2, j + 10, k + 11, air, 0);
		b(w, i + 2, j + 10, k + 12, air, 0);
		b(w, i + 2, j + 10, k + 13, air, 0);
		b(w, i + 2, j + 10, k + 14, air, 0);
		b(w, i + 2, j + 10, k + 15, air, 0);
		b(w, i + 2, j + 11, k, air, 0);
		b(w, i + 2, j + 11, k + 1, air, 0);
		b(w, i + 2, j + 11, k + 2, air, 0);
		b(w, i + 2, j + 11, k + 3, air, 0);
		b(w, i + 2, j + 11, k + 4, air, 0);
		b(w, i + 2, j + 11, k + 5, air, 0);
		b(w, i + 2, j + 11, k + 6, air, 0);
		b(w, i + 2, j + 11, k + 7, air, 0);
		b(w, i + 2, j + 11, k + 8, air, 0);
		b(w, i + 2, j + 11, k + 9, air, 0);
		b(w, i + 2, j + 11, k + 10, air, 0);
		b(w, i + 2, j + 11, k + 11, air, 0);
		b(w, i + 2, j + 11, k + 12, air, 0);
		b(w, i + 2, j + 11, k + 13, air, 0);
		b(w, i + 2, j + 11, k + 14, air, 0);
		b(w, i + 2, j + 11, k + 15, air, 0);
		b(w, i + 2, j + 12, k, air, 0);
		b(w, i + 2, j + 12, k + 1, air, 0);
		b(w, i + 2, j + 12, k + 2, air, 0);
		b(w, i + 2, j + 12, k + 3, air, 0);
		b(w, i + 2, j + 12, k + 4, air, 0);
		b(w, i + 2, j + 12, k + 5, air, 0);
		b(w, i + 2, j + 12, k + 6, air, 0);
		b(w, i + 2, j + 12, k + 7, air, 0);
		b(w, i + 2, j + 12, k + 8, air, 0);
		b(w, i + 2, j + 12, k + 9, air, 0);
		b(w, i + 2, j + 12, k + 10, air, 0);
		b(w, i + 2, j + 12, k + 11, air, 0);
		b(w, i + 2, j + 12, k + 12, air, 0);
		b(w, i + 2, j + 12, k + 13, air, 0);
		b(w, i + 2, j + 12, k + 14, air, 0);
		b(w, i + 2, j + 12, k + 15, air, 0);
		b(w, i + 2, j + 13, k, air, 0);
		b(w, i + 2, j + 13, k + 1, air, 0);
		b(w, i + 2, j + 13, k + 2, air, 0);
		b(w, i + 2, j + 13, k + 3, air, 0);
		b(w, i + 2, j + 13, k + 4, air, 0);
		b(w, i + 2, j + 13, k + 5, air, 0);
		b(w, i + 2, j + 13, k + 6, air, 0);
		b(w, i + 2, j + 13, k + 7, air, 0);
		b(w, i + 2, j + 13, k + 8, air, 0);
		b(w, i + 2, j + 13, k + 9, air, 0);
		b(w, i + 2, j + 13, k + 10, air, 0);
		b(w, i + 2, j + 13, k + 11, air, 0);
		b(w, i + 2, j + 13, k + 12, air, 0);
		b(w, i + 2, j + 13, k + 13, air, 0);
		b(w, i + 2, j + 13, k + 14, air, 0);
		b(w, i + 2, j + 13, k + 15, air, 0);
		b(w, i + 2, j + 14, k, air, 0);
		b(w, i + 2, j + 14, k + 1, air, 0);
		b(w, i + 2, j + 14, k + 2, air, 0);
		b(w, i + 2, j + 14, k + 3, air, 0);
		b(w, i + 2, j + 14, k + 4, air, 0);
		b(w, i + 2, j + 14, k + 5, air, 0);
		b(w, i + 2, j + 14, k + 6, air, 0);
		b(w, i + 2, j + 14, k + 7, air, 0);
		b(w, i + 2, j + 14, k + 8, air, 0);
		b(w, i + 2, j + 14, k + 9, air, 0);
		b(w, i + 2, j + 14, k + 10, air, 0);
		b(w, i + 2, j + 14, k + 11, air, 0);
		b(w, i + 2, j + 14, k + 12, air, 0);
		b(w, i + 2, j + 14, k + 13, air, 0);
		b(w, i + 2, j + 14, k + 14, air, 0);
		b(w, i + 2, j + 14, k + 15, air, 0);
		b(w, i + 2, j + 15, k, air, 0);
		b(w, i + 2, j + 15, k + 1, air, 0);
		b(w, i + 2, j + 15, k + 2, air, 0);
		b(w, i + 2, j + 15, k + 3, air, 0);
		b(w, i + 2, j + 15, k + 4, air, 0);
		b(w, i + 2, j + 15, k + 5, air, 0);
		b(w, i + 2, j + 15, k + 6, air, 0);
		b(w, i + 2, j + 15, k + 7, air, 0);
		b(w, i + 2, j + 15, k + 8, air, 0);
		b(w, i + 2, j + 15, k + 9, air, 0);
		b(w, i + 2, j + 15, k + 10, air, 0);
		b(w, i + 2, j + 15, k + 11, air, 0);
		b(w, i + 2, j + 15, k + 12, air, 0);
		b(w, i + 2, j + 15, k + 13, air, 0);
		b(w, i + 2, j + 15, k + 14, air, 0);
		b(w, i + 2, j + 15, k + 15, air, 0);
		b(w, i + 2, j + 16, k, air, 0);
		b(w, i + 2, j + 16, k + 1, air, 0);
		b(w, i + 2, j + 16, k + 2, air, 0);
		b(w, i + 2, j + 16, k + 3, air, 0);
		b(w, i + 2, j + 16, k + 4, air, 0);
		b(w, i + 2, j + 16, k + 5, air, 0);
		b(w, i + 2, j + 16, k + 6, air, 0);
		b(w, i + 2, j + 16, k + 7, air, 0);
		b(w, i + 2, j + 16, k + 8, air, 0);
		b(w, i + 2, j + 16, k + 9, air, 0);
		b(w, i + 2, j + 16, k + 10, air, 0);
		b(w, i + 2, j + 16, k + 11, air, 0);
		b(w, i + 2, j + 16, k + 12, air, 0);
		b(w, i + 2, j + 16, k + 13, air, 0);
		b(w, i + 2, j + 16, k + 14, air, 0);
		b(w, i + 2, j + 16, k + 15, air, 0);
		b(w, i + 2, j + 17, k, air, 0);
		b(w, i + 2, j + 17, k + 1, air, 0);
		b(w, i + 2, j + 17, k + 2, air, 0);
		b(w, i + 2, j + 17, k + 3, air, 0);
		b(w, i + 2, j + 17, k + 4, air, 0);
		b(w, i + 2, j + 17, k + 5, air, 0);
		b(w, i + 2, j + 17, k + 6, air, 0);
		b(w, i + 2, j + 17, k + 7, air, 0);
		b(w, i + 2, j + 17, k + 8, air, 0);
		b(w, i + 2, j + 17, k + 9, air, 0);
		b(w, i + 2, j + 17, k + 10, air, 0);
		b(w, i + 2, j + 17, k + 11, air, 0);
		b(w, i + 2, j + 17, k + 12, air, 0);
		b(w, i + 2, j + 17, k + 13, air, 0);
		b(w, i + 2, j + 17, k + 14, air, 0);
		b(w, i + 2, j + 17, k + 15, air, 0);
		b(w, i + 2, j + 18, k, air, 0);
		b(w, i + 2, j + 18, k + 1, air, 0);
		b(w, i + 2, j + 18, k + 2, air, 0);
		b(w, i + 2, j + 18, k + 3, air, 0);
		b(w, i + 2, j + 18, k + 4, air, 0);
		b(w, i + 2, j + 18, k + 5, air, 0);
		b(w, i + 2, j + 18, k + 6, air, 0);
		b(w, i + 2, j + 18, k + 7, air, 0);
		b(w, i + 2, j + 18, k + 8, air, 0);
		b(w, i + 2, j + 18, k + 9, air, 0);
		b(w, i + 2, j + 18, k + 10, air, 0);
		b(w, i + 2, j + 18, k + 11, air, 0);
		b(w, i + 2, j + 18, k + 12, air, 0);
		b(w, i + 2, j + 18, k + 13, air, 0);
		b(w, i + 2, j + 18, k + 14, air, 0);
		b(w, i + 2, j + 18, k + 15, air, 0);
		b(w, i + 2, j + 19, k, air, 0);
		b(w, i + 2, j + 19, k + 1, air, 0);
		b(w, i + 2, j + 19, k + 2, air, 0);
		b(w, i + 2, j + 19, k + 3, air, 0);
		b(w, i + 2, j + 19, k + 4, air, 0);
		b(w, i + 2, j + 19, k + 5, air, 0);
		b(w, i + 2, j + 19, k + 6, air, 0);
		b(w, i + 2, j + 19, k + 7, air, 0);
		b(w, i + 2, j + 19, k + 8, air, 0);
		b(w, i + 2, j + 19, k + 9, air, 0);
		b(w, i + 2, j + 19, k + 10, air, 0);
		b(w, i + 2, j + 19, k + 11, air, 0);
		b(w, i + 2, j + 19, k + 12, air, 0);
		b(w, i + 2, j + 19, k + 13, air, 0);
		b(w, i + 2, j + 19, k + 14, air, 0);
		b(w, i + 2, j + 19, k + 15, air, 0);
		b(w, i + 2, j + 20, k, air, 0);
		b(w, i + 2, j + 20, k + 1, air, 0);
		b(w, i + 2, j + 20, k + 2, air, 0);
		b(w, i + 2, j + 20, k + 3, air, 0);
		b(w, i + 2, j + 20, k + 4, air, 0);
		b(w, i + 2, j + 20, k + 5, air, 0);
		b(w, i + 2, j + 20, k + 6, air, 0);
		b(w, i + 2, j + 20, k + 7, air, 0);
		b(w, i + 2, j + 20, k + 8, air, 0);
		b(w, i + 2, j + 20, k + 9, air, 0);
		b(w, i + 2, j + 20, k + 10, air, 0);
		b(w, i + 2, j + 20, k + 11, air, 0);
		b(w, i + 2, j + 20, k + 12, air, 0);
		b(w, i + 2, j + 20, k + 13, air, 0);
		b(w, i + 2, j + 20, k + 14, air, 0);
		b(w, i + 2, j + 20, k + 15, air, 0);
		b(w, i + 2, j + 21, k, air, 0);
		b(w, i + 2, j + 21, k + 1, air, 0);
		b(w, i + 2, j + 21, k + 2, air, 0);
		b(w, i + 2, j + 21, k + 3, air, 0);
		b(w, i + 2, j + 21, k + 4, air, 0);
		b(w, i + 2, j + 21, k + 5, air, 0);
		b(w, i + 2, j + 21, k + 6, air, 0);
		b(w, i + 2, j + 21, k + 7, air, 0);
		b(w, i + 2, j + 21, k + 8, air, 0);
		b(w, i + 2, j + 21, k + 9, air, 0);
		b(w, i + 2, j + 21, k + 10, air, 0);
		b(w, i + 2, j + 21, k + 11, air, 0);
		b(w, i + 2, j + 21, k + 12, air, 0);
		b(w, i + 2, j + 21, k + 13, air, 0);
		b(w, i + 2, j + 21, k + 14, air, 0);
		b(w, i + 2, j + 21, k + 15, air, 0);
		b(w, i + 2, j + 22, k, air, 0);
		b(w, i + 2, j + 22, k + 1, air, 0);
		b(w, i + 2, j + 22, k + 2, air, 0);
		b(w, i + 2, j + 22, k + 3, air, 0);
		b(w, i + 2, j + 22, k + 4, air, 0);
		b(w, i + 2, j + 22, k + 5, air, 0);
		b(w, i + 2, j + 22, k + 6, air, 0);
		b(w, i + 2, j + 22, k + 7, air, 0);
		b(w, i + 2, j + 22, k + 8, air, 0);
		b(w, i + 2, j + 22, k + 9, air, 0);
		b(w, i + 2, j + 22, k + 10, air, 0);
		b(w, i + 2, j + 22, k + 11, air, 0);
		b(w, i + 2, j + 22, k + 12, air, 0);
		b(w, i + 2, j + 22, k + 13, air, 0);
		b(w, i + 2, j + 22, k + 14, air, 0);
		b(w, i + 2, j + 22, k + 15, air, 0);
		b(w, i + 2, j + 23, k, air, 0);
		b(w, i + 2, j + 23, k + 1, air, 0);
		b(w, i + 2, j + 23, k + 2, air, 0);
		b(w, i + 2, j + 23, k + 3, air, 0);
		b(w, i + 2, j + 23, k + 4, air, 0);
		b(w, i + 2, j + 23, k + 5, air, 0);
		b(w, i + 2, j + 23, k + 6, air, 0);
		b(w, i + 2, j + 23, k + 7, air, 0);
		b(w, i + 2, j + 23, k + 8, air, 0);
		b(w, i + 2, j + 23, k + 9, air, 0);
		b(w, i + 2, j + 23, k + 10, air, 0);
		b(w, i + 2, j + 23, k + 11, air, 0);
		b(w, i + 2, j + 23, k + 12, air, 0);
		b(w, i + 2, j + 23, k + 13, air, 0);
		b(w, i + 2, j + 23, k + 14, air, 0);
		b(w, i + 2, j + 23, k + 15, air, 0);
		b(w, i + 2, j + 24, k, air, 0);
		b(w, i + 2, j + 24, k + 1, air, 0);
		b(w, i + 2, j + 24, k + 2, air, 0);
		b(w, i + 2, j + 24, k + 3, air, 0);
		b(w, i + 2, j + 24, k + 4, air, 0);
		b(w, i + 2, j + 24, k + 5, air, 0);
		b(w, i + 2, j + 24, k + 6, air, 0);
		b(w, i + 2, j + 24, k + 7, air, 0);
		b(w, i + 2, j + 24, k + 8, air, 0);
		b(w, i + 2, j + 24, k + 9, air, 0);
		b(w, i + 2, j + 24, k + 10, air, 0);
		b(w, i + 2, j + 24, k + 11, air, 0);
		b(w, i + 2, j + 24, k + 12, air, 0);
		b(w, i + 2, j + 24, k + 13, air, 0);
		b(w, i + 2, j + 24, k + 14, air, 0);
		b(w, i + 2, j + 24, k + 15, air, 0);
		b(w, i + 2, j + 25, k, air, 0);
		b(w, i + 2, j + 25, k + 1, air, 0);
		b(w, i + 2, j + 25, k + 2, air, 0);
		b(w, i + 2, j + 25, k + 3, air, 0);
		b(w, i + 2, j + 25, k + 4, air, 0);
		b(w, i + 2, j + 25, k + 5, air, 0);
		b(w, i + 2, j + 25, k + 6, air, 0);
		b(w, i + 2, j + 25, k + 7, air, 0);
		b(w, i + 2, j + 25, k + 8, air, 0);
		b(w, i + 2, j + 25, k + 9, air, 0);
		b(w, i + 2, j + 25, k + 10, air, 0);
		b(w, i + 2, j + 25, k + 11, air, 0);
		b(w, i + 2, j + 25, k + 12, air, 0);
		b(w, i + 2, j + 25, k + 13, air, 0);
		b(w, i + 2, j + 25, k + 14, air, 0);
		b(w, i + 2, j + 25, k + 15, air, 0);
		b(w, i + 2, j + 26, k, air, 0);
		b(w, i + 2, j + 26, k + 1, air, 0);
		b(w, i + 2, j + 26, k + 2, air, 0);
		b(w, i + 2, j + 26, k + 3, air, 0);
		b(w, i + 2, j + 26, k + 4, air, 0);
		b(w, i + 2, j + 26, k + 5, air, 0);
		b(w, i + 2, j + 26, k + 6, air, 0);
		b(w, i + 2, j + 26, k + 7, air, 0);
		b(w, i + 2, j + 26, k + 8, air, 0);
		b(w, i + 2, j + 26, k + 9, air, 0);
		b(w, i + 2, j + 26, k + 10, air, 0);
		b(w, i + 2, j + 26, k + 11, air, 0);
		b(w, i + 2, j + 26, k + 12, air, 0);
		b(w, i + 2, j + 26, k + 13, air, 0);
		b(w, i + 2, j + 26, k + 14, air, 0);
		b(w, i + 2, j + 26, k + 15, air, 0);
		b(w, i + 2, j + 27, k, air, 0);
		b(w, i + 2, j + 27, k + 1, air, 0);
		b(w, i + 2, j + 27, k + 2, air, 0);
		b(w, i + 2, j + 27, k + 3, air, 0);
		b(w, i + 2, j + 27, k + 4, air, 0);
		b(w, i + 2, j + 27, k + 5, air, 0);
		b(w, i + 2, j + 27, k + 6, air, 0);
		b(w, i + 2, j + 27, k + 7, air, 0);
		b(w, i + 2, j + 27, k + 8, air, 0);
		b(w, i + 2, j + 27, k + 9, air, 0);
		b(w, i + 2, j + 27, k + 10, air, 0);
		b(w, i + 2, j + 27, k + 11, air, 0);
		b(w, i + 2, j + 27, k + 12, air, 0);
		b(w, i + 2, j + 27, k + 13, air, 0);
		b(w, i + 2, j + 27, k + 14, air, 0);
		b(w, i + 2, j + 27, k + 15, air, 0);
		b(w, i + 2, j + 28, k, air, 0);
		b(w, i + 2, j + 28, k + 1, air, 0);
		b(w, i + 2, j + 28, k + 2, air, 0);
		b(w, i + 2, j + 28, k + 3, air, 0);
		b(w, i + 2, j + 28, k + 4, air, 0);
		b(w, i + 2, j + 28, k + 5, air, 0);
		b(w, i + 2, j + 28, k + 6, air, 0);
		b(w, i + 2, j + 28, k + 7, air, 0);
		b(w, i + 2, j + 28, k + 8, air, 0);
		b(w, i + 2, j + 28, k + 9, air, 0);
		b(w, i + 2, j + 28, k + 10, air, 0);
		b(w, i + 2, j + 28, k + 11, air, 0);
		b(w, i + 2, j + 28, k + 12, air, 0);
		b(w, i + 2, j + 28, k + 13, air, 0);
		b(w, i + 2, j + 28, k + 14, air, 0);
		b(w, i + 2, j + 28, k + 15, air, 0);
		b(w, i + 3, j, k, blockTatooineSand, 0);
		b(w, i + 3, j, k + 1, blockTatooineSand, 0);
		b(w, i + 3, j, k + 2, blockTatooineSand, 0);
		b(w, i + 3, j, k + 3, blockTatooineSand, 0);
		b(w, i + 3, j, k + 4, blockTatooineSand, 0);
		b(w, i + 3, j, k + 5, blockTatooineSand, 0);
		b(w, i + 3, j, k + 6, blockTatooineSand, 0);
		b(w, i + 3, j, k + 7, blockTatooineSand, 0);
		b(w, i + 3, j, k + 8, blockTatooineSand, 0);
		b(w, i + 3, j, k + 9, blockTatooineSand, 0);
		b(w, i + 3, j, k + 10, blockTatooineSand, 0);
		b(w, i + 3, j, k + 11, blockTatooineSand, 0);
		b(w, i + 3, j, k + 12, blockTatooineSand, 0);
		b(w, i + 3, j, k + 13, blockTatooineSand, 0);
		b(w, i + 3, j, k + 14, blockTatooineSand, 0);
		b(w, i + 3, j, k + 15, blockTatooineSand, 0);
		b(w, i + 3, j + 1, k, air, 0);
		b(w, i + 3, j + 1, k + 1, air, 0);
		b(w, i + 3, j + 1, k + 2, air, 0);
		b(w, i + 3, j + 1, k + 3, air, 0);
		b(w, i + 3, j + 1, k + 4, air, 0);
		b(w, i + 3, j + 1, k + 5, air, 0);
		b(w, i + 3, j + 1, k + 6, air, 0);
		b(w, i + 3, j + 1, k + 7, air, 0);
		b(w, i + 3, j + 1, k + 8, air, 0);
		b(w, i + 3, j + 1, k + 9, air, 0);
		b(w, i + 3, j + 1, k + 10, air, 0);
		b(w, i + 3, j + 1, k + 11, air, 0);
		b(w, i + 3, j + 1, k + 12, air, 0);
		b(w, i + 3, j + 1, k + 13, air, 0);
		b(w, i + 3, j + 1, k + 14, air, 0);
		b(w, i + 3, j + 1, k + 15, air, 0);
		b(w, i + 3, j + 2, k, air, 0);
		b(w, i + 3, j + 2, k + 1, air, 0);
		b(w, i + 3, j + 2, k + 2, air, 0);
		b(w, i + 3, j + 2, k + 3, air, 0);
		b(w, i + 3, j + 2, k + 4, air, 0);
		b(w, i + 3, j + 2, k + 5, air, 0);
		b(w, i + 3, j + 2, k + 6, air, 0);
		b(w, i + 3, j + 2, k + 7, air, 0);
		b(w, i + 3, j + 2, k + 8, air, 0);
		b(w, i + 3, j + 2, k + 9, air, 0);
		b(w, i + 3, j + 2, k + 10, air, 0);
		b(w, i + 3, j + 2, k + 11, air, 0);
		b(w, i + 3, j + 2, k + 12, air, 0);
		b(w, i + 3, j + 2, k + 13, air, 0);
		b(w, i + 3, j + 2, k + 14, air, 0);
		b(w, i + 3, j + 2, k + 15, air, 0);
		b(w, i + 3, j + 3, k, air, 0);
		b(w, i + 3, j + 3, k + 1, air, 0);
		b(w, i + 3, j + 3, k + 2, air, 0);
		b(w, i + 3, j + 3, k + 3, air, 0);
		b(w, i + 3, j + 3, k + 4, air, 0);
		b(w, i + 3, j + 3, k + 5, air, 0);
		b(w, i + 3, j + 3, k + 6, air, 0);
		b(w, i + 3, j + 3, k + 7, air, 0);
		b(w, i + 3, j + 3, k + 8, air, 0);
		b(w, i + 3, j + 3, k + 9, air, 0);
		b(w, i + 3, j + 3, k + 10, air, 0);
		b(w, i + 3, j + 3, k + 11, air, 0);
		b(w, i + 3, j + 3, k + 12, air, 0);
		b(w, i + 3, j + 3, k + 13, air, 0);
		b(w, i + 3, j + 3, k + 14, air, 0);
		b(w, i + 3, j + 3, k + 15, air, 0);
		b(w, i + 3, j + 4, k, air, 0);
		b(w, i + 3, j + 4, k + 1, air, 0);
		b(w, i + 3, j + 4, k + 2, air, 0);
		b(w, i + 3, j + 4, k + 3, air, 0);
		b(w, i + 3, j + 4, k + 4, air, 0);
		b(w, i + 3, j + 4, k + 5, air, 0);
		b(w, i + 3, j + 4, k + 6, air, 0);
		b(w, i + 3, j + 4, k + 7, air, 0);
		b(w, i + 3, j + 4, k + 8, air, 0);
		b(w, i + 3, j + 4, k + 9, air, 0);
		b(w, i + 3, j + 4, k + 10, air, 0);
		b(w, i + 3, j + 4, k + 11, air, 0);
		b(w, i + 3, j + 4, k + 12, air, 0);
		b(w, i + 3, j + 4, k + 13, air, 0);
		b(w, i + 3, j + 4, k + 14, air, 0);
		b(w, i + 3, j + 4, k + 15, air, 0);
		b(w, i + 3, j + 5, k, air, 0);
		b(w, i + 3, j + 5, k + 1, air, 0);
		b(w, i + 3, j + 5, k + 2, air, 0);
		b(w, i + 3, j + 5, k + 3, air, 0);
		b(w, i + 3, j + 5, k + 4, air, 0);
		b(w, i + 3, j + 5, k + 5, air, 0);
		b(w, i + 3, j + 5, k + 6, air, 0);
		b(w, i + 3, j + 5, k + 7, air, 0);
		b(w, i + 3, j + 5, k + 8, air, 0);
		b(w, i + 3, j + 5, k + 9, air, 0);
		b(w, i + 3, j + 5, k + 10, air, 0);
		b(w, i + 3, j + 5, k + 11, air, 0);
		b(w, i + 3, j + 5, k + 12, air, 0);
		b(w, i + 3, j + 5, k + 13, air, 0);
		b(w, i + 3, j + 5, k + 14, air, 0);
		b(w, i + 3, j + 5, k + 15, air, 0);
		b(w, i + 3, j + 6, k, air, 0);
		b(w, i + 3, j + 6, k + 1, air, 0);
		b(w, i + 3, j + 6, k + 2, air, 0);
		b(w, i + 3, j + 6, k + 3, air, 0);
		b(w, i + 3, j + 6, k + 4, air, 0);
		b(w, i + 3, j + 6, k + 5, air, 0);
		b(w, i + 3, j + 6, k + 6, air, 0);
		b(w, i + 3, j + 6, k + 7, air, 0);
		b(w, i + 3, j + 6, k + 8, air, 0);
		b(w, i + 3, j + 6, k + 9, air, 0);
		b(w, i + 3, j + 6, k + 10, air, 0);
		b(w, i + 3, j + 6, k + 11, air, 0);
		b(w, i + 3, j + 6, k + 12, air, 0);
		b(w, i + 3, j + 6, k + 13, air, 0);
		b(w, i + 3, j + 6, k + 14, air, 0);
		generate_3(w, i, j, k);
	}

	public static void generate_3(World w, int i, int j, int k)
	{
		b(w, i + 3, j + 6, k + 15, air, 0);
		b(w, i + 3, j + 7, k, air, 0);
		b(w, i + 3, j + 7, k + 1, air, 0);
		b(w, i + 3, j + 7, k + 2, air, 0);
		b(w, i + 3, j + 7, k + 3, air, 0);
		b(w, i + 3, j + 7, k + 4, air, 0);
		b(w, i + 3, j + 7, k + 5, air, 0);
		b(w, i + 3, j + 7, k + 6, air, 0);
		b(w, i + 3, j + 7, k + 7, air, 0);
		b(w, i + 3, j + 7, k + 8, air, 0);
		b(w, i + 3, j + 7, k + 9, air, 0);
		b(w, i + 3, j + 7, k + 10, air, 0);
		b(w, i + 3, j + 7, k + 11, air, 0);
		b(w, i + 3, j + 7, k + 12, air, 0);
		b(w, i + 3, j + 7, k + 13, air, 0);
		b(w, i + 3, j + 7, k + 14, air, 0);
		b(w, i + 3, j + 7, k + 15, air, 0);
		b(w, i + 3, j + 8, k, air, 0);
		b(w, i + 3, j + 8, k + 1, air, 0);
		b(w, i + 3, j + 8, k + 2, air, 0);
		b(w, i + 3, j + 8, k + 3, air, 0);
		b(w, i + 3, j + 8, k + 4, air, 0);
		b(w, i + 3, j + 8, k + 5, air, 0);
		b(w, i + 3, j + 8, k + 6, air, 0);
		b(w, i + 3, j + 8, k + 7, air, 0);
		b(w, i + 3, j + 8, k + 8, air, 0);
		b(w, i + 3, j + 8, k + 9, air, 0);
		b(w, i + 3, j + 8, k + 10, air, 0);
		b(w, i + 3, j + 8, k + 11, air, 0);
		b(w, i + 3, j + 8, k + 12, air, 0);
		b(w, i + 3, j + 8, k + 13, air, 0);
		b(w, i + 3, j + 8, k + 14, air, 0);
		b(w, i + 3, j + 8, k + 15, air, 0);
		b(w, i + 3, j + 9, k, air, 0);
		b(w, i + 3, j + 9, k + 1, air, 0);
		b(w, i + 3, j + 9, k + 2, air, 0);
		b(w, i + 3, j + 9, k + 3, air, 0);
		b(w, i + 3, j + 9, k + 4, air, 0);
		b(w, i + 3, j + 9, k + 5, air, 0);
		b(w, i + 3, j + 9, k + 6, air, 0);
		b(w, i + 3, j + 9, k + 7, air, 0);
		b(w, i + 3, j + 9, k + 8, air, 0);
		b(w, i + 3, j + 9, k + 9, air, 0);
		b(w, i + 3, j + 9, k + 10, air, 0);
		b(w, i + 3, j + 9, k + 11, air, 0);
		b(w, i + 3, j + 9, k + 12, air, 0);
		b(w, i + 3, j + 9, k + 13, air, 0);
		b(w, i + 3, j + 9, k + 14, air, 0);
		b(w, i + 3, j + 9, k + 15, air, 0);
		b(w, i + 3, j + 10, k, air, 0);
		b(w, i + 3, j + 10, k + 1, air, 0);
		b(w, i + 3, j + 10, k + 2, air, 0);
		b(w, i + 3, j + 10, k + 3, air, 0);
		b(w, i + 3, j + 10, k + 4, air, 0);
		b(w, i + 3, j + 10, k + 5, air, 0);
		b(w, i + 3, j + 10, k + 6, air, 0);
		b(w, i + 3, j + 10, k + 7, air, 0);
		b(w, i + 3, j + 10, k + 8, air, 0);
		b(w, i + 3, j + 10, k + 9, air, 0);
		b(w, i + 3, j + 10, k + 10, air, 0);
		b(w, i + 3, j + 10, k + 11, air, 0);
		b(w, i + 3, j + 10, k + 12, air, 0);
		b(w, i + 3, j + 10, k + 13, air, 0);
		b(w, i + 3, j + 10, k + 14, air, 0);
		b(w, i + 3, j + 10, k + 15, air, 0);
		b(w, i + 3, j + 11, k, air, 0);
		b(w, i + 3, j + 11, k + 1, air, 0);
		b(w, i + 3, j + 11, k + 2, air, 0);
		b(w, i + 3, j + 11, k + 3, air, 0);
		b(w, i + 3, j + 11, k + 4, air, 0);
		b(w, i + 3, j + 11, k + 5, air, 0);
		b(w, i + 3, j + 11, k + 6, air, 0);
		b(w, i + 3, j + 11, k + 7, air, 0);
		b(w, i + 3, j + 11, k + 8, air, 0);
		b(w, i + 3, j + 11, k + 9, air, 0);
		b(w, i + 3, j + 11, k + 10, air, 0);
		b(w, i + 3, j + 11, k + 11, air, 0);
		b(w, i + 3, j + 11, k + 12, air, 0);
		b(w, i + 3, j + 11, k + 13, air, 0);
		b(w, i + 3, j + 11, k + 14, air, 0);
		b(w, i + 3, j + 11, k + 15, air, 0);
		b(w, i + 3, j + 12, k, air, 0);
		b(w, i + 3, j + 12, k + 1, air, 0);
		b(w, i + 3, j + 12, k + 2, air, 0);
		b(w, i + 3, j + 12, k + 3, air, 0);
		b(w, i + 3, j + 12, k + 4, air, 0);
		b(w, i + 3, j + 12, k + 5, air, 0);
		b(w, i + 3, j + 12, k + 6, air, 0);
		b(w, i + 3, j + 12, k + 7, air, 0);
		b(w, i + 3, j + 12, k + 8, air, 0);
		b(w, i + 3, j + 12, k + 9, air, 0);
		b(w, i + 3, j + 12, k + 10, air, 0);
		b(w, i + 3, j + 12, k + 11, air, 0);
		b(w, i + 3, j + 12, k + 12, air, 0);
		b(w, i + 3, j + 12, k + 13, air, 0);
		b(w, i + 3, j + 12, k + 14, air, 0);
		b(w, i + 3, j + 12, k + 15, air, 0);
		b(w, i + 3, j + 13, k, air, 0);
		b(w, i + 3, j + 13, k + 1, air, 0);
		b(w, i + 3, j + 13, k + 2, air, 0);
		b(w, i + 3, j + 13, k + 3, air, 0);
		b(w, i + 3, j + 13, k + 4, air, 0);
		b(w, i + 3, j + 13, k + 5, air, 0);
		b(w, i + 3, j + 13, k + 6, air, 0);
		b(w, i + 3, j + 13, k + 7, air, 0);
		b(w, i + 3, j + 13, k + 8, air, 0);
		b(w, i + 3, j + 13, k + 9, air, 0);
		b(w, i + 3, j + 13, k + 10, air, 0);
		b(w, i + 3, j + 13, k + 11, air, 0);
		b(w, i + 3, j + 13, k + 12, air, 0);
		b(w, i + 3, j + 13, k + 13, air, 0);
		b(w, i + 3, j + 13, k + 14, air, 0);
		b(w, i + 3, j + 13, k + 15, air, 0);
		b(w, i + 3, j + 14, k, air, 0);
		b(w, i + 3, j + 14, k + 1, air, 0);
		b(w, i + 3, j + 14, k + 2, air, 0);
		b(w, i + 3, j + 14, k + 3, air, 0);
		b(w, i + 3, j + 14, k + 4, air, 0);
		b(w, i + 3, j + 14, k + 5, air, 0);
		b(w, i + 3, j + 14, k + 6, air, 0);
		b(w, i + 3, j + 14, k + 7, air, 0);
		b(w, i + 3, j + 14, k + 8, air, 0);
		b(w, i + 3, j + 14, k + 9, air, 0);
		b(w, i + 3, j + 14, k + 10, air, 0);
		b(w, i + 3, j + 14, k + 11, air, 0);
		b(w, i + 3, j + 14, k + 12, air, 0);
		b(w, i + 3, j + 14, k + 13, air, 0);
		b(w, i + 3, j + 14, k + 14, air, 0);
		b(w, i + 3, j + 14, k + 15, air, 0);
		b(w, i + 3, j + 15, k, air, 0);
		b(w, i + 3, j + 15, k + 1, air, 0);
		b(w, i + 3, j + 15, k + 2, air, 0);
		b(w, i + 3, j + 15, k + 3, air, 0);
		b(w, i + 3, j + 15, k + 4, air, 0);
		b(w, i + 3, j + 15, k + 5, air, 0);
		b(w, i + 3, j + 15, k + 6, air, 0);
		b(w, i + 3, j + 15, k + 7, air, 0);
		b(w, i + 3, j + 15, k + 8, air, 0);
		b(w, i + 3, j + 15, k + 9, air, 0);
		b(w, i + 3, j + 15, k + 10, air, 0);
		b(w, i + 3, j + 15, k + 11, air, 0);
		b(w, i + 3, j + 15, k + 12, air, 0);
		b(w, i + 3, j + 15, k + 13, air, 0);
		b(w, i + 3, j + 15, k + 14, air, 0);
		b(w, i + 3, j + 15, k + 15, air, 0);
		b(w, i + 3, j + 16, k, air, 0);
		b(w, i + 3, j + 16, k + 1, air, 0);
		b(w, i + 3, j + 16, k + 2, air, 0);
		b(w, i + 3, j + 16, k + 3, air, 0);
		b(w, i + 3, j + 16, k + 4, air, 0);
		b(w, i + 3, j + 16, k + 5, air, 0);
		b(w, i + 3, j + 16, k + 6, air, 0);
		b(w, i + 3, j + 16, k + 7, air, 0);
		b(w, i + 3, j + 16, k + 8, air, 0);
		b(w, i + 3, j + 16, k + 9, air, 0);
		b(w, i + 3, j + 16, k + 10, air, 0);
		b(w, i + 3, j + 16, k + 11, air, 0);
		b(w, i + 3, j + 16, k + 12, air, 0);
		b(w, i + 3, j + 16, k + 13, air, 0);
		b(w, i + 3, j + 16, k + 14, air, 0);
		b(w, i + 3, j + 16, k + 15, air, 0);
		b(w, i + 3, j + 17, k, air, 0);
		b(w, i + 3, j + 17, k + 1, air, 0);
		b(w, i + 3, j + 17, k + 2, air, 0);
		b(w, i + 3, j + 17, k + 3, air, 0);
		b(w, i + 3, j + 17, k + 4, air, 0);
		b(w, i + 3, j + 17, k + 5, air, 0);
		b(w, i + 3, j + 17, k + 6, air, 0);
		b(w, i + 3, j + 17, k + 7, air, 0);
		b(w, i + 3, j + 17, k + 8, air, 0);
		b(w, i + 3, j + 17, k + 9, air, 0);
		b(w, i + 3, j + 17, k + 10, air, 0);
		b(w, i + 3, j + 17, k + 11, air, 0);
		b(w, i + 3, j + 17, k + 12, air, 0);
		b(w, i + 3, j + 17, k + 13, air, 0);
		b(w, i + 3, j + 17, k + 14, air, 0);
		b(w, i + 3, j + 17, k + 15, air, 0);
		b(w, i + 3, j + 18, k, air, 0);
		b(w, i + 3, j + 18, k + 1, air, 0);
		b(w, i + 3, j + 18, k + 2, air, 0);
		b(w, i + 3, j + 18, k + 3, air, 0);
		b(w, i + 3, j + 18, k + 4, air, 0);
		b(w, i + 3, j + 18, k + 5, air, 0);
		b(w, i + 3, j + 18, k + 6, air, 0);
		b(w, i + 3, j + 18, k + 7, air, 0);
		b(w, i + 3, j + 18, k + 8, air, 0);
		b(w, i + 3, j + 18, k + 9, air, 0);
		b(w, i + 3, j + 18, k + 10, air, 0);
		b(w, i + 3, j + 18, k + 11, air, 0);
		b(w, i + 3, j + 18, k + 12, air, 0);
		b(w, i + 3, j + 18, k + 13, air, 0);
		b(w, i + 3, j + 18, k + 14, air, 0);
		b(w, i + 3, j + 18, k + 15, air, 0);
		b(w, i + 3, j + 19, k, air, 0);
		b(w, i + 3, j + 19, k + 1, air, 0);
		b(w, i + 3, j + 19, k + 2, air, 0);
		b(w, i + 3, j + 19, k + 3, air, 0);
		b(w, i + 3, j + 19, k + 4, air, 0);
		b(w, i + 3, j + 19, k + 5, air, 0);
		b(w, i + 3, j + 19, k + 6, air, 0);
		b(w, i + 3, j + 19, k + 7, air, 0);
		b(w, i + 3, j + 19, k + 8, air, 0);
		b(w, i + 3, j + 19, k + 9, air, 0);
		b(w, i + 3, j + 19, k + 10, air, 0);
		b(w, i + 3, j + 19, k + 11, air, 0);
		b(w, i + 3, j + 19, k + 12, air, 0);
		b(w, i + 3, j + 19, k + 13, air, 0);
		b(w, i + 3, j + 19, k + 14, air, 0);
		b(w, i + 3, j + 19, k + 15, air, 0);
		b(w, i + 3, j + 20, k, air, 0);
		b(w, i + 3, j + 20, k + 1, air, 0);
		b(w, i + 3, j + 20, k + 2, air, 0);
		b(w, i + 3, j + 20, k + 3, air, 0);
		b(w, i + 3, j + 20, k + 4, air, 0);
		b(w, i + 3, j + 20, k + 5, air, 0);
		b(w, i + 3, j + 20, k + 6, air, 0);
		b(w, i + 3, j + 20, k + 7, air, 0);
		b(w, i + 3, j + 20, k + 8, air, 0);
		b(w, i + 3, j + 20, k + 9, air, 0);
		b(w, i + 3, j + 20, k + 10, air, 0);
		b(w, i + 3, j + 20, k + 11, air, 0);
		b(w, i + 3, j + 20, k + 12, air, 0);
		b(w, i + 3, j + 20, k + 13, air, 0);
		b(w, i + 3, j + 20, k + 14, air, 0);
		b(w, i + 3, j + 20, k + 15, air, 0);
		b(w, i + 3, j + 21, k, air, 0);
		b(w, i + 3, j + 21, k + 1, air, 0);
		b(w, i + 3, j + 21, k + 2, air, 0);
		b(w, i + 3, j + 21, k + 3, air, 0);
		b(w, i + 3, j + 21, k + 4, air, 0);
		b(w, i + 3, j + 21, k + 5, air, 0);
		b(w, i + 3, j + 21, k + 6, air, 0);
		b(w, i + 3, j + 21, k + 7, air, 0);
		b(w, i + 3, j + 21, k + 8, air, 0);
		b(w, i + 3, j + 21, k + 9, air, 0);
		b(w, i + 3, j + 21, k + 10, air, 0);
		b(w, i + 3, j + 21, k + 11, air, 0);
		b(w, i + 3, j + 21, k + 12, air, 0);
		b(w, i + 3, j + 21, k + 13, air, 0);
		b(w, i + 3, j + 21, k + 14, air, 0);
		b(w, i + 3, j + 21, k + 15, air, 0);
		b(w, i + 3, j + 22, k, air, 0);
		b(w, i + 3, j + 22, k + 1, air, 0);
		b(w, i + 3, j + 22, k + 2, air, 0);
		b(w, i + 3, j + 22, k + 3, air, 0);
		b(w, i + 3, j + 22, k + 4, air, 0);
		b(w, i + 3, j + 22, k + 5, air, 0);
		b(w, i + 3, j + 22, k + 6, air, 0);
		b(w, i + 3, j + 22, k + 7, air, 0);
		b(w, i + 3, j + 22, k + 8, air, 0);
		b(w, i + 3, j + 22, k + 9, air, 0);
		b(w, i + 3, j + 22, k + 10, air, 0);
		b(w, i + 3, j + 22, k + 11, air, 0);
		b(w, i + 3, j + 22, k + 12, air, 0);
		b(w, i + 3, j + 22, k + 13, air, 0);
		b(w, i + 3, j + 22, k + 14, air, 0);
		b(w, i + 3, j + 22, k + 15, air, 0);
		b(w, i + 3, j + 23, k, air, 0);
		b(w, i + 3, j + 23, k + 1, air, 0);
		b(w, i + 3, j + 23, k + 2, air, 0);
		b(w, i + 3, j + 23, k + 3, air, 0);
		b(w, i + 3, j + 23, k + 4, air, 0);
		b(w, i + 3, j + 23, k + 5, air, 0);
		b(w, i + 3, j + 23, k + 6, air, 0);
		b(w, i + 3, j + 23, k + 7, air, 0);
		b(w, i + 3, j + 23, k + 8, air, 0);
		b(w, i + 3, j + 23, k + 9, air, 0);
		b(w, i + 3, j + 23, k + 10, air, 0);
		b(w, i + 3, j + 23, k + 11, air, 0);
		b(w, i + 3, j + 23, k + 12, air, 0);
		b(w, i + 3, j + 23, k + 13, air, 0);
		b(w, i + 3, j + 23, k + 14, air, 0);
		b(w, i + 3, j + 23, k + 15, air, 0);
		b(w, i + 3, j + 24, k, air, 0);
		b(w, i + 3, j + 24, k + 1, air, 0);
		b(w, i + 3, j + 24, k + 2, air, 0);
		b(w, i + 3, j + 24, k + 3, air, 0);
		b(w, i + 3, j + 24, k + 4, air, 0);
		b(w, i + 3, j + 24, k + 5, air, 0);
		b(w, i + 3, j + 24, k + 6, air, 0);
		b(w, i + 3, j + 24, k + 7, air, 0);
		b(w, i + 3, j + 24, k + 8, air, 0);
		b(w, i + 3, j + 24, k + 9, air, 0);
		b(w, i + 3, j + 24, k + 10, air, 0);
		b(w, i + 3, j + 24, k + 11, air, 0);
		b(w, i + 3, j + 24, k + 12, air, 0);
		b(w, i + 3, j + 24, k + 13, air, 0);
		b(w, i + 3, j + 24, k + 14, air, 0);
		b(w, i + 3, j + 24, k + 15, air, 0);
		b(w, i + 3, j + 25, k, air, 0);
		b(w, i + 3, j + 25, k + 1, air, 0);
		b(w, i + 3, j + 25, k + 2, air, 0);
		b(w, i + 3, j + 25, k + 3, air, 0);
		b(w, i + 3, j + 25, k + 4, air, 0);
		b(w, i + 3, j + 25, k + 5, air, 0);
		b(w, i + 3, j + 25, k + 6, air, 0);
		b(w, i + 3, j + 25, k + 7, air, 0);
		b(w, i + 3, j + 25, k + 8, air, 0);
		b(w, i + 3, j + 25, k + 9, air, 0);
		b(w, i + 3, j + 25, k + 10, air, 0);
		b(w, i + 3, j + 25, k + 11, air, 0);
		b(w, i + 3, j + 25, k + 12, air, 0);
		b(w, i + 3, j + 25, k + 13, air, 0);
		b(w, i + 3, j + 25, k + 14, air, 0);
		b(w, i + 3, j + 25, k + 15, air, 0);
		b(w, i + 3, j + 26, k, air, 0);
		b(w, i + 3, j + 26, k + 1, air, 0);
		b(w, i + 3, j + 26, k + 2, air, 0);
		b(w, i + 3, j + 26, k + 3, air, 0);
		b(w, i + 3, j + 26, k + 4, air, 0);
		b(w, i + 3, j + 26, k + 5, air, 0);
		b(w, i + 3, j + 26, k + 6, air, 0);
		b(w, i + 3, j + 26, k + 7, air, 0);
		b(w, i + 3, j + 26, k + 8, air, 0);
		b(w, i + 3, j + 26, k + 9, air, 0);
		b(w, i + 3, j + 26, k + 10, air, 0);
		b(w, i + 3, j + 26, k + 11, air, 0);
		b(w, i + 3, j + 26, k + 12, air, 0);
		b(w, i + 3, j + 26, k + 13, air, 0);
		b(w, i + 3, j + 26, k + 14, air, 0);
		b(w, i + 3, j + 26, k + 15, air, 0);
		b(w, i + 3, j + 27, k, air, 0);
		b(w, i + 3, j + 27, k + 1, air, 0);
		b(w, i + 3, j + 27, k + 2, air, 0);
		b(w, i + 3, j + 27, k + 3, air, 0);
		b(w, i + 3, j + 27, k + 4, air, 0);
		b(w, i + 3, j + 27, k + 5, air, 0);
		b(w, i + 3, j + 27, k + 6, air, 0);
		b(w, i + 3, j + 27, k + 7, air, 0);
		b(w, i + 3, j + 27, k + 8, air, 0);
		b(w, i + 3, j + 27, k + 9, air, 0);
		b(w, i + 3, j + 27, k + 10, air, 0);
		b(w, i + 3, j + 27, k + 11, air, 0);
		b(w, i + 3, j + 27, k + 12, air, 0);
		b(w, i + 3, j + 27, k + 13, air, 0);
		b(w, i + 3, j + 27, k + 14, air, 0);
		b(w, i + 3, j + 27, k + 15, air, 0);
		b(w, i + 3, j + 28, k, air, 0);
		b(w, i + 3, j + 28, k + 1, air, 0);
		b(w, i + 3, j + 28, k + 2, air, 0);
		b(w, i + 3, j + 28, k + 3, air, 0);
		b(w, i + 3, j + 28, k + 4, air, 0);
		b(w, i + 3, j + 28, k + 5, air, 0);
		b(w, i + 3, j + 28, k + 6, air, 0);
		b(w, i + 3, j + 28, k + 7, air, 0);
		b(w, i + 3, j + 28, k + 8, air, 0);
		b(w, i + 3, j + 28, k + 9, air, 0);
		b(w, i + 3, j + 28, k + 10, air, 0);
		b(w, i + 3, j + 28, k + 11, air, 0);
		b(w, i + 3, j + 28, k + 12, air, 0);
		b(w, i + 3, j + 28, k + 13, air, 0);
		b(w, i + 3, j + 28, k + 14, air, 0);
		b(w, i + 3, j + 28, k + 15, air, 0);
		b(w, i + 4, j, k, blockTatooineSand, 0);
		b(w, i + 4, j, k + 1, blockTatooineSand, 0);
		b(w, i + 4, j, k + 2, blockTatooineSand, 0);
		b(w, i + 4, j, k + 3, blockTatooineSand, 0);
		b(w, i + 4, j, k + 4, blockTatooineSand, 0);
		b(w, i + 4, j, k + 5, blockTatooineSand, 0);
		b(w, i + 4, j, k + 6, blockTatooineSand, 0);
		b(w, i + 4, j, k + 7, blockTatooineSand, 0);
		b(w, i + 4, j, k + 8, blockTatooineSand, 0);
		b(w, i + 4, j, k + 9, blockTatooineSand, 0);
		b(w, i + 4, j, k + 10, blockTatooineSand, 0);
		b(w, i + 4, j, k + 11, blockTatooineSand, 0);
		b(w, i + 4, j, k + 12, blockTatooineSand, 0);
		b(w, i + 4, j, k + 13, blockTatooineSand, 0);
		b(w, i + 4, j, k + 14, blockTatooineSand, 0);
		b(w, i + 4, j, k + 15, blockTatooineSand, 0);
		b(w, i + 4, j + 1, k, air, 0);
		b(w, i + 4, j + 1, k + 1, air, 0);
		b(w, i + 4, j + 1, k + 2, air, 0);
		b(w, i + 4, j + 1, k + 3, air, 0);
		b(w, i + 4, j + 1, k + 4, air, 0);
		b(w, i + 4, j + 1, k + 5, air, 0);
		b(w, i + 4, j + 1, k + 6, air, 0);
		b(w, i + 4, j + 1, k + 7, air, 0);
		b(w, i + 4, j + 1, k + 8, air, 0);
		b(w, i + 4, j + 1, k + 9, air, 0);
		b(w, i + 4, j + 1, k + 10, air, 0);
		b(w, i + 4, j + 1, k + 11, air, 0);
		b(w, i + 4, j + 1, k + 12, air, 0);
		b(w, i + 4, j + 1, k + 13, air, 0);
		b(w, i + 4, j + 1, k + 14, air, 0);
		b(w, i + 4, j + 1, k + 15, air, 0);
		b(w, i + 4, j + 2, k, air, 0);
		b(w, i + 4, j + 2, k + 1, air, 0);
		b(w, i + 4, j + 2, k + 2, air, 0);
		b(w, i + 4, j + 2, k + 3, air, 0);
		b(w, i + 4, j + 2, k + 4, air, 0);
		b(w, i + 4, j + 2, k + 5, air, 0);
		b(w, i + 4, j + 2, k + 6, air, 0);
		b(w, i + 4, j + 2, k + 7, air, 0);
		b(w, i + 4, j + 2, k + 8, air, 0);
		b(w, i + 4, j + 2, k + 9, air, 0);
		b(w, i + 4, j + 2, k + 10, air, 0);
		b(w, i + 4, j + 2, k + 11, air, 0);
		b(w, i + 4, j + 2, k + 12, air, 0);
		b(w, i + 4, j + 2, k + 13, air, 0);
		b(w, i + 4, j + 2, k + 14, air, 0);
		b(w, i + 4, j + 2, k + 15, air, 0);
		b(w, i + 4, j + 3, k, air, 0);
		b(w, i + 4, j + 3, k + 1, air, 0);
		b(w, i + 4, j + 3, k + 2, air, 0);
		b(w, i + 4, j + 3, k + 3, air, 0);
		b(w, i + 4, j + 3, k + 4, air, 0);
		b(w, i + 4, j + 3, k + 5, air, 0);
		b(w, i + 4, j + 3, k + 6, air, 0);
		b(w, i + 4, j + 3, k + 7, air, 0);
		b(w, i + 4, j + 3, k + 8, air, 0);
		b(w, i + 4, j + 3, k + 9, air, 0);
		b(w, i + 4, j + 3, k + 10, air, 0);
		b(w, i + 4, j + 3, k + 11, air, 0);
		b(w, i + 4, j + 3, k + 12, air, 0);
		b(w, i + 4, j + 3, k + 13, air, 0);
		b(w, i + 4, j + 3, k + 14, air, 0);
		b(w, i + 4, j + 3, k + 15, air, 0);
		b(w, i + 4, j + 4, k, air, 0);
		b(w, i + 4, j + 4, k + 1, air, 0);
		b(w, i + 4, j + 4, k + 2, air, 0);
		b(w, i + 4, j + 4, k + 3, air, 0);
		b(w, i + 4, j + 4, k + 4, air, 0);
		b(w, i + 4, j + 4, k + 5, air, 0);
		b(w, i + 4, j + 4, k + 6, air, 0);
		b(w, i + 4, j + 4, k + 7, air, 0);
		b(w, i + 4, j + 4, k + 8, air, 0);
		b(w, i + 4, j + 4, k + 9, air, 0);
		b(w, i + 4, j + 4, k + 10, air, 0);
		b(w, i + 4, j + 4, k + 11, air, 0);
		b(w, i + 4, j + 4, k + 12, air, 0);
		b(w, i + 4, j + 4, k + 13, air, 0);
		b(w, i + 4, j + 4, k + 14, air, 0);
		b(w, i + 4, j + 4, k + 15, air, 0);
		b(w, i + 4, j + 5, k, air, 0);
		b(w, i + 4, j + 5, k + 1, air, 0);
		b(w, i + 4, j + 5, k + 2, air, 0);
		b(w, i + 4, j + 5, k + 3, air, 0);
		b(w, i + 4, j + 5, k + 4, air, 0);
		b(w, i + 4, j + 5, k + 5, air, 0);
		b(w, i + 4, j + 5, k + 6, air, 0);
		b(w, i + 4, j + 5, k + 7, air, 0);
		b(w, i + 4, j + 5, k + 8, air, 0);
		b(w, i + 4, j + 5, k + 9, air, 0);
		b(w, i + 4, j + 5, k + 10, air, 0);
		b(w, i + 4, j + 5, k + 11, air, 0);
		b(w, i + 4, j + 5, k + 12, air, 0);
		b(w, i + 4, j + 5, k + 13, air, 0);
		b(w, i + 4, j + 5, k + 14, air, 0);
		b(w, i + 4, j + 5, k + 15, air, 0);
		b(w, i + 4, j + 6, k, air, 0);
		b(w, i + 4, j + 6, k + 1, air, 0);
		b(w, i + 4, j + 6, k + 2, air, 0);
		b(w, i + 4, j + 6, k + 3, air, 0);
		b(w, i + 4, j + 6, k + 4, air, 0);
		b(w, i + 4, j + 6, k + 5, air, 0);
		b(w, i + 4, j + 6, k + 6, air, 0);
		b(w, i + 4, j + 6, k + 7, air, 0);
		b(w, i + 4, j + 6, k + 8, air, 0);
		b(w, i + 4, j + 6, k + 9, air, 0);
		b(w, i + 4, j + 6, k + 10, air, 0);
		b(w, i + 4, j + 6, k + 11, air, 0);
		b(w, i + 4, j + 6, k + 12, air, 0);
		b(w, i + 4, j + 6, k + 13, air, 0);
		b(w, i + 4, j + 6, k + 14, air, 0);
		b(w, i + 4, j + 6, k + 15, air, 0);
		b(w, i + 4, j + 7, k, air, 0);
		b(w, i + 4, j + 7, k + 1, air, 0);
		b(w, i + 4, j + 7, k + 2, air, 0);
		b(w, i + 4, j + 7, k + 3, air, 0);
		b(w, i + 4, j + 7, k + 4, air, 0);
		b(w, i + 4, j + 7, k + 5, air, 0);
		b(w, i + 4, j + 7, k + 6, air, 0);
		b(w, i + 4, j + 7, k + 7, air, 0);
		b(w, i + 4, j + 7, k + 8, air, 0);
		b(w, i + 4, j + 7, k + 9, air, 0);
		b(w, i + 4, j + 7, k + 10, air, 0);
		b(w, i + 4, j + 7, k + 11, air, 0);
		b(w, i + 4, j + 7, k + 12, air, 0);
		b(w, i + 4, j + 7, k + 13, air, 0);
		b(w, i + 4, j + 7, k + 14, air, 0);
		b(w, i + 4, j + 7, k + 15, air, 0);
		b(w, i + 4, j + 8, k, air, 0);
		b(w, i + 4, j + 8, k + 1, air, 0);
		b(w, i + 4, j + 8, k + 2, air, 0);
		b(w, i + 4, j + 8, k + 3, air, 0);
		b(w, i + 4, j + 8, k + 4, air, 0);
		b(w, i + 4, j + 8, k + 5, air, 0);
		b(w, i + 4, j + 8, k + 6, air, 0);
		b(w, i + 4, j + 8, k + 7, air, 0);
		b(w, i + 4, j + 8, k + 8, air, 0);
		b(w, i + 4, j + 8, k + 9, air, 0);
		b(w, i + 4, j + 8, k + 10, air, 0);
		b(w, i + 4, j + 8, k + 11, air, 0);
		b(w, i + 4, j + 8, k + 12, air, 0);
		b(w, i + 4, j + 8, k + 13, air, 0);
		b(w, i + 4, j + 8, k + 14, air, 0);
		b(w, i + 4, j + 8, k + 15, air, 0);
		b(w, i + 4, j + 9, k, air, 0);
		b(w, i + 4, j + 9, k + 1, air, 0);
		b(w, i + 4, j + 9, k + 2, air, 0);
		b(w, i + 4, j + 9, k + 3, air, 0);
		generate_4(w, i, j, k);
	}

	public static void generate_4(World w, int i, int j, int k)
	{
		b(w, i + 4, j + 9, k + 4, air, 0);
		b(w, i + 4, j + 9, k + 5, air, 0);
		b(w, i + 4, j + 9, k + 6, air, 0);
		b(w, i + 4, j + 9, k + 7, air, 0);
		b(w, i + 4, j + 9, k + 8, air, 0);
		b(w, i + 4, j + 9, k + 9, air, 0);
		b(w, i + 4, j + 9, k + 10, air, 0);
		b(w, i + 4, j + 9, k + 11, air, 0);
		b(w, i + 4, j + 9, k + 12, air, 0);
		b(w, i + 4, j + 9, k + 13, air, 0);
		b(w, i + 4, j + 9, k + 14, air, 0);
		b(w, i + 4, j + 9, k + 15, air, 0);
		b(w, i + 4, j + 10, k, air, 0);
		b(w, i + 4, j + 10, k + 1, air, 0);
		b(w, i + 4, j + 10, k + 2, air, 0);
		b(w, i + 4, j + 10, k + 3, air, 0);
		b(w, i + 4, j + 10, k + 4, air, 0);
		b(w, i + 4, j + 10, k + 5, air, 0);
		b(w, i + 4, j + 10, k + 6, air, 0);
		b(w, i + 4, j + 10, k + 7, air, 0);
		b(w, i + 4, j + 10, k + 8, air, 0);
		b(w, i + 4, j + 10, k + 9, air, 0);
		b(w, i + 4, j + 10, k + 10, air, 0);
		b(w, i + 4, j + 10, k + 11, air, 0);
		b(w, i + 4, j + 10, k + 12, air, 0);
		b(w, i + 4, j + 10, k + 13, air, 0);
		b(w, i + 4, j + 10, k + 14, air, 0);
		b(w, i + 4, j + 10, k + 15, air, 0);
		b(w, i + 4, j + 11, k, air, 0);
		b(w, i + 4, j + 11, k + 1, air, 0);
		b(w, i + 4, j + 11, k + 2, air, 0);
		b(w, i + 4, j + 11, k + 3, air, 0);
		b(w, i + 4, j + 11, k + 4, air, 0);
		b(w, i + 4, j + 11, k + 5, air, 0);
		b(w, i + 4, j + 11, k + 6, air, 0);
		b(w, i + 4, j + 11, k + 7, air, 0);
		b(w, i + 4, j + 11, k + 8, air, 0);
		b(w, i + 4, j + 11, k + 9, air, 0);
		b(w, i + 4, j + 11, k + 10, air, 0);
		b(w, i + 4, j + 11, k + 11, air, 0);
		b(w, i + 4, j + 11, k + 12, air, 0);
		b(w, i + 4, j + 11, k + 13, air, 0);
		b(w, i + 4, j + 11, k + 14, air, 0);
		b(w, i + 4, j + 11, k + 15, air, 0);
		b(w, i + 4, j + 12, k, air, 0);
		b(w, i + 4, j + 12, k + 1, air, 0);
		b(w, i + 4, j + 12, k + 2, air, 0);
		b(w, i + 4, j + 12, k + 3, air, 0);
		b(w, i + 4, j + 12, k + 4, air, 0);
		b(w, i + 4, j + 12, k + 5, air, 0);
		b(w, i + 4, j + 12, k + 6, air, 0);
		b(w, i + 4, j + 12, k + 7, air, 0);
		b(w, i + 4, j + 12, k + 8, air, 0);
		b(w, i + 4, j + 12, k + 9, air, 0);
		b(w, i + 4, j + 12, k + 10, air, 0);
		b(w, i + 4, j + 12, k + 11, air, 0);
		b(w, i + 4, j + 12, k + 12, air, 0);
		b(w, i + 4, j + 12, k + 13, air, 0);
		b(w, i + 4, j + 12, k + 14, air, 0);
		b(w, i + 4, j + 12, k + 15, air, 0);
		b(w, i + 4, j + 13, k, air, 0);
		b(w, i + 4, j + 13, k + 1, air, 0);
		b(w, i + 4, j + 13, k + 2, air, 0);
		b(w, i + 4, j + 13, k + 3, air, 0);
		b(w, i + 4, j + 13, k + 4, air, 0);
		b(w, i + 4, j + 13, k + 5, air, 0);
		b(w, i + 4, j + 13, k + 6, air, 0);
		b(w, i + 4, j + 13, k + 7, air, 0);
		b(w, i + 4, j + 13, k + 8, air, 0);
		b(w, i + 4, j + 13, k + 9, air, 0);
		b(w, i + 4, j + 13, k + 10, air, 0);
		b(w, i + 4, j + 13, k + 11, air, 0);
		b(w, i + 4, j + 13, k + 12, air, 0);
		b(w, i + 4, j + 13, k + 13, air, 0);
		b(w, i + 4, j + 13, k + 14, air, 0);
		b(w, i + 4, j + 13, k + 15, air, 0);
		b(w, i + 4, j + 14, k, air, 0);
		b(w, i + 4, j + 14, k + 1, air, 0);
		b(w, i + 4, j + 14, k + 2, air, 0);
		b(w, i + 4, j + 14, k + 3, air, 0);
		b(w, i + 4, j + 14, k + 4, air, 0);
		b(w, i + 4, j + 14, k + 5, air, 0);
		b(w, i + 4, j + 14, k + 6, air, 0);
		b(w, i + 4, j + 14, k + 7, air, 0);
		b(w, i + 4, j + 14, k + 8, air, 0);
		b(w, i + 4, j + 14, k + 9, air, 0);
		b(w, i + 4, j + 14, k + 10, air, 0);
		b(w, i + 4, j + 14, k + 11, air, 0);
		b(w, i + 4, j + 14, k + 12, air, 0);
		b(w, i + 4, j + 14, k + 13, air, 0);
		b(w, i + 4, j + 14, k + 14, air, 0);
		b(w, i + 4, j + 14, k + 15, air, 0);
		b(w, i + 4, j + 15, k, air, 0);
		b(w, i + 4, j + 15, k + 1, air, 0);
		b(w, i + 4, j + 15, k + 2, air, 0);
		b(w, i + 4, j + 15, k + 3, air, 0);
		b(w, i + 4, j + 15, k + 4, air, 0);
		b(w, i + 4, j + 15, k + 5, air, 0);
		b(w, i + 4, j + 15, k + 6, air, 0);
		b(w, i + 4, j + 15, k + 7, air, 0);
		b(w, i + 4, j + 15, k + 8, air, 0);
		b(w, i + 4, j + 15, k + 9, air, 0);
		b(w, i + 4, j + 15, k + 10, air, 0);
		b(w, i + 4, j + 15, k + 11, air, 0);
		b(w, i + 4, j + 15, k + 12, air, 0);
		b(w, i + 4, j + 15, k + 13, air, 0);
		b(w, i + 4, j + 15, k + 14, air, 0);
		b(w, i + 4, j + 15, k + 15, air, 0);
		b(w, i + 4, j + 16, k, air, 0);
		b(w, i + 4, j + 16, k + 1, air, 0);
		b(w, i + 4, j + 16, k + 2, air, 0);
		b(w, i + 4, j + 16, k + 3, air, 0);
		b(w, i + 4, j + 16, k + 4, air, 0);
		b(w, i + 4, j + 16, k + 5, air, 0);
		b(w, i + 4, j + 16, k + 6, air, 0);
		b(w, i + 4, j + 16, k + 7, air, 0);
		b(w, i + 4, j + 16, k + 8, air, 0);
		b(w, i + 4, j + 16, k + 9, air, 0);
		b(w, i + 4, j + 16, k + 10, air, 0);
		b(w, i + 4, j + 16, k + 11, air, 0);
		b(w, i + 4, j + 16, k + 12, air, 0);
		b(w, i + 4, j + 16, k + 13, air, 0);
		b(w, i + 4, j + 16, k + 14, air, 0);
		b(w, i + 4, j + 16, k + 15, air, 0);
		b(w, i + 4, j + 17, k, air, 0);
		b(w, i + 4, j + 17, k + 1, air, 0);
		b(w, i + 4, j + 17, k + 2, air, 0);
		b(w, i + 4, j + 17, k + 3, air, 0);
		b(w, i + 4, j + 17, k + 4, air, 0);
		b(w, i + 4, j + 17, k + 5, air, 0);
		b(w, i + 4, j + 17, k + 6, air, 0);
		b(w, i + 4, j + 17, k + 7, air, 0);
		b(w, i + 4, j + 17, k + 8, air, 0);
		b(w, i + 4, j + 17, k + 9, air, 0);
		b(w, i + 4, j + 17, k + 10, air, 0);
		b(w, i + 4, j + 17, k + 11, air, 0);
		b(w, i + 4, j + 17, k + 12, air, 0);
		b(w, i + 4, j + 17, k + 13, air, 0);
		b(w, i + 4, j + 17, k + 14, air, 0);
		b(w, i + 4, j + 17, k + 15, air, 0);
		b(w, i + 4, j + 18, k, air, 0);
		b(w, i + 4, j + 18, k + 1, air, 0);
		b(w, i + 4, j + 18, k + 2, air, 0);
		b(w, i + 4, j + 18, k + 3, air, 0);
		b(w, i + 4, j + 18, k + 4, air, 0);
		b(w, i + 4, j + 18, k + 5, air, 0);
		b(w, i + 4, j + 18, k + 6, air, 0);
		b(w, i + 4, j + 18, k + 7, air, 0);
		b(w, i + 4, j + 18, k + 8, air, 0);
		b(w, i + 4, j + 18, k + 9, air, 0);
		b(w, i + 4, j + 18, k + 10, air, 0);
		b(w, i + 4, j + 18, k + 11, air, 0);
		b(w, i + 4, j + 18, k + 12, air, 0);
		b(w, i + 4, j + 18, k + 13, air, 0);
		b(w, i + 4, j + 18, k + 14, air, 0);
		b(w, i + 4, j + 18, k + 15, air, 0);
		b(w, i + 4, j + 19, k, air, 0);
		b(w, i + 4, j + 19, k + 1, air, 0);
		b(w, i + 4, j + 19, k + 2, air, 0);
		b(w, i + 4, j + 19, k + 3, air, 0);
		b(w, i + 4, j + 19, k + 4, air, 0);
		b(w, i + 4, j + 19, k + 5, air, 0);
		b(w, i + 4, j + 19, k + 6, air, 0);
		b(w, i + 4, j + 19, k + 7, air, 0);
		b(w, i + 4, j + 19, k + 8, air, 0);
		b(w, i + 4, j + 19, k + 9, air, 0);
		b(w, i + 4, j + 19, k + 10, air, 0);
		b(w, i + 4, j + 19, k + 11, air, 0);
		b(w, i + 4, j + 19, k + 12, air, 0);
		b(w, i + 4, j + 19, k + 13, air, 0);
		b(w, i + 4, j + 19, k + 14, air, 0);
		b(w, i + 4, j + 19, k + 15, air, 0);
		b(w, i + 4, j + 20, k, air, 0);
		b(w, i + 4, j + 20, k + 1, air, 0);
		b(w, i + 4, j + 20, k + 2, air, 0);
		b(w, i + 4, j + 20, k + 3, air, 0);
		b(w, i + 4, j + 20, k + 4, air, 0);
		b(w, i + 4, j + 20, k + 5, air, 0);
		b(w, i + 4, j + 20, k + 6, air, 0);
		b(w, i + 4, j + 20, k + 7, air, 0);
		b(w, i + 4, j + 20, k + 8, air, 0);
		b(w, i + 4, j + 20, k + 9, air, 0);
		b(w, i + 4, j + 20, k + 10, air, 0);
		b(w, i + 4, j + 20, k + 11, air, 0);
		b(w, i + 4, j + 20, k + 12, air, 0);
		b(w, i + 4, j + 20, k + 13, air, 0);
		b(w, i + 4, j + 20, k + 14, air, 0);
		b(w, i + 4, j + 20, k + 15, air, 0);
		b(w, i + 4, j + 21, k, air, 0);
		b(w, i + 4, j + 21, k + 1, air, 0);
		b(w, i + 4, j + 21, k + 2, air, 0);
		b(w, i + 4, j + 21, k + 3, air, 0);
		b(w, i + 4, j + 21, k + 4, air, 0);
		b(w, i + 4, j + 21, k + 5, air, 0);
		b(w, i + 4, j + 21, k + 6, air, 0);
		b(w, i + 4, j + 21, k + 7, air, 0);
		b(w, i + 4, j + 21, k + 8, air, 0);
		b(w, i + 4, j + 21, k + 9, air, 0);
		b(w, i + 4, j + 21, k + 10, air, 0);
		b(w, i + 4, j + 21, k + 11, air, 0);
		b(w, i + 4, j + 21, k + 12, air, 0);
		b(w, i + 4, j + 21, k + 13, air, 0);
		b(w, i + 4, j + 21, k + 14, air, 0);
		b(w, i + 4, j + 21, k + 15, air, 0);
		b(w, i + 4, j + 22, k, air, 0);
		b(w, i + 4, j + 22, k + 1, air, 0);
		b(w, i + 4, j + 22, k + 2, air, 0);
		b(w, i + 4, j + 22, k + 3, air, 0);
		b(w, i + 4, j + 22, k + 4, air, 0);
		b(w, i + 4, j + 22, k + 5, air, 0);
		b(w, i + 4, j + 22, k + 6, air, 0);
		b(w, i + 4, j + 22, k + 7, air, 0);
		b(w, i + 4, j + 22, k + 8, air, 0);
		b(w, i + 4, j + 22, k + 9, air, 0);
		b(w, i + 4, j + 22, k + 10, air, 0);
		b(w, i + 4, j + 22, k + 11, air, 0);
		b(w, i + 4, j + 22, k + 12, air, 0);
		b(w, i + 4, j + 22, k + 13, air, 0);
		b(w, i + 4, j + 22, k + 14, air, 0);
		b(w, i + 4, j + 22, k + 15, air, 0);
		b(w, i + 4, j + 23, k, air, 0);
		b(w, i + 4, j + 23, k + 1, air, 0);
		b(w, i + 4, j + 23, k + 2, air, 0);
		b(w, i + 4, j + 23, k + 3, air, 0);
		b(w, i + 4, j + 23, k + 4, air, 0);
		b(w, i + 4, j + 23, k + 5, air, 0);
		b(w, i + 4, j + 23, k + 6, air, 0);
		b(w, i + 4, j + 23, k + 7, air, 0);
		b(w, i + 4, j + 23, k + 8, air, 0);
		b(w, i + 4, j + 23, k + 9, air, 0);
		b(w, i + 4, j + 23, k + 10, air, 0);
		b(w, i + 4, j + 23, k + 11, air, 0);
		b(w, i + 4, j + 23, k + 12, air, 0);
		b(w, i + 4, j + 23, k + 13, air, 0);
		b(w, i + 4, j + 23, k + 14, air, 0);
		b(w, i + 4, j + 23, k + 15, air, 0);
		b(w, i + 4, j + 24, k, air, 0);
		b(w, i + 4, j + 24, k + 1, air, 0);
		b(w, i + 4, j + 24, k + 2, air, 0);
		b(w, i + 4, j + 24, k + 3, air, 0);
		b(w, i + 4, j + 24, k + 4, air, 0);
		b(w, i + 4, j + 24, k + 5, air, 0);
		b(w, i + 4, j + 24, k + 6, air, 0);
		b(w, i + 4, j + 24, k + 7, air, 0);
		b(w, i + 4, j + 24, k + 8, air, 0);
		b(w, i + 4, j + 24, k + 9, air, 0);
		b(w, i + 4, j + 24, k + 10, air, 0);
		b(w, i + 4, j + 24, k + 11, air, 0);
		b(w, i + 4, j + 24, k + 12, air, 0);
		b(w, i + 4, j + 24, k + 13, air, 0);
		b(w, i + 4, j + 24, k + 14, air, 0);
		b(w, i + 4, j + 24, k + 15, air, 0);
		b(w, i + 4, j + 25, k, air, 0);
		b(w, i + 4, j + 25, k + 1, air, 0);
		b(w, i + 4, j + 25, k + 2, air, 0);
		b(w, i + 4, j + 25, k + 3, air, 0);
		b(w, i + 4, j + 25, k + 4, air, 0);
		b(w, i + 4, j + 25, k + 5, air, 0);
		b(w, i + 4, j + 25, k + 6, air, 0);
		b(w, i + 4, j + 25, k + 7, air, 0);
		b(w, i + 4, j + 25, k + 8, air, 0);
		b(w, i + 4, j + 25, k + 9, air, 0);
		b(w, i + 4, j + 25, k + 10, air, 0);
		b(w, i + 4, j + 25, k + 11, air, 0);
		b(w, i + 4, j + 25, k + 12, air, 0);
		b(w, i + 4, j + 25, k + 13, air, 0);
		b(w, i + 4, j + 25, k + 14, air, 0);
		b(w, i + 4, j + 25, k + 15, air, 0);
		b(w, i + 4, j + 26, k, air, 0);
		b(w, i + 4, j + 26, k + 1, air, 0);
		b(w, i + 4, j + 26, k + 2, air, 0);
		b(w, i + 4, j + 26, k + 3, air, 0);
		b(w, i + 4, j + 26, k + 4, air, 0);
		b(w, i + 4, j + 26, k + 5, air, 0);
		b(w, i + 4, j + 26, k + 6, air, 0);
		b(w, i + 4, j + 26, k + 7, air, 0);
		b(w, i + 4, j + 26, k + 8, air, 0);
		b(w, i + 4, j + 26, k + 9, air, 0);
		b(w, i + 4, j + 26, k + 10, air, 0);
		b(w, i + 4, j + 26, k + 11, air, 0);
		b(w, i + 4, j + 26, k + 12, air, 0);
		b(w, i + 4, j + 26, k + 13, air, 0);
		b(w, i + 4, j + 26, k + 14, air, 0);
		b(w, i + 4, j + 26, k + 15, air, 0);
		b(w, i + 4, j + 27, k, air, 0);
		b(w, i + 4, j + 27, k + 1, air, 0);
		b(w, i + 4, j + 27, k + 2, air, 0);
		b(w, i + 4, j + 27, k + 3, air, 0);
		b(w, i + 4, j + 27, k + 4, air, 0);
		b(w, i + 4, j + 27, k + 5, air, 0);
		b(w, i + 4, j + 27, k + 6, air, 0);
		b(w, i + 4, j + 27, k + 7, air, 0);
		b(w, i + 4, j + 27, k + 8, air, 0);
		b(w, i + 4, j + 27, k + 9, air, 0);
		b(w, i + 4, j + 27, k + 10, air, 0);
		b(w, i + 4, j + 27, k + 11, air, 0);
		b(w, i + 4, j + 27, k + 12, air, 0);
		b(w, i + 4, j + 27, k + 13, air, 0);
		b(w, i + 4, j + 27, k + 14, air, 0);
		b(w, i + 4, j + 27, k + 15, air, 0);
		b(w, i + 4, j + 28, k, air, 0);
		b(w, i + 4, j + 28, k + 1, air, 0);
		b(w, i + 4, j + 28, k + 2, air, 0);
		b(w, i + 4, j + 28, k + 3, air, 0);
		b(w, i + 4, j + 28, k + 4, air, 0);
		b(w, i + 4, j + 28, k + 5, air, 0);
		b(w, i + 4, j + 28, k + 6, air, 0);
		b(w, i + 4, j + 28, k + 7, air, 0);
		b(w, i + 4, j + 28, k + 8, air, 0);
		b(w, i + 4, j + 28, k + 9, air, 0);
		b(w, i + 4, j + 28, k + 10, air, 0);
		b(w, i + 4, j + 28, k + 11, air, 0);
		b(w, i + 4, j + 28, k + 12, air, 0);
		b(w, i + 4, j + 28, k + 13, air, 0);
		b(w, i + 4, j + 28, k + 14, air, 0);
		b(w, i + 4, j + 28, k + 15, air, 0);
		b(w, i + 5, j, k, blockTatooineSand, 0);
		b(w, i + 5, j, k + 1, blockTatooineSand, 0);
		b(w, i + 5, j, k + 2, blockTatooineSand, 0);
		b(w, i + 5, j, k + 3, blockTatooineSand, 0);
		b(w, i + 5, j, k + 4, blockTatooineSand, 0);
		b(w, i + 5, j, k + 5, blockTatooineSand, 0);
		b(w, i + 5, j, k + 6, blockTatooineSand, 0);
		b(w, i + 5, j, k + 7, blockTatooineSand, 0);
		b(w, i + 5, j, k + 8, blockTatooineSand, 0);
		b(w, i + 5, j, k + 9, blockTatooineSand, 0);
		b(w, i + 5, j, k + 10, blockTatooineSand, 0);
		b(w, i + 5, j, k + 11, blockTatooineSand, 0);
		b(w, i + 5, j, k + 12, blockTatooineSand, 0);
		b(w, i + 5, j, k + 13, blockTatooineSand, 0);
		b(w, i + 5, j, k + 14, blockTatooineSand, 0);
		b(w, i + 5, j, k + 15, blockTatooineSand, 0);
		b(w, i + 5, j + 1, k, sandstone, 0);
		b(w, i + 5, j + 1, k + 1, sandstone, 0);
		b(w, i + 5, j + 1, k + 2, sandstone, 0);
		b(w, i + 5, j + 1, k + 3, sandstone, 0);
		b(w, i + 5, j + 1, k + 4, sandstone, 0);
		b(w, i + 5, j + 1, k + 5, sandstone, 0);
		b(w, i + 5, j + 1, k + 6, sandstone, 0);
		b(w, i + 5, j + 1, k + 7, sandstone, 0);
		b(w, i + 5, j + 1, k + 8, air, 0);
		b(w, i + 5, j + 1, k + 9, air, 0);
		b(w, i + 5, j + 1, k + 10, air, 0);
		b(w, i + 5, j + 1, k + 11, air, 0);
		b(w, i + 5, j + 1, k + 12, air, 0);
		b(w, i + 5, j + 1, k + 13, air, 0);
		b(w, i + 5, j + 1, k + 14, air, 0);
		b(w, i + 5, j + 1, k + 15, air, 0);
		b(w, i + 5, j + 2, k, sandstone, 0);
		b(w, i + 5, j + 2, k + 1, sandstone, 0);
		b(w, i + 5, j + 2, k + 2, sandstone, 0);
		b(w, i + 5, j + 2, k + 3, sandstone, 0);
		b(w, i + 5, j + 2, k + 4, sandstone, 0);
		b(w, i + 5, j + 2, k + 5, sandstone, 0);
		b(w, i + 5, j + 2, k + 6, sandstone, 0);
		b(w, i + 5, j + 2, k + 7, sandstone, 0);
		b(w, i + 5, j + 2, k + 8, air, 0);
		b(w, i + 5, j + 2, k + 9, air, 0);
		b(w, i + 5, j + 2, k + 10, air, 0);
		b(w, i + 5, j + 2, k + 11, air, 0);
		b(w, i + 5, j + 2, k + 12, air, 0);
		b(w, i + 5, j + 2, k + 13, air, 0);
		b(w, i + 5, j + 2, k + 14, air, 0);
		b(w, i + 5, j + 2, k + 15, air, 0);
		b(w, i + 5, j + 3, k, sandstone, 0);
		m(w, i + 5, j + 3, k, 2);
		b(w, i + 5, j + 3, k + 1, sandstone, 0);
		m(w, i + 5, j + 3, k + 1, 2);
		b(w, i + 5, j + 3, k + 2, sandstone, 0);
		m(w, i + 5, j + 3, k + 2, 2);
		b(w, i + 5, j + 3, k + 3, sandstone, 0);
		m(w, i + 5, j + 3, k + 3, 2);
		b(w, i + 5, j + 3, k + 4, sandstone, 0);
		b(w, i + 5, j + 3, k + 5, sandstone, 0);
		b(w, i + 5, j + 3, k + 6, sandstone, 0);
		b(w, i + 5, j + 3, k + 7, sandstone, 0);
		b(w, i + 5, j + 3, k + 8, air, 0);
		b(w, i + 5, j + 3, k + 9, air, 0);
		b(w, i + 5, j + 3, k + 10, air, 0);
		b(w, i + 5, j + 3, k + 11, air, 0);
		b(w, i + 5, j + 3, k + 12, air, 0);
		b(w, i + 5, j + 3, k + 13, air, 0);
		b(w, i + 5, j + 3, k + 14, air, 0);
		b(w, i + 5, j + 3, k + 15, air, 0);
		b(w, i + 5, j + 4, k, glass_pane, 0);
		b(w, i + 5, j + 4, k + 1, glass_pane, 0);
		b(w, i + 5, j + 4, k + 2, glass_pane, 0);
		b(w, i + 5, j + 4, k + 3, sandstone, 0);
		m(w, i + 5, j + 4, k + 3, 2);
		b(w, i + 5, j + 4, k + 4, sandstone, 0);
		b(w, i + 5, j + 4, k + 5, sandstone, 0);
		b(w, i + 5, j + 4, k + 6, sandstone, 0);
		b(w, i + 5, j + 4, k + 7, sandstone, 0);
		b(w, i + 5, j + 4, k + 8, air, 0);
		b(w, i + 5, j + 4, k + 9, air, 0);
		b(w, i + 5, j + 4, k + 10, air, 0);
		b(w, i + 5, j + 4, k + 11, air, 0);
		b(w, i + 5, j + 4, k + 12, air, 0);
		b(w, i + 5, j + 4, k + 13, air, 0);
		b(w, i + 5, j + 4, k + 14, air, 0);
		b(w, i + 5, j + 4, k + 15, air, 0);
		b(w, i + 5, j + 5, k, glass_pane, 0);
		b(w, i + 5, j + 5, k + 1, glass_pane, 0);
		b(w, i + 5, j + 5, k + 2, glass_pane, 0);
		b(w, i + 5, j + 5, k + 3, sandstone, 0);
		m(w, i + 5, j + 5, k + 3, 2);
		b(w, i + 5, j + 5, k + 4, sandstone, 0);
		b(w, i + 5, j + 5, k + 5, sandstone, 0);
		b(w, i + 5, j + 5, k + 6, sandstone, 0);
		b(w, i + 5, j + 5, k + 7, sandstone, 0);
		b(w, i + 5, j + 5, k + 8, air, 0);
		b(w, i + 5, j + 5, k + 9, air, 0);
		b(w, i + 5, j + 5, k + 10, air, 0);
		b(w, i + 5, j + 5, k + 11, air, 0);
		b(w, i + 5, j + 5, k + 12, air, 0);
		b(w, i + 5, j + 5, k + 13, air, 0);
		b(w, i + 5, j + 5, k + 14, air, 0);
		b(w, i + 5, j + 5, k + 15, air, 0);
		b(w, i + 5, j + 6, k, glass_pane, 0);
		b(w, i + 5, j + 6, k + 1, glass_pane, 0);
		b(w, i + 5, j + 6, k + 2, glass_pane, 0);
		b(w, i + 5, j + 6, k + 3, sandstone, 0);
		m(w, i + 5, j + 6, k + 3, 2);
		b(w, i + 5, j + 6, k + 4, sandstone, 0);
		b(w, i + 5, j + 6, k + 5, sandstone, 0);
		b(w, i + 5, j + 6, k + 6, sandstone, 0);
		b(w, i + 5, j + 6, k + 7, sandstone, 0);
		b(w, i + 5, j + 6, k + 8, air, 0);
		b(w, i + 5, j + 6, k + 9, air, 0);
		b(w, i + 5, j + 6, k + 10, air, 0);
		b(w, i + 5, j + 6, k + 11, air, 0);
		b(w, i + 5, j + 6, k + 12, air, 0);
		b(w, i + 5, j + 6, k + 13, air, 0);
		b(w, i + 5, j + 6, k + 14, air, 0);
		b(w, i + 5, j + 6, k + 15, air, 0);
		b(w, i + 5, j + 7, k, sandstone, 0);
		m(w, i + 5, j + 7, k, 2);
		b(w, i + 5, j + 7, k + 1, sandstone, 0);
		m(w, i + 5, j + 7, k + 1, 2);
		b(w, i + 5, j + 7, k + 2, sandstone, 0);
		m(w, i + 5, j + 7, k + 2, 2);
		b(w, i + 5, j + 7, k + 3, sandstone, 0);
		m(w, i + 5, j + 7, k + 3, 2);
		b(w, i + 5, j + 7, k + 4, sandstone, 0);
		b(w, i + 5, j + 7, k + 5, sandstone, 0);
		b(w, i + 5, j + 7, k + 6, sandstone, 0);
		b(w, i + 5, j + 7, k + 7, sandstone, 0);
		b(w, i + 5, j + 7, k + 8, air, 0);
		b(w, i + 5, j + 7, k + 9, air, 0);
		b(w, i + 5, j + 7, k + 10, air, 0);
		b(w, i + 5, j + 7, k + 11, air, 0);
		b(w, i + 5, j + 7, k + 12, air, 0);
		b(w, i + 5, j + 7, k + 13, air, 0);
		b(w, i + 5, j + 7, k + 14, air, 0);
		b(w, i + 5, j + 7, k + 15, air, 0);
		b(w, i + 5, j + 8, k, sandstone, 0);
		b(w, i + 5, j + 8, k + 1, sandstone, 0);
		b(w, i + 5, j + 8, k + 2, sandstone, 0);
		b(w, i + 5, j + 8, k + 3, sandstone, 0);
		b(w, i + 5, j + 8, k + 4, sandstone, 0);
		b(w, i + 5, j + 8, k + 5, sandstone, 0);
		b(w, i + 5, j + 8, k + 6, sandstone, 0);
		b(w, i + 5, j + 8, k + 7, sandstone, 0);
		b(w, i + 5, j + 8, k + 8, air, 0);
		b(w, i + 5, j + 8, k + 9, air, 0);
		b(w, i + 5, j + 8, k + 10, air, 0);
		b(w, i + 5, j + 8, k + 11, air, 0);
		b(w, i + 5, j + 8, k + 12, air, 0);
		b(w, i + 5, j + 8, k + 13, air, 0);
		b(w, i + 5, j + 8, k + 14, air, 0);
		b(w, i + 5, j + 8, k + 15, air, 0);
		b(w, i + 5, j + 9, k, air, 0);
		b(w, i + 5, j + 9, k + 1, air, 0);
		b(w, i + 5, j + 9, k + 2, air, 0);
		b(w, i + 5, j + 9, k + 3, air, 0);
		b(w, i + 5, j + 9, k + 4, air, 0);
		b(w, i + 5, j + 9, k + 5, air, 0);
		b(w, i + 5, j + 9, k + 6, air, 0);
		b(w, i + 5, j + 9, k + 7, air, 0);
		b(w, i + 5, j + 9, k + 8, air, 0);
		b(w, i + 5, j + 9, k + 9, air, 0);
		b(w, i + 5, j + 9, k + 10, air, 0);
		b(w, i + 5, j + 9, k + 11, air, 0);
		b(w, i + 5, j + 9, k + 12, air, 0);
		b(w, i + 5, j + 9, k + 13, air, 0);
		b(w, i + 5, j + 9, k + 14, air, 0);
		b(w, i + 5, j + 9, k + 15, air, 0);
		b(w, i + 5, j + 10, k, air, 0);
		b(w, i + 5, j + 10, k + 1, air, 0);
		b(w, i + 5, j + 10, k + 2, air, 0);
		b(w, i + 5, j + 10, k + 3, air, 0);
		b(w, i + 5, j + 10, k + 4, air, 0);
		b(w, i + 5, j + 10, k + 5, air, 0);
		b(w, i + 5, j + 10, k + 6, air, 0);
		b(w, i + 5, j + 10, k + 7, air, 0);
		b(w, i + 5, j + 10, k + 8, air, 0);
		b(w, i + 5, j + 10, k + 9, air, 0);
		b(w, i + 5, j + 10, k + 10, air, 0);
		b(w, i + 5, j + 10, k + 11, air, 0);
		b(w, i + 5, j + 10, k + 12, air, 0);
		b(w, i + 5, j + 10, k + 13, air, 0);
		b(w, i + 5, j + 10, k + 14, air, 0);
		b(w, i + 5, j + 10, k + 15, air, 0);
		b(w, i + 5, j + 11, k, air, 0);
		b(w, i + 5, j + 11, k + 1, air, 0);
		b(w, i + 5, j + 11, k + 2, air, 0);
		b(w, i + 5, j + 11, k + 3, air, 0);
		b(w, i + 5, j + 11, k + 4, air, 0);
		b(w, i + 5, j + 11, k + 5, air, 0);
		b(w, i + 5, j + 11, k + 6, air, 0);
		b(w, i + 5, j + 11, k + 7, air, 0);
		b(w, i + 5, j + 11, k + 8, air, 0);
		generate_5(w, i, j, k);
	}

	public static void generate_5(World w, int i, int j, int k)
	{
		b(w, i + 5, j + 11, k + 9, air, 0);
		b(w, i + 5, j + 11, k + 10, air, 0);
		b(w, i + 5, j + 11, k + 11, air, 0);
		b(w, i + 5, j + 11, k + 12, air, 0);
		b(w, i + 5, j + 11, k + 13, air, 0);
		b(w, i + 5, j + 11, k + 14, air, 0);
		b(w, i + 5, j + 11, k + 15, air, 0);
		b(w, i + 5, j + 12, k, air, 0);
		b(w, i + 5, j + 12, k + 1, air, 0);
		b(w, i + 5, j + 12, k + 2, air, 0);
		b(w, i + 5, j + 12, k + 3, air, 0);
		b(w, i + 5, j + 12, k + 4, air, 0);
		b(w, i + 5, j + 12, k + 5, air, 0);
		b(w, i + 5, j + 12, k + 6, air, 0);
		b(w, i + 5, j + 12, k + 7, air, 0);
		b(w, i + 5, j + 12, k + 8, air, 0);
		b(w, i + 5, j + 12, k + 9, air, 0);
		b(w, i + 5, j + 12, k + 10, air, 0);
		b(w, i + 5, j + 12, k + 11, air, 0);
		b(w, i + 5, j + 12, k + 12, air, 0);
		b(w, i + 5, j + 12, k + 13, air, 0);
		b(w, i + 5, j + 12, k + 14, air, 0);
		b(w, i + 5, j + 12, k + 15, air, 0);
		b(w, i + 5, j + 13, k, air, 0);
		b(w, i + 5, j + 13, k + 1, air, 0);
		b(w, i + 5, j + 13, k + 2, air, 0);
		b(w, i + 5, j + 13, k + 3, air, 0);
		b(w, i + 5, j + 13, k + 4, air, 0);
		b(w, i + 5, j + 13, k + 5, air, 0);
		b(w, i + 5, j + 13, k + 6, air, 0);
		b(w, i + 5, j + 13, k + 7, air, 0);
		b(w, i + 5, j + 13, k + 8, air, 0);
		b(w, i + 5, j + 13, k + 9, air, 0);
		b(w, i + 5, j + 13, k + 10, air, 0);
		b(w, i + 5, j + 13, k + 11, air, 0);
		b(w, i + 5, j + 13, k + 12, air, 0);
		b(w, i + 5, j + 13, k + 13, air, 0);
		b(w, i + 5, j + 13, k + 14, air, 0);
		b(w, i + 5, j + 13, k + 15, air, 0);
		b(w, i + 5, j + 14, k, air, 0);
		b(w, i + 5, j + 14, k + 1, air, 0);
		b(w, i + 5, j + 14, k + 2, air, 0);
		b(w, i + 5, j + 14, k + 3, air, 0);
		b(w, i + 5, j + 14, k + 4, air, 0);
		b(w, i + 5, j + 14, k + 5, air, 0);
		b(w, i + 5, j + 14, k + 6, air, 0);
		b(w, i + 5, j + 14, k + 7, air, 0);
		b(w, i + 5, j + 14, k + 8, air, 0);
		b(w, i + 5, j + 14, k + 9, air, 0);
		b(w, i + 5, j + 14, k + 10, air, 0);
		b(w, i + 5, j + 14, k + 11, air, 0);
		b(w, i + 5, j + 14, k + 12, air, 0);
		b(w, i + 5, j + 14, k + 13, air, 0);
		b(w, i + 5, j + 14, k + 14, air, 0);
		b(w, i + 5, j + 14, k + 15, air, 0);
		b(w, i + 5, j + 15, k, air, 0);
		b(w, i + 5, j + 15, k + 1, air, 0);
		b(w, i + 5, j + 15, k + 2, air, 0);
		b(w, i + 5, j + 15, k + 3, air, 0);
		b(w, i + 5, j + 15, k + 4, air, 0);
		b(w, i + 5, j + 15, k + 5, air, 0);
		b(w, i + 5, j + 15, k + 6, air, 0);
		b(w, i + 5, j + 15, k + 7, air, 0);
		b(w, i + 5, j + 15, k + 8, air, 0);
		b(w, i + 5, j + 15, k + 9, air, 0);
		b(w, i + 5, j + 15, k + 10, air, 0);
		b(w, i + 5, j + 15, k + 11, air, 0);
		b(w, i + 5, j + 15, k + 12, air, 0);
		b(w, i + 5, j + 15, k + 13, air, 0);
		b(w, i + 5, j + 15, k + 14, air, 0);
		b(w, i + 5, j + 15, k + 15, air, 0);
		b(w, i + 5, j + 16, k, air, 0);
		b(w, i + 5, j + 16, k + 1, air, 0);
		b(w, i + 5, j + 16, k + 2, air, 0);
		b(w, i + 5, j + 16, k + 3, air, 0);
		b(w, i + 5, j + 16, k + 4, air, 0);
		b(w, i + 5, j + 16, k + 5, air, 0);
		b(w, i + 5, j + 16, k + 6, air, 0);
		b(w, i + 5, j + 16, k + 7, air, 0);
		b(w, i + 5, j + 16, k + 8, air, 0);
		b(w, i + 5, j + 16, k + 9, air, 0);
		b(w, i + 5, j + 16, k + 10, air, 0);
		b(w, i + 5, j + 16, k + 11, air, 0);
		b(w, i + 5, j + 16, k + 12, air, 0);
		b(w, i + 5, j + 16, k + 13, air, 0);
		b(w, i + 5, j + 16, k + 14, air, 0);
		b(w, i + 5, j + 16, k + 15, air, 0);
		b(w, i + 5, j + 17, k, air, 0);
		b(w, i + 5, j + 17, k + 1, air, 0);
		b(w, i + 5, j + 17, k + 2, air, 0);
		b(w, i + 5, j + 17, k + 3, air, 0);
		b(w, i + 5, j + 17, k + 4, air, 0);
		b(w, i + 5, j + 17, k + 5, air, 0);
		b(w, i + 5, j + 17, k + 6, air, 0);
		b(w, i + 5, j + 17, k + 7, air, 0);
		b(w, i + 5, j + 17, k + 8, air, 0);
		b(w, i + 5, j + 17, k + 9, air, 0);
		b(w, i + 5, j + 17, k + 10, air, 0);
		b(w, i + 5, j + 17, k + 11, air, 0);
		b(w, i + 5, j + 17, k + 12, air, 0);
		b(w, i + 5, j + 17, k + 13, air, 0);
		b(w, i + 5, j + 17, k + 14, air, 0);
		b(w, i + 5, j + 17, k + 15, air, 0);
		b(w, i + 5, j + 18, k, air, 0);
		b(w, i + 5, j + 18, k + 1, air, 0);
		b(w, i + 5, j + 18, k + 2, air, 0);
		b(w, i + 5, j + 18, k + 3, air, 0);
		b(w, i + 5, j + 18, k + 4, air, 0);
		b(w, i + 5, j + 18, k + 5, air, 0);
		b(w, i + 5, j + 18, k + 6, air, 0);
		b(w, i + 5, j + 18, k + 7, air, 0);
		b(w, i + 5, j + 18, k + 8, air, 0);
		b(w, i + 5, j + 18, k + 9, air, 0);
		b(w, i + 5, j + 18, k + 10, air, 0);
		b(w, i + 5, j + 18, k + 11, air, 0);
		b(w, i + 5, j + 18, k + 12, air, 0);
		b(w, i + 5, j + 18, k + 13, air, 0);
		b(w, i + 5, j + 18, k + 14, air, 0);
		b(w, i + 5, j + 18, k + 15, air, 0);
		b(w, i + 5, j + 19, k, air, 0);
		b(w, i + 5, j + 19, k + 1, air, 0);
		b(w, i + 5, j + 19, k + 2, air, 0);
		b(w, i + 5, j + 19, k + 3, air, 0);
		b(w, i + 5, j + 19, k + 4, air, 0);
		b(w, i + 5, j + 19, k + 5, air, 0);
		b(w, i + 5, j + 19, k + 6, air, 0);
		b(w, i + 5, j + 19, k + 7, air, 0);
		b(w, i + 5, j + 19, k + 8, air, 0);
		b(w, i + 5, j + 19, k + 9, air, 0);
		b(w, i + 5, j + 19, k + 10, air, 0);
		b(w, i + 5, j + 19, k + 11, air, 0);
		b(w, i + 5, j + 19, k + 12, air, 0);
		b(w, i + 5, j + 19, k + 13, air, 0);
		b(w, i + 5, j + 19, k + 14, air, 0);
		b(w, i + 5, j + 19, k + 15, air, 0);
		b(w, i + 5, j + 20, k, air, 0);
		b(w, i + 5, j + 20, k + 1, air, 0);
		b(w, i + 5, j + 20, k + 2, air, 0);
		b(w, i + 5, j + 20, k + 3, air, 0);
		b(w, i + 5, j + 20, k + 4, air, 0);
		b(w, i + 5, j + 20, k + 5, air, 0);
		b(w, i + 5, j + 20, k + 6, air, 0);
		b(w, i + 5, j + 20, k + 7, air, 0);
		b(w, i + 5, j + 20, k + 8, air, 0);
		b(w, i + 5, j + 20, k + 9, air, 0);
		b(w, i + 5, j + 20, k + 10, air, 0);
		b(w, i + 5, j + 20, k + 11, air, 0);
		b(w, i + 5, j + 20, k + 12, air, 0);
		b(w, i + 5, j + 20, k + 13, air, 0);
		b(w, i + 5, j + 20, k + 14, air, 0);
		b(w, i + 5, j + 20, k + 15, air, 0);
		b(w, i + 5, j + 21, k, air, 0);
		b(w, i + 5, j + 21, k + 1, air, 0);
		b(w, i + 5, j + 21, k + 2, air, 0);
		b(w, i + 5, j + 21, k + 3, air, 0);
		b(w, i + 5, j + 21, k + 4, air, 0);
		b(w, i + 5, j + 21, k + 5, air, 0);
		b(w, i + 5, j + 21, k + 6, air, 0);
		b(w, i + 5, j + 21, k + 7, air, 0);
		b(w, i + 5, j + 21, k + 8, air, 0);
		b(w, i + 5, j + 21, k + 9, air, 0);
		b(w, i + 5, j + 21, k + 10, air, 0);
		b(w, i + 5, j + 21, k + 11, air, 0);
		b(w, i + 5, j + 21, k + 12, air, 0);
		b(w, i + 5, j + 21, k + 13, air, 0);
		b(w, i + 5, j + 21, k + 14, air, 0);
		b(w, i + 5, j + 21, k + 15, air, 0);
		b(w, i + 5, j + 22, k, air, 0);
		b(w, i + 5, j + 22, k + 1, air, 0);
		b(w, i + 5, j + 22, k + 2, air, 0);
		b(w, i + 5, j + 22, k + 3, air, 0);
		b(w, i + 5, j + 22, k + 4, air, 0);
		b(w, i + 5, j + 22, k + 5, air, 0);
		b(w, i + 5, j + 22, k + 6, air, 0);
		b(w, i + 5, j + 22, k + 7, air, 0);
		b(w, i + 5, j + 22, k + 8, air, 0);
		b(w, i + 5, j + 22, k + 9, air, 0);
		b(w, i + 5, j + 22, k + 10, air, 0);
		b(w, i + 5, j + 22, k + 11, air, 0);
		b(w, i + 5, j + 22, k + 12, air, 0);
		b(w, i + 5, j + 22, k + 13, air, 0);
		b(w, i + 5, j + 22, k + 14, air, 0);
		b(w, i + 5, j + 22, k + 15, air, 0);
		b(w, i + 5, j + 23, k, air, 0);
		b(w, i + 5, j + 23, k + 1, air, 0);
		b(w, i + 5, j + 23, k + 2, air, 0);
		b(w, i + 5, j + 23, k + 3, air, 0);
		b(w, i + 5, j + 23, k + 4, air, 0);
		b(w, i + 5, j + 23, k + 5, air, 0);
		b(w, i + 5, j + 23, k + 6, air, 0);
		b(w, i + 5, j + 23, k + 7, air, 0);
		b(w, i + 5, j + 23, k + 8, air, 0);
		b(w, i + 5, j + 23, k + 9, air, 0);
		b(w, i + 5, j + 23, k + 10, air, 0);
		b(w, i + 5, j + 23, k + 11, air, 0);
		b(w, i + 5, j + 23, k + 12, air, 0);
		b(w, i + 5, j + 23, k + 13, air, 0);
		b(w, i + 5, j + 23, k + 14, air, 0);
		b(w, i + 5, j + 23, k + 15, air, 0);
		b(w, i + 5, j + 24, k, air, 0);
		b(w, i + 5, j + 24, k + 1, air, 0);
		b(w, i + 5, j + 24, k + 2, air, 0);
		b(w, i + 5, j + 24, k + 3, air, 0);
		b(w, i + 5, j + 24, k + 4, air, 0);
		b(w, i + 5, j + 24, k + 5, air, 0);
		b(w, i + 5, j + 24, k + 6, air, 0);
		b(w, i + 5, j + 24, k + 7, air, 0);
		b(w, i + 5, j + 24, k + 8, air, 0);
		b(w, i + 5, j + 24, k + 9, air, 0);
		b(w, i + 5, j + 24, k + 10, air, 0);
		b(w, i + 5, j + 24, k + 11, air, 0);
		b(w, i + 5, j + 24, k + 12, air, 0);
		b(w, i + 5, j + 24, k + 13, air, 0);
		b(w, i + 5, j + 24, k + 14, air, 0);
		b(w, i + 5, j + 24, k + 15, air, 0);
		b(w, i + 5, j + 25, k, air, 0);
		b(w, i + 5, j + 25, k + 1, air, 0);
		b(w, i + 5, j + 25, k + 2, air, 0);
		b(w, i + 5, j + 25, k + 3, air, 0);
		b(w, i + 5, j + 25, k + 4, air, 0);
		b(w, i + 5, j + 25, k + 5, air, 0);
		b(w, i + 5, j + 25, k + 6, air, 0);
		b(w, i + 5, j + 25, k + 7, air, 0);
		b(w, i + 5, j + 25, k + 8, air, 0);
		b(w, i + 5, j + 25, k + 9, air, 0);
		b(w, i + 5, j + 25, k + 10, air, 0);
		b(w, i + 5, j + 25, k + 11, air, 0);
		b(w, i + 5, j + 25, k + 12, air, 0);
		b(w, i + 5, j + 25, k + 13, air, 0);
		b(w, i + 5, j + 25, k + 14, air, 0);
		b(w, i + 5, j + 25, k + 15, air, 0);
		b(w, i + 5, j + 26, k, air, 0);
		b(w, i + 5, j + 26, k + 1, air, 0);
		b(w, i + 5, j + 26, k + 2, air, 0);
		b(w, i + 5, j + 26, k + 3, air, 0);
		b(w, i + 5, j + 26, k + 4, air, 0);
		b(w, i + 5, j + 26, k + 5, air, 0);
		b(w, i + 5, j + 26, k + 6, air, 0);
		b(w, i + 5, j + 26, k + 7, air, 0);
		b(w, i + 5, j + 26, k + 8, air, 0);
		b(w, i + 5, j + 26, k + 9, air, 0);
		b(w, i + 5, j + 26, k + 10, air, 0);
		b(w, i + 5, j + 26, k + 11, air, 0);
		b(w, i + 5, j + 26, k + 12, air, 0);
		b(w, i + 5, j + 26, k + 13, air, 0);
		b(w, i + 5, j + 26, k + 14, air, 0);
		b(w, i + 5, j + 26, k + 15, air, 0);
		b(w, i + 5, j + 27, k, air, 0);
		b(w, i + 5, j + 27, k + 1, air, 0);
		b(w, i + 5, j + 27, k + 2, air, 0);
		b(w, i + 5, j + 27, k + 3, air, 0);
		b(w, i + 5, j + 27, k + 4, air, 0);
		b(w, i + 5, j + 27, k + 5, air, 0);
		b(w, i + 5, j + 27, k + 6, air, 0);
		b(w, i + 5, j + 27, k + 7, air, 0);
		b(w, i + 5, j + 27, k + 8, air, 0);
		b(w, i + 5, j + 27, k + 9, air, 0);
		b(w, i + 5, j + 27, k + 10, air, 0);
		b(w, i + 5, j + 27, k + 11, air, 0);
		b(w, i + 5, j + 27, k + 12, air, 0);
		b(w, i + 5, j + 27, k + 13, air, 0);
		b(w, i + 5, j + 27, k + 14, air, 0);
		b(w, i + 5, j + 27, k + 15, air, 0);
		b(w, i + 5, j + 28, k, air, 0);
		b(w, i + 5, j + 28, k + 1, air, 0);
		b(w, i + 5, j + 28, k + 2, air, 0);
		b(w, i + 5, j + 28, k + 3, air, 0);
		b(w, i + 5, j + 28, k + 4, air, 0);
		b(w, i + 5, j + 28, k + 5, air, 0);
		b(w, i + 5, j + 28, k + 6, air, 0);
		b(w, i + 5, j + 28, k + 7, air, 0);
		b(w, i + 5, j + 28, k + 8, air, 0);
		b(w, i + 5, j + 28, k + 9, air, 0);
		b(w, i + 5, j + 28, k + 10, air, 0);
		b(w, i + 5, j + 28, k + 11, air, 0);
		b(w, i + 5, j + 28, k + 12, air, 0);
		b(w, i + 5, j + 28, k + 13, air, 0);
		b(w, i + 5, j + 28, k + 14, air, 0);
		b(w, i + 5, j + 28, k + 15, air, 0);
		b(w, i + 6, j, k, blockTatooineSand, 0);
		b(w, i + 6, j, k + 1, blockTatooineSand, 0);
		b(w, i + 6, j, k + 2, blockTatooineSand, 0);
		b(w, i + 6, j, k + 3, blockTatooineSand, 0);
		b(w, i + 6, j, k + 4, blockTatooineSand, 0);
		b(w, i + 6, j, k + 5, blockTatooineSand, 0);
		b(w, i + 6, j, k + 6, blockTatooineSand, 0);
		b(w, i + 6, j, k + 7, blockTatooineSand, 0);
		b(w, i + 6, j, k + 8, blockTatooineSand, 0);
		b(w, i + 6, j, k + 9, blockTatooineSand, 0);
		b(w, i + 6, j, k + 10, blockTatooineSand, 0);
		b(w, i + 6, j, k + 11, blockTatooineSand, 0);
		b(w, i + 6, j, k + 12, blockTatooineSand, 0);
		b(w, i + 6, j, k + 13, blockTatooineSand, 0);
		b(w, i + 6, j, k + 14, blockTatooineSand, 0);
		b(w, i + 6, j, k + 15, blockTatooineSand, 0);
		b(w, i + 6, j + 1, k, sandstone, 0);
		b(w, i + 6, j + 1, k + 1, sandstone, 0);
		b(w, i + 6, j + 1, k + 2, sandstone, 0);
		b(w, i + 6, j + 1, k + 3, sandstone, 0);
		b(w, i + 6, j + 1, k + 4, sandstone, 0);
		b(w, i + 6, j + 1, k + 5, sandstone, 0);
		b(w, i + 6, j + 1, k + 6, sandstone, 0);
		b(w, i + 6, j + 1, k + 7, sandstone, 0);
		b(w, i + 6, j + 1, k + 8, sandstone, 0);
		b(w, i + 6, j + 1, k + 9, sandstone, 0);
		b(w, i + 6, j + 1, k + 10, sandstone, 0);
		m(w, i + 6, j + 1, k + 10, 2);
		b(w, i + 6, j + 1, k + 11, sandstone, 0);
		m(w, i + 6, j + 1, k + 11, 2);
		b(w, i + 6, j + 1, k + 12, sandstone, 0);
		m(w, i + 6, j + 1, k + 12, 2);
		b(w, i + 6, j + 1, k + 13, sandstone, 0);
		m(w, i + 6, j + 1, k + 13, 2);
		b(w, i + 6, j + 1, k + 14, air, 0);
		b(w, i + 6, j + 1, k + 15, air, 0);
		b(w, i + 6, j + 2, k, air, 0);
		b(w, i + 6, j + 2, k + 1, air, 0);
		b(w, i + 6, j + 2, k + 2, air, 0);
		b(w, i + 6, j + 2, k + 3, air, 0);
		b(w, i + 6, j + 2, k + 4, sandstone, 0);
		b(w, i + 6, j + 2, k + 5, sandstone, 0);
		b(w, i + 6, j + 2, k + 6, sandstone, 0);
		b(w, i + 6, j + 2, k + 7, sandstone, 0);
		b(w, i + 6, j + 2, k + 8, sandstone, 0);
		b(w, i + 6, j + 2, k + 9, sandstone, 0);
		b(w, i + 6, j + 2, k + 10, sandstone, 0);
		m(w, i + 6, j + 2, k + 10, 2);
		b(w, i + 6, j + 2, k + 11, glass_pane, 0);
		b(w, i + 6, j + 2, k + 12, glass_pane, 0);
		b(w, i + 6, j + 2, k + 13, sandstone, 0);
		m(w, i + 6, j + 2, k + 13, 2);
		b(w, i + 6, j + 2, k + 14, air, 0);
		b(w, i + 6, j + 2, k + 15, air, 0);
		b(w, i + 6, j + 3, k, air, 0);
		b(w, i + 6, j + 3, k + 1, air, 0);
		b(w, i + 6, j + 3, k + 2, air, 0);
		b(w, i + 6, j + 3, k + 3, air, 0);
		b(w, i + 6, j + 3, k + 4, sandstone, 0);
		b(w, i + 6, j + 3, k + 5, sandstone, 0);
		b(w, i + 6, j + 3, k + 6, sandstone, 0);
		b(w, i + 6, j + 3, k + 7, sandstone, 0);
		b(w, i + 6, j + 3, k + 8, sandstone, 0);
		b(w, i + 6, j + 3, k + 9, sandstone, 0);
		b(w, i + 6, j + 3, k + 10, sandstone, 0);
		m(w, i + 6, j + 3, k + 10, 2);
		b(w, i + 6, j + 3, k + 11, glass_pane, 0);
		b(w, i + 6, j + 3, k + 12, glass_pane, 0);
		b(w, i + 6, j + 3, k + 13, sandstone, 0);
		m(w, i + 6, j + 3, k + 13, 2);
		b(w, i + 6, j + 3, k + 14, air, 0);
		b(w, i + 6, j + 3, k + 15, air, 0);
		b(w, i + 6, j + 4, k, air, 0);
		b(w, i + 6, j + 4, k + 1, air, 0);
		b(w, i + 6, j + 4, k + 2, air, 0);
		b(w, i + 6, j + 4, k + 3, air, 0);
		b(w, i + 6, j + 4, k + 4, sandstone, 0);
		b(w, i + 6, j + 4, k + 5, sandstone, 0);
		b(w, i + 6, j + 4, k + 6, sandstone, 0);
		b(w, i + 6, j + 4, k + 7, sandstone, 0);
		b(w, i + 6, j + 4, k + 8, sandstone, 0);
		b(w, i + 6, j + 4, k + 9, sandstone, 0);
		b(w, i + 6, j + 4, k + 10, sandstone, 0);
		m(w, i + 6, j + 4, k + 10, 2);
		b(w, i + 6, j + 4, k + 11, glass_pane, 0);
		b(w, i + 6, j + 4, k + 12, glass_pane, 0);
		b(w, i + 6, j + 4, k + 13, sandstone, 0);
		m(w, i + 6, j + 4, k + 13, 2);
		b(w, i + 6, j + 4, k + 14, air, 0);
		b(w, i + 6, j + 4, k + 15, air, 0);
		b(w, i + 6, j + 5, k, air, 0);
		b(w, i + 6, j + 5, k + 1, air, 0);
		b(w, i + 6, j + 5, k + 2, air, 0);
		b(w, i + 6, j + 5, k + 3, air, 0);
		b(w, i + 6, j + 5, k + 4, sandstone, 0);
		b(w, i + 6, j + 5, k + 5, sandstone, 0);
		b(w, i + 6, j + 5, k + 6, sandstone, 0);
		b(w, i + 6, j + 5, k + 7, sandstone, 0);
		b(w, i + 6, j + 5, k + 8, sandstone, 0);
		b(w, i + 6, j + 5, k + 9, sandstone, 0);
		b(w, i + 6, j + 5, k + 10, sandstone, 0);
		m(w, i + 6, j + 5, k + 10, 2);
		b(w, i + 6, j + 5, k + 11, sandstone, 0);
		m(w, i + 6, j + 5, k + 11, 2);
		b(w, i + 6, j + 5, k + 12, sandstone, 0);
		m(w, i + 6, j + 5, k + 12, 2);
		b(w, i + 6, j + 5, k + 13, sandstone, 0);
		m(w, i + 6, j + 5, k + 13, 2);
		b(w, i + 6, j + 5, k + 14, air, 0);
		b(w, i + 6, j + 5, k + 15, air, 0);
		b(w, i + 6, j + 6, k, air, 0);
		b(w, i + 6, j + 6, k + 1, air, 0);
		b(w, i + 6, j + 6, k + 2, air, 0);
		b(w, i + 6, j + 6, k + 3, air, 0);
		b(w, i + 6, j + 6, k + 4, sandstone, 0);
		b(w, i + 6, j + 6, k + 5, sandstone, 0);
		b(w, i + 6, j + 6, k + 6, sandstone, 0);
		b(w, i + 6, j + 6, k + 7, sandstone, 0);
		b(w, i + 6, j + 6, k + 8, sandstone, 0);
		b(w, i + 6, j + 6, k + 9, sandstone, 0);
		b(w, i + 6, j + 6, k + 10, sandstone, 0);
		b(w, i + 6, j + 6, k + 11, sandstone, 0);
		b(w, i + 6, j + 6, k + 12, sandstone, 0);
		b(w, i + 6, j + 6, k + 13, sandstone, 0);
		b(w, i + 6, j + 6, k + 14, air, 0);
		b(w, i + 6, j + 6, k + 15, air, 0);
		b(w, i + 6, j + 7, k, air, 0);
		b(w, i + 6, j + 7, k + 1, air, 0);
		b(w, i + 6, j + 7, k + 2, air, 0);
		b(w, i + 6, j + 7, k + 3, air, 0);
		b(w, i + 6, j + 7, k + 4, sandstone, 0);
		b(w, i + 6, j + 7, k + 5, sandstone, 0);
		b(w, i + 6, j + 7, k + 6, sandstone, 0);
		b(w, i + 6, j + 7, k + 7, sandstone, 0);
		b(w, i + 6, j + 7, k + 8, sandstone, 0);
		b(w, i + 6, j + 7, k + 9, sandstone_stairs, 0);
		m(w, i + 6, j + 7, k + 9, 3);
		b(w, i + 6, j + 7, k + 10, air, 0);
		b(w, i + 6, j + 7, k + 11, air, 0);
		b(w, i + 6, j + 7, k + 12, air, 0);
		b(w, i + 6, j + 7, k + 13, air, 0);
		b(w, i + 6, j + 7, k + 14, air, 0);
		b(w, i + 6, j + 7, k + 15, air, 0);
		b(w, i + 6, j + 8, k, sandstone, 0);
		b(w, i + 6, j + 8, k + 1, sandstone, 0);
		b(w, i + 6, j + 8, k + 2, sandstone, 0);
		b(w, i + 6, j + 8, k + 3, sandstone, 0);
		b(w, i + 6, j + 8, k + 4, sandstone, 0);
		b(w, i + 6, j + 8, k + 5, sandstone, 0);
		b(w, i + 6, j + 8, k + 6, sandstone, 0);
		b(w, i + 6, j + 8, k + 7, sandstone, 0);
		b(w, i + 6, j + 8, k + 8, sandstone, 0);
		b(w, i + 6, j + 8, k + 9, air, 0);
		b(w, i + 6, j + 8, k + 10, air, 0);
		b(w, i + 6, j + 8, k + 11, air, 0);
		b(w, i + 6, j + 8, k + 12, air, 0);
		b(w, i + 6, j + 8, k + 13, air, 0);
		b(w, i + 6, j + 8, k + 14, air, 0);
		b(w, i + 6, j + 8, k + 15, air, 0);
		b(w, i + 6, j + 9, k, stone_slab, 0);
		m(w, i + 6, j + 9, k, 1);
		b(w, i + 6, j + 9, k + 1, stone_slab, 0);
		m(w, i + 6, j + 9, k + 1, 1);
		b(w, i + 6, j + 9, k + 2, stone_slab, 0);
		m(w, i + 6, j + 9, k + 2, 1);
		b(w, i + 6, j + 9, k + 3, stone_slab, 0);
		m(w, i + 6, j + 9, k + 3, 1);
		b(w, i + 6, j + 9, k + 4, air, 0);
		b(w, i + 6, j + 9, k + 5, air, 0);
		b(w, i + 6, j + 9, k + 6, air, 0);
		b(w, i + 6, j + 9, k + 7, air, 0);
		b(w, i + 6, j + 9, k + 8, air, 0);
		b(w, i + 6, j + 9, k + 9, air, 0);
		b(w, i + 6, j + 9, k + 10, air, 0);
		b(w, i + 6, j + 9, k + 11, air, 0);
		b(w, i + 6, j + 9, k + 12, air, 0);
		b(w, i + 6, j + 9, k + 13, air, 0);
		b(w, i + 6, j + 9, k + 14, air, 0);
		b(w, i + 6, j + 9, k + 15, air, 0);
		b(w, i + 6, j + 10, k, air, 0);
		b(w, i + 6, j + 10, k + 1, air, 0);
		b(w, i + 6, j + 10, k + 2, air, 0);
		b(w, i + 6, j + 10, k + 3, air, 0);
		b(w, i + 6, j + 10, k + 4, air, 0);
		b(w, i + 6, j + 10, k + 5, air, 0);
		b(w, i + 6, j + 10, k + 6, air, 0);
		b(w, i + 6, j + 10, k + 7, air, 0);
		b(w, i + 6, j + 10, k + 8, air, 0);
		b(w, i + 6, j + 10, k + 9, air, 0);
		b(w, i + 6, j + 10, k + 10, air, 0);
		b(w, i + 6, j + 10, k + 11, air, 0);
		b(w, i + 6, j + 10, k + 12, air, 0);
		b(w, i + 6, j + 10, k + 13, air, 0);
		b(w, i + 6, j + 10, k + 14, air, 0);
		b(w, i + 6, j + 10, k + 15, air, 0);
		b(w, i + 6, j + 11, k, air, 0);
		b(w, i + 6, j + 11, k + 1, air, 0);
		b(w, i + 6, j + 11, k + 2, air, 0);
		b(w, i + 6, j + 11, k + 3, air, 0);
		b(w, i + 6, j + 11, k + 4, air, 0);
		b(w, i + 6, j + 11, k + 5, air, 0);
		b(w, i + 6, j + 11, k + 6, air, 0);
		b(w, i + 6, j + 11, k + 7, air, 0);
		b(w, i + 6, j + 11, k + 8, air, 0);
		b(w, i + 6, j + 11, k + 9, air, 0);
		b(w, i + 6, j + 11, k + 10, air, 0);
		b(w, i + 6, j + 11, k + 11, air, 0);
		b(w, i + 6, j + 11, k + 12, air, 0);
		b(w, i + 6, j + 11, k + 13, air, 0);
		b(w, i + 6, j + 11, k + 14, air, 0);
		b(w, i + 6, j + 11, k + 15, air, 0);
		b(w, i + 6, j + 12, k, air, 0);
		b(w, i + 6, j + 12, k + 1, air, 0);
		b(w, i + 6, j + 12, k + 2, air, 0);
		b(w, i + 6, j + 12, k + 3, air, 0);
		b(w, i + 6, j + 12, k + 4, air, 0);
		b(w, i + 6, j + 12, k + 5, air, 0);
		b(w, i + 6, j + 12, k + 6, air, 0);
		b(w, i + 6, j + 12, k + 7, air, 0);
		b(w, i + 6, j + 12, k + 8, air, 0);
		b(w, i + 6, j + 12, k + 9, air, 0);
		b(w, i + 6, j + 12, k + 10, air, 0);
		b(w, i + 6, j + 12, k + 11, air, 0);
		b(w, i + 6, j + 12, k + 12, air, 0);
		b(w, i + 6, j + 12, k + 13, air, 0);
		b(w, i + 6, j + 12, k + 14, air, 0);
		b(w, i + 6, j + 12, k + 15, air, 0);
		b(w, i + 6, j + 13, k, air, 0);
		b(w, i + 6, j + 13, k + 1, air, 0);
		b(w, i + 6, j + 13, k + 2, air, 0);
		b(w, i + 6, j + 13, k + 3, air, 0);
		b(w, i + 6, j + 13, k + 4, air, 0);
		b(w, i + 6, j + 13, k + 5, air, 0);
		b(w, i + 6, j + 13, k + 6, air, 0);
		b(w, i + 6, j + 13, k + 7, air, 0);
		b(w, i + 6, j + 13, k + 8, air, 0);
		b(w, i + 6, j + 13, k + 9, air, 0);
		b(w, i + 6, j + 13, k + 10, air, 0);
		b(w, i + 6, j + 13, k + 11, air, 0);
		b(w, i + 6, j + 13, k + 12, air, 0);
		b(w, i + 6, j + 13, k + 13, air, 0);
		generate_6(w, i, j, k);
	}

	public static void generate_6(World w, int i, int j, int k)
	{
		b(w, i + 6, j + 13, k + 14, air, 0);
		b(w, i + 6, j + 13, k + 15, air, 0);
		b(w, i + 6, j + 14, k, air, 0);
		b(w, i + 6, j + 14, k + 1, air, 0);
		b(w, i + 6, j + 14, k + 2, air, 0);
		b(w, i + 6, j + 14, k + 3, air, 0);
		b(w, i + 6, j + 14, k + 4, air, 0);
		b(w, i + 6, j + 14, k + 5, air, 0);
		b(w, i + 6, j + 14, k + 6, air, 0);
		b(w, i + 6, j + 14, k + 7, air, 0);
		b(w, i + 6, j + 14, k + 8, air, 0);
		b(w, i + 6, j + 14, k + 9, air, 0);
		b(w, i + 6, j + 14, k + 10, air, 0);
		b(w, i + 6, j + 14, k + 11, air, 0);
		b(w, i + 6, j + 14, k + 12, air, 0);
		b(w, i + 6, j + 14, k + 13, air, 0);
		b(w, i + 6, j + 14, k + 14, air, 0);
		b(w, i + 6, j + 14, k + 15, air, 0);
		b(w, i + 6, j + 15, k, air, 0);
		b(w, i + 6, j + 15, k + 1, air, 0);
		b(w, i + 6, j + 15, k + 2, air, 0);
		b(w, i + 6, j + 15, k + 3, air, 0);
		b(w, i + 6, j + 15, k + 4, air, 0);
		b(w, i + 6, j + 15, k + 5, air, 0);
		b(w, i + 6, j + 15, k + 6, air, 0);
		b(w, i + 6, j + 15, k + 7, air, 0);
		b(w, i + 6, j + 15, k + 8, air, 0);
		b(w, i + 6, j + 15, k + 9, air, 0);
		b(w, i + 6, j + 15, k + 10, air, 0);
		b(w, i + 6, j + 15, k + 11, air, 0);
		b(w, i + 6, j + 15, k + 12, air, 0);
		b(w, i + 6, j + 15, k + 13, air, 0);
		b(w, i + 6, j + 15, k + 14, air, 0);
		b(w, i + 6, j + 15, k + 15, air, 0);
		b(w, i + 6, j + 16, k, air, 0);
		b(w, i + 6, j + 16, k + 1, air, 0);
		b(w, i + 6, j + 16, k + 2, air, 0);
		b(w, i + 6, j + 16, k + 3, air, 0);
		b(w, i + 6, j + 16, k + 4, air, 0);
		b(w, i + 6, j + 16, k + 5, air, 0);
		b(w, i + 6, j + 16, k + 6, air, 0);
		b(w, i + 6, j + 16, k + 7, air, 0);
		b(w, i + 6, j + 16, k + 8, air, 0);
		b(w, i + 6, j + 16, k + 9, air, 0);
		b(w, i + 6, j + 16, k + 10, air, 0);
		b(w, i + 6, j + 16, k + 11, air, 0);
		b(w, i + 6, j + 16, k + 12, air, 0);
		b(w, i + 6, j + 16, k + 13, air, 0);
		b(w, i + 6, j + 16, k + 14, air, 0);
		b(w, i + 6, j + 16, k + 15, air, 0);
		b(w, i + 6, j + 17, k, air, 0);
		b(w, i + 6, j + 17, k + 1, air, 0);
		b(w, i + 6, j + 17, k + 2, air, 0);
		b(w, i + 6, j + 17, k + 3, air, 0);
		b(w, i + 6, j + 17, k + 4, air, 0);
		b(w, i + 6, j + 17, k + 5, air, 0);
		b(w, i + 6, j + 17, k + 6, air, 0);
		b(w, i + 6, j + 17, k + 7, air, 0);
		b(w, i + 6, j + 17, k + 8, air, 0);
		b(w, i + 6, j + 17, k + 9, air, 0);
		b(w, i + 6, j + 17, k + 10, air, 0);
		b(w, i + 6, j + 17, k + 11, air, 0);
		b(w, i + 6, j + 17, k + 12, air, 0);
		b(w, i + 6, j + 17, k + 13, air, 0);
		b(w, i + 6, j + 17, k + 14, air, 0);
		b(w, i + 6, j + 17, k + 15, air, 0);
		b(w, i + 6, j + 18, k, air, 0);
		b(w, i + 6, j + 18, k + 1, air, 0);
		b(w, i + 6, j + 18, k + 2, air, 0);
		b(w, i + 6, j + 18, k + 3, air, 0);
		b(w, i + 6, j + 18, k + 4, air, 0);
		b(w, i + 6, j + 18, k + 5, air, 0);
		b(w, i + 6, j + 18, k + 6, air, 0);
		b(w, i + 6, j + 18, k + 7, air, 0);
		b(w, i + 6, j + 18, k + 8, air, 0);
		b(w, i + 6, j + 18, k + 9, air, 0);
		b(w, i + 6, j + 18, k + 10, air, 0);
		b(w, i + 6, j + 18, k + 11, air, 0);
		b(w, i + 6, j + 18, k + 12, air, 0);
		b(w, i + 6, j + 18, k + 13, air, 0);
		b(w, i + 6, j + 18, k + 14, air, 0);
		b(w, i + 6, j + 18, k + 15, air, 0);
		b(w, i + 6, j + 19, k, air, 0);
		b(w, i + 6, j + 19, k + 1, air, 0);
		b(w, i + 6, j + 19, k + 2, air, 0);
		b(w, i + 6, j + 19, k + 3, air, 0);
		b(w, i + 6, j + 19, k + 4, air, 0);
		b(w, i + 6, j + 19, k + 5, air, 0);
		b(w, i + 6, j + 19, k + 6, air, 0);
		b(w, i + 6, j + 19, k + 7, air, 0);
		b(w, i + 6, j + 19, k + 8, air, 0);
		b(w, i + 6, j + 19, k + 9, air, 0);
		b(w, i + 6, j + 19, k + 10, air, 0);
		b(w, i + 6, j + 19, k + 11, air, 0);
		b(w, i + 6, j + 19, k + 12, air, 0);
		b(w, i + 6, j + 19, k + 13, air, 0);
		b(w, i + 6, j + 19, k + 14, air, 0);
		b(w, i + 6, j + 19, k + 15, air, 0);
		b(w, i + 6, j + 20, k, air, 0);
		b(w, i + 6, j + 20, k + 1, air, 0);
		b(w, i + 6, j + 20, k + 2, air, 0);
		b(w, i + 6, j + 20, k + 3, air, 0);
		b(w, i + 6, j + 20, k + 4, air, 0);
		b(w, i + 6, j + 20, k + 5, air, 0);
		b(w, i + 6, j + 20, k + 6, air, 0);
		b(w, i + 6, j + 20, k + 7, air, 0);
		b(w, i + 6, j + 20, k + 8, air, 0);
		b(w, i + 6, j + 20, k + 9, air, 0);
		b(w, i + 6, j + 20, k + 10, air, 0);
		b(w, i + 6, j + 20, k + 11, air, 0);
		b(w, i + 6, j + 20, k + 12, air, 0);
		b(w, i + 6, j + 20, k + 13, air, 0);
		b(w, i + 6, j + 20, k + 14, air, 0);
		b(w, i + 6, j + 20, k + 15, air, 0);
		b(w, i + 6, j + 21, k, air, 0);
		b(w, i + 6, j + 21, k + 1, air, 0);
		b(w, i + 6, j + 21, k + 2, air, 0);
		b(w, i + 6, j + 21, k + 3, air, 0);
		b(w, i + 6, j + 21, k + 4, air, 0);
		b(w, i + 6, j + 21, k + 5, air, 0);
		b(w, i + 6, j + 21, k + 6, air, 0);
		b(w, i + 6, j + 21, k + 7, air, 0);
		b(w, i + 6, j + 21, k + 8, air, 0);
		b(w, i + 6, j + 21, k + 9, air, 0);
		b(w, i + 6, j + 21, k + 10, air, 0);
		b(w, i + 6, j + 21, k + 11, air, 0);
		b(w, i + 6, j + 21, k + 12, air, 0);
		b(w, i + 6, j + 21, k + 13, air, 0);
		b(w, i + 6, j + 21, k + 14, air, 0);
		b(w, i + 6, j + 21, k + 15, air, 0);
		b(w, i + 6, j + 22, k, air, 0);
		b(w, i + 6, j + 22, k + 1, air, 0);
		b(w, i + 6, j + 22, k + 2, air, 0);
		b(w, i + 6, j + 22, k + 3, air, 0);
		b(w, i + 6, j + 22, k + 4, air, 0);
		b(w, i + 6, j + 22, k + 5, air, 0);
		b(w, i + 6, j + 22, k + 6, air, 0);
		b(w, i + 6, j + 22, k + 7, air, 0);
		b(w, i + 6, j + 22, k + 8, air, 0);
		b(w, i + 6, j + 22, k + 9, air, 0);
		b(w, i + 6, j + 22, k + 10, air, 0);
		b(w, i + 6, j + 22, k + 11, air, 0);
		b(w, i + 6, j + 22, k + 12, air, 0);
		b(w, i + 6, j + 22, k + 13, air, 0);
		b(w, i + 6, j + 22, k + 14, air, 0);
		b(w, i + 6, j + 22, k + 15, air, 0);
		b(w, i + 6, j + 23, k, air, 0);
		b(w, i + 6, j + 23, k + 1, air, 0);
		b(w, i + 6, j + 23, k + 2, air, 0);
		b(w, i + 6, j + 23, k + 3, air, 0);
		b(w, i + 6, j + 23, k + 4, air, 0);
		b(w, i + 6, j + 23, k + 5, air, 0);
		b(w, i + 6, j + 23, k + 6, air, 0);
		b(w, i + 6, j + 23, k + 7, air, 0);
		b(w, i + 6, j + 23, k + 8, air, 0);
		b(w, i + 6, j + 23, k + 9, air, 0);
		b(w, i + 6, j + 23, k + 10, air, 0);
		b(w, i + 6, j + 23, k + 11, air, 0);
		b(w, i + 6, j + 23, k + 12, air, 0);
		b(w, i + 6, j + 23, k + 13, air, 0);
		b(w, i + 6, j + 23, k + 14, air, 0);
		b(w, i + 6, j + 23, k + 15, air, 0);
		b(w, i + 6, j + 24, k, air, 0);
		b(w, i + 6, j + 24, k + 1, air, 0);
		b(w, i + 6, j + 24, k + 2, air, 0);
		b(w, i + 6, j + 24, k + 3, air, 0);
		b(w, i + 6, j + 24, k + 4, air, 0);
		b(w, i + 6, j + 24, k + 5, air, 0);
		b(w, i + 6, j + 24, k + 6, air, 0);
		b(w, i + 6, j + 24, k + 7, air, 0);
		b(w, i + 6, j + 24, k + 8, air, 0);
		b(w, i + 6, j + 24, k + 9, air, 0);
		b(w, i + 6, j + 24, k + 10, air, 0);
		b(w, i + 6, j + 24, k + 11, air, 0);
		b(w, i + 6, j + 24, k + 12, air, 0);
		b(w, i + 6, j + 24, k + 13, air, 0);
		b(w, i + 6, j + 24, k + 14, air, 0);
		b(w, i + 6, j + 24, k + 15, air, 0);
		b(w, i + 6, j + 25, k, air, 0);
		b(w, i + 6, j + 25, k + 1, air, 0);
		b(w, i + 6, j + 25, k + 2, air, 0);
		b(w, i + 6, j + 25, k + 3, air, 0);
		b(w, i + 6, j + 25, k + 4, air, 0);
		b(w, i + 6, j + 25, k + 5, air, 0);
		b(w, i + 6, j + 25, k + 6, air, 0);
		b(w, i + 6, j + 25, k + 7, air, 0);
		b(w, i + 6, j + 25, k + 8, air, 0);
		b(w, i + 6, j + 25, k + 9, air, 0);
		b(w, i + 6, j + 25, k + 10, air, 0);
		b(w, i + 6, j + 25, k + 11, air, 0);
		b(w, i + 6, j + 25, k + 12, air, 0);
		b(w, i + 6, j + 25, k + 13, air, 0);
		b(w, i + 6, j + 25, k + 14, air, 0);
		b(w, i + 6, j + 25, k + 15, air, 0);
		b(w, i + 6, j + 26, k, air, 0);
		b(w, i + 6, j + 26, k + 1, air, 0);
		b(w, i + 6, j + 26, k + 2, air, 0);
		b(w, i + 6, j + 26, k + 3, air, 0);
		b(w, i + 6, j + 26, k + 4, air, 0);
		b(w, i + 6, j + 26, k + 5, air, 0);
		b(w, i + 6, j + 26, k + 6, air, 0);
		b(w, i + 6, j + 26, k + 7, air, 0);
		b(w, i + 6, j + 26, k + 8, air, 0);
		b(w, i + 6, j + 26, k + 9, air, 0);
		b(w, i + 6, j + 26, k + 10, air, 0);
		b(w, i + 6, j + 26, k + 11, air, 0);
		b(w, i + 6, j + 26, k + 12, air, 0);
		b(w, i + 6, j + 26, k + 13, air, 0);
		b(w, i + 6, j + 26, k + 14, air, 0);
		b(w, i + 6, j + 26, k + 15, air, 0);
		b(w, i + 6, j + 27, k, air, 0);
		b(w, i + 6, j + 27, k + 1, air, 0);
		b(w, i + 6, j + 27, k + 2, air, 0);
		b(w, i + 6, j + 27, k + 3, air, 0);
		b(w, i + 6, j + 27, k + 4, air, 0);
		b(w, i + 6, j + 27, k + 5, air, 0);
		b(w, i + 6, j + 27, k + 6, air, 0);
		b(w, i + 6, j + 27, k + 7, air, 0);
		b(w, i + 6, j + 27, k + 8, air, 0);
		b(w, i + 6, j + 27, k + 9, air, 0);
		b(w, i + 6, j + 27, k + 10, air, 0);
		b(w, i + 6, j + 27, k + 11, air, 0);
		b(w, i + 6, j + 27, k + 12, air, 0);
		b(w, i + 6, j + 27, k + 13, air, 0);
		b(w, i + 6, j + 27, k + 14, air, 0);
		b(w, i + 6, j + 27, k + 15, air, 0);
		b(w, i + 6, j + 28, k, air, 0);
		b(w, i + 6, j + 28, k + 1, air, 0);
		b(w, i + 6, j + 28, k + 2, air, 0);
		b(w, i + 6, j + 28, k + 3, air, 0);
		b(w, i + 6, j + 28, k + 4, air, 0);
		b(w, i + 6, j + 28, k + 5, air, 0);
		b(w, i + 6, j + 28, k + 6, air, 0);
		b(w, i + 6, j + 28, k + 7, air, 0);
		b(w, i + 6, j + 28, k + 8, air, 0);
		b(w, i + 6, j + 28, k + 9, air, 0);
		b(w, i + 6, j + 28, k + 10, air, 0);
		b(w, i + 6, j + 28, k + 11, air, 0);
		b(w, i + 6, j + 28, k + 12, air, 0);
		b(w, i + 6, j + 28, k + 13, air, 0);
		b(w, i + 6, j + 28, k + 14, air, 0);
		b(w, i + 6, j + 28, k + 15, air, 0);
		b(w, i + 7, j, k, blockTatooineSand, 0);
		b(w, i + 7, j, k + 1, blockTatooineSand, 0);
		b(w, i + 7, j, k + 2, blockTatooineSand, 0);
		b(w, i + 7, j, k + 3, blockTatooineSand, 0);
		b(w, i + 7, j, k + 4, blockTatooineSand, 0);
		b(w, i + 7, j, k + 5, blockTatooineSand, 0);
		b(w, i + 7, j, k + 6, blockTatooineSand, 0);
		b(w, i + 7, j, k + 7, blockTatooineSand, 0);
		b(w, i + 7, j, k + 8, blockTatooineSand, 0);
		b(w, i + 7, j, k + 9, blockTatooineSand, 0);
		b(w, i + 7, j, k + 10, blockTatooineSand, 0);
		b(w, i + 7, j, k + 11, blockTatooineSand, 0);
		b(w, i + 7, j, k + 12, blockTatooineSand, 0);
		b(w, i + 7, j, k + 13, blockTatooineSand, 0);
		b(w, i + 7, j, k + 14, blockTatooineSand, 0);
		b(w, i + 7, j, k + 15, blockTatooineSand, 0);
		b(w, i + 7, j + 1, k, sandstone, 0);
		b(w, i + 7, j + 1, k + 1, sandstone, 0);
		b(w, i + 7, j + 1, k + 2, sandstone, 0);
		b(w, i + 7, j + 1, k + 3, sandstone, 0);
		b(w, i + 7, j + 1, k + 4, sandstone, 0);
		b(w, i + 7, j + 1, k + 5, sandstone, 0);
		b(w, i + 7, j + 1, k + 6, sandstone, 0);
		b(w, i + 7, j + 1, k + 7, sandstone, 0);
		b(w, i + 7, j + 1, k + 8, sandstone, 0);
		b(w, i + 7, j + 1, k + 9, sandstone, 0);
		b(w, i + 7, j + 1, k + 10, air, 0);
		b(w, i + 7, j + 1, k + 11, air, 0);
		b(w, i + 7, j + 1, k + 12, air, 0);
		b(w, i + 7, j + 1, k + 13, air, 0);
		b(w, i + 7, j + 1, k + 14, sandstone, 0);
		b(w, i + 7, j + 1, k + 15, air, 0);
		b(w, i + 7, j + 2, k, air, 0);
		b(w, i + 7, j + 2, k + 1, air, 0);
		b(w, i + 7, j + 2, k + 2, air, 0);
		b(w, i + 7, j + 2, k + 3, air, 0);
		b(w, i + 7, j + 2, k + 4, air, 0);
		b(w, i + 7, j + 2, k + 5, sandstone, 0);
		b(w, i + 7, j + 2, k + 6, sandstone, 0);
		b(w, i + 7, j + 2, k + 7, sandstone, 0);
		b(w, i + 7, j + 2, k + 8, sandstone, 0);
		b(w, i + 7, j + 2, k + 9, sandstone, 0);
		b(w, i + 7, j + 2, k + 10, air, 0);
		b(w, i + 7, j + 2, k + 11, air, 0);
		b(w, i + 7, j + 2, k + 12, air, 0);
		b(w, i + 7, j + 2, k + 13, air, 0);
		b(w, i + 7, j + 2, k + 14, sandstone, 0);
		b(w, i + 7, j + 2, k + 15, air, 0);
		b(w, i + 7, j + 3, k, air, 0);
		b(w, i + 7, j + 3, k + 1, air, 0);
		b(w, i + 7, j + 3, k + 2, air, 0);
		b(w, i + 7, j + 3, k + 3, air, 0);
		b(w, i + 7, j + 3, k + 4, air, 0);
		b(w, i + 7, j + 3, k + 5, sandstone, 0);
		b(w, i + 7, j + 3, k + 6, sandstone, 0);
		b(w, i + 7, j + 3, k + 7, sandstone, 0);
		b(w, i + 7, j + 3, k + 8, sandstone, 0);
		b(w, i + 7, j + 3, k + 9, sandstone, 0);
		b(w, i + 7, j + 3, k + 10, air, 0);
		b(w, i + 7, j + 3, k + 11, air, 0);
		b(w, i + 7, j + 3, k + 12, air, 0);
		b(w, i + 7, j + 3, k + 13, air, 0);
		b(w, i + 7, j + 3, k + 14, sandstone, 0);
		b(w, i + 7, j + 3, k + 15, air, 0);
		b(w, i + 7, j + 4, k, air, 0);
		b(w, i + 7, j + 4, k + 1, air, 0);
		b(w, i + 7, j + 4, k + 2, air, 0);
		b(w, i + 7, j + 4, k + 3, air, 0);
		b(w, i + 7, j + 4, k + 4, air, 0);
		b(w, i + 7, j + 4, k + 5, sandstone, 0);
		b(w, i + 7, j + 4, k + 6, sandstone, 0);
		b(w, i + 7, j + 4, k + 7, sandstone, 0);
		b(w, i + 7, j + 4, k + 8, sandstone, 0);
		b(w, i + 7, j + 4, k + 9, sandstone, 0);
		b(w, i + 7, j + 4, k + 10, air, 0);
		b(w, i + 7, j + 4, k + 11, air, 0);
		b(w, i + 7, j + 4, k + 12, air, 0);
		b(w, i + 7, j + 4, k + 13, air, 0);
		b(w, i + 7, j + 4, k + 14, sandstone, 0);
		b(w, i + 7, j + 4, k + 15, air, 0);
		b(w, i + 7, j + 5, k, air, 0);
		b(w, i + 7, j + 5, k + 1, air, 0);
		b(w, i + 7, j + 5, k + 2, air, 0);
		b(w, i + 7, j + 5, k + 3, air, 0);
		b(w, i + 7, j + 5, k + 4, air, 0);
		b(w, i + 7, j + 5, k + 5, sandstone, 0);
		b(w, i + 7, j + 5, k + 6, sandstone, 0);
		b(w, i + 7, j + 5, k + 7, sandstone, 0);
		b(w, i + 7, j + 5, k + 8, sandstone, 0);
		b(w, i + 7, j + 5, k + 9, sandstone, 0);
		b(w, i + 7, j + 5, k + 10, air, 0);
		b(w, i + 7, j + 5, k + 11, air, 0);
		b(w, i + 7, j + 5, k + 12, air, 0);
		b(w, i + 7, j + 5, k + 13, air, 0);
		b(w, i + 7, j + 5, k + 14, sandstone, 0);
		b(w, i + 7, j + 5, k + 15, air, 0);
		b(w, i + 7, j + 6, k, air, 0);
		b(w, i + 7, j + 6, k + 1, air, 0);
		b(w, i + 7, j + 6, k + 2, air, 0);
		b(w, i + 7, j + 6, k + 3, air, 0);
		b(w, i + 7, j + 6, k + 4, air, 0);
		b(w, i + 7, j + 6, k + 5, sandstone, 0);
		b(w, i + 7, j + 6, k + 6, sandstone, 0);
		b(w, i + 7, j + 6, k + 7, sandstone, 0);
		b(w, i + 7, j + 6, k + 8, sandstone, 0);
		b(w, i + 7, j + 6, k + 9, sandstone, 0);
		b(w, i + 7, j + 6, k + 10, sandstone, 0);
		b(w, i + 7, j + 6, k + 11, sandstone, 0);
		b(w, i + 7, j + 6, k + 12, sandstone, 0);
		b(w, i + 7, j + 6, k + 13, sandstone, 0);
		b(w, i + 7, j + 6, k + 14, sandstone, 0);
		b(w, i + 7, j + 6, k + 15, air, 0);
		b(w, i + 7, j + 7, k, air, 0);
		b(w, i + 7, j + 7, k + 1, air, 0);
		b(w, i + 7, j + 7, k + 2, air, 0);
		b(w, i + 7, j + 7, k + 3, air, 0);
		b(w, i + 7, j + 7, k + 4, air, 0);
		b(w, i + 7, j + 7, k + 5, sandstone, 0);
		b(w, i + 7, j + 7, k + 6, sandstone, 0);
		b(w, i + 7, j + 7, k + 7, sandstone, 0);
		b(w, i + 7, j + 7, k + 8, sandstone, 0);
		b(w, i + 7, j + 7, k + 9, sandstone_stairs, 0);
		m(w, i + 7, j + 7, k + 9, 3);
		b(w, i + 7, j + 7, k + 10, air, 0);
		b(w, i + 7, j + 7, k + 11, air, 0);
		b(w, i + 7, j + 7, k + 12, air, 0);
		b(w, i + 7, j + 7, k + 13, air, 0);
		b(w, i + 7, j + 7, k + 14, air, 0);
		b(w, i + 7, j + 7, k + 15, air, 0);
		b(w, i + 7, j + 8, k, air, 0);
		b(w, i + 7, j + 8, k + 1, air, 0);
		b(w, i + 7, j + 8, k + 2, air, 0);
		b(w, i + 7, j + 8, k + 3, sandstone, 0);
		b(w, i + 7, j + 8, k + 4, sandstone, 0);
		b(w, i + 7, j + 8, k + 5, sandstone, 0);
		b(w, i + 7, j + 8, k + 6, sandstone, 0);
		b(w, i + 7, j + 8, k + 7, sandstone, 0);
		b(w, i + 7, j + 8, k + 8, sandstone, 0);
		b(w, i + 7, j + 8, k + 9, air, 0);
		b(w, i + 7, j + 8, k + 10, air, 0);
		b(w, i + 7, j + 8, k + 11, air, 0);
		b(w, i + 7, j + 8, k + 12, air, 0);
		b(w, i + 7, j + 8, k + 13, air, 0);
		b(w, i + 7, j + 8, k + 14, air, 0);
		b(w, i + 7, j + 8, k + 15, air, 0);
		b(w, i + 7, j + 9, k, air, 0);
		b(w, i + 7, j + 9, k + 1, air, 0);
		b(w, i + 7, j + 9, k + 2, air, 0);
		b(w, i + 7, j + 9, k + 3, stone_slab, 0);
		m(w, i + 7, j + 9, k + 3, 1);
		b(w, i + 7, j + 9, k + 4, stone_slab, 0);
		m(w, i + 7, j + 9, k + 4, 1);
		b(w, i + 7, j + 9, k + 5, air, 0);
		b(w, i + 7, j + 9, k + 6, air, 0);
		b(w, i + 7, j + 9, k + 7, air, 0);
		b(w, i + 7, j + 9, k + 8, air, 0);
		b(w, i + 7, j + 9, k + 9, air, 0);
		b(w, i + 7, j + 9, k + 10, air, 0);
		b(w, i + 7, j + 9, k + 11, air, 0);
		b(w, i + 7, j + 9, k + 12, air, 0);
		b(w, i + 7, j + 9, k + 13, air, 0);
		b(w, i + 7, j + 9, k + 14, air, 0);
		b(w, i + 7, j + 9, k + 15, air, 0);
		b(w, i + 7, j + 10, k, air, 0);
		b(w, i + 7, j + 10, k + 1, air, 0);
		b(w, i + 7, j + 10, k + 2, air, 0);
		b(w, i + 7, j + 10, k + 3, air, 0);
		b(w, i + 7, j + 10, k + 4, air, 0);
		b(w, i + 7, j + 10, k + 5, air, 0);
		b(w, i + 7, j + 10, k + 6, air, 0);
		b(w, i + 7, j + 10, k + 7, air, 0);
		b(w, i + 7, j + 10, k + 8, air, 0);
		b(w, i + 7, j + 10, k + 9, air, 0);
		b(w, i + 7, j + 10, k + 10, air, 0);
		b(w, i + 7, j + 10, k + 11, air, 0);
		b(w, i + 7, j + 10, k + 12, air, 0);
		b(w, i + 7, j + 10, k + 13, air, 0);
		b(w, i + 7, j + 10, k + 14, air, 0);
		b(w, i + 7, j + 10, k + 15, air, 0);
		b(w, i + 7, j + 11, k, air, 0);
		b(w, i + 7, j + 11, k + 1, air, 0);
		b(w, i + 7, j + 11, k + 2, air, 0);
		b(w, i + 7, j + 11, k + 3, air, 0);
		b(w, i + 7, j + 11, k + 4, air, 0);
		b(w, i + 7, j + 11, k + 5, air, 0);
		b(w, i + 7, j + 11, k + 6, air, 0);
		b(w, i + 7, j + 11, k + 7, air, 0);
		b(w, i + 7, j + 11, k + 8, air, 0);
		b(w, i + 7, j + 11, k + 9, air, 0);
		b(w, i + 7, j + 11, k + 10, air, 0);
		b(w, i + 7, j + 11, k + 11, air, 0);
		b(w, i + 7, j + 11, k + 12, air, 0);
		b(w, i + 7, j + 11, k + 13, air, 0);
		b(w, i + 7, j + 11, k + 14, air, 0);
		b(w, i + 7, j + 11, k + 15, air, 0);
		b(w, i + 7, j + 12, k, air, 0);
		b(w, i + 7, j + 12, k + 1, air, 0);
		b(w, i + 7, j + 12, k + 2, air, 0);
		b(w, i + 7, j + 12, k + 3, air, 0);
		b(w, i + 7, j + 12, k + 4, air, 0);
		b(w, i + 7, j + 12, k + 5, air, 0);
		b(w, i + 7, j + 12, k + 6, air, 0);
		b(w, i + 7, j + 12, k + 7, air, 0);
		b(w, i + 7, j + 12, k + 8, air, 0);
		b(w, i + 7, j + 12, k + 9, air, 0);
		b(w, i + 7, j + 12, k + 10, air, 0);
		b(w, i + 7, j + 12, k + 11, air, 0);
		b(w, i + 7, j + 12, k + 12, air, 0);
		b(w, i + 7, j + 12, k + 13, air, 0);
		b(w, i + 7, j + 12, k + 14, air, 0);
		b(w, i + 7, j + 12, k + 15, air, 0);
		b(w, i + 7, j + 13, k, air, 0);
		b(w, i + 7, j + 13, k + 1, air, 0);
		b(w, i + 7, j + 13, k + 2, air, 0);
		b(w, i + 7, j + 13, k + 3, air, 0);
		b(w, i + 7, j + 13, k + 4, air, 0);
		b(w, i + 7, j + 13, k + 5, air, 0);
		b(w, i + 7, j + 13, k + 6, air, 0);
		b(w, i + 7, j + 13, k + 7, air, 0);
		b(w, i + 7, j + 13, k + 8, air, 0);
		b(w, i + 7, j + 13, k + 9, air, 0);
		b(w, i + 7, j + 13, k + 10, air, 0);
		b(w, i + 7, j + 13, k + 11, air, 0);
		b(w, i + 7, j + 13, k + 12, air, 0);
		b(w, i + 7, j + 13, k + 13, air, 0);
		b(w, i + 7, j + 13, k + 14, air, 0);
		b(w, i + 7, j + 13, k + 15, air, 0);
		b(w, i + 7, j + 14, k, air, 0);
		b(w, i + 7, j + 14, k + 1, air, 0);
		b(w, i + 7, j + 14, k + 2, air, 0);
		b(w, i + 7, j + 14, k + 3, air, 0);
		b(w, i + 7, j + 14, k + 4, air, 0);
		b(w, i + 7, j + 14, k + 5, air, 0);
		b(w, i + 7, j + 14, k + 6, air, 0);
		b(w, i + 7, j + 14, k + 7, air, 0);
		b(w, i + 7, j + 14, k + 8, air, 0);
		b(w, i + 7, j + 14, k + 9, air, 0);
		b(w, i + 7, j + 14, k + 10, air, 0);
		b(w, i + 7, j + 14, k + 11, air, 0);
		b(w, i + 7, j + 14, k + 12, air, 0);
		b(w, i + 7, j + 14, k + 13, air, 0);
		b(w, i + 7, j + 14, k + 14, air, 0);
		b(w, i + 7, j + 14, k + 15, air, 0);
		b(w, i + 7, j + 15, k, air, 0);
		b(w, i + 7, j + 15, k + 1, air, 0);
		b(w, i + 7, j + 15, k + 2, air, 0);
		b(w, i + 7, j + 15, k + 3, air, 0);
		b(w, i + 7, j + 15, k + 4, air, 0);
		b(w, i + 7, j + 15, k + 5, air, 0);
		b(w, i + 7, j + 15, k + 6, air, 0);
		b(w, i + 7, j + 15, k + 7, air, 0);
		b(w, i + 7, j + 15, k + 8, air, 0);
		b(w, i + 7, j + 15, k + 9, air, 0);
		b(w, i + 7, j + 15, k + 10, air, 0);
		b(w, i + 7, j + 15, k + 11, air, 0);
		b(w, i + 7, j + 15, k + 12, air, 0);
		b(w, i + 7, j + 15, k + 13, air, 0);
		b(w, i + 7, j + 15, k + 14, air, 0);
		b(w, i + 7, j + 15, k + 15, air, 0);
		b(w, i + 7, j + 16, k, air, 0);
		b(w, i + 7, j + 16, k + 1, air, 0);
		b(w, i + 7, j + 16, k + 2, air, 0);
		generate_7(w, i, j, k);
	}

	public static void generate_7(World w, int i, int j, int k)
	{
		b(w, i + 7, j + 16, k + 3, air, 0);
		b(w, i + 7, j + 16, k + 4, air, 0);
		b(w, i + 7, j + 16, k + 5, air, 0);
		b(w, i + 7, j + 16, k + 6, air, 0);
		b(w, i + 7, j + 16, k + 7, air, 0);
		b(w, i + 7, j + 16, k + 8, air, 0);
		b(w, i + 7, j + 16, k + 9, air, 0);
		b(w, i + 7, j + 16, k + 10, air, 0);
		b(w, i + 7, j + 16, k + 11, air, 0);
		b(w, i + 7, j + 16, k + 12, air, 0);
		b(w, i + 7, j + 16, k + 13, air, 0);
		b(w, i + 7, j + 16, k + 14, air, 0);
		b(w, i + 7, j + 16, k + 15, air, 0);
		b(w, i + 7, j + 17, k, air, 0);
		b(w, i + 7, j + 17, k + 1, air, 0);
		b(w, i + 7, j + 17, k + 2, air, 0);
		b(w, i + 7, j + 17, k + 3, air, 0);
		b(w, i + 7, j + 17, k + 4, air, 0);
		b(w, i + 7, j + 17, k + 5, air, 0);
		b(w, i + 7, j + 17, k + 6, air, 0);
		b(w, i + 7, j + 17, k + 7, air, 0);
		b(w, i + 7, j + 17, k + 8, air, 0);
		b(w, i + 7, j + 17, k + 9, air, 0);
		b(w, i + 7, j + 17, k + 10, air, 0);
		b(w, i + 7, j + 17, k + 11, air, 0);
		b(w, i + 7, j + 17, k + 12, air, 0);
		b(w, i + 7, j + 17, k + 13, air, 0);
		b(w, i + 7, j + 17, k + 14, air, 0);
		b(w, i + 7, j + 17, k + 15, air, 0);
		b(w, i + 7, j + 18, k, air, 0);
		b(w, i + 7, j + 18, k + 1, air, 0);
		b(w, i + 7, j + 18, k + 2, air, 0);
		b(w, i + 7, j + 18, k + 3, air, 0);
		b(w, i + 7, j + 18, k + 4, air, 0);
		b(w, i + 7, j + 18, k + 5, air, 0);
		b(w, i + 7, j + 18, k + 6, air, 0);
		b(w, i + 7, j + 18, k + 7, air, 0);
		b(w, i + 7, j + 18, k + 8, air, 0);
		b(w, i + 7, j + 18, k + 9, air, 0);
		b(w, i + 7, j + 18, k + 10, air, 0);
		b(w, i + 7, j + 18, k + 11, air, 0);
		b(w, i + 7, j + 18, k + 12, air, 0);
		b(w, i + 7, j + 18, k + 13, air, 0);
		b(w, i + 7, j + 18, k + 14, air, 0);
		b(w, i + 7, j + 18, k + 15, air, 0);
		b(w, i + 7, j + 19, k, air, 0);
		b(w, i + 7, j + 19, k + 1, air, 0);
		b(w, i + 7, j + 19, k + 2, air, 0);
		b(w, i + 7, j + 19, k + 3, air, 0);
		b(w, i + 7, j + 19, k + 4, air, 0);
		b(w, i + 7, j + 19, k + 5, air, 0);
		b(w, i + 7, j + 19, k + 6, air, 0);
		b(w, i + 7, j + 19, k + 7, air, 0);
		b(w, i + 7, j + 19, k + 8, air, 0);
		b(w, i + 7, j + 19, k + 9, air, 0);
		b(w, i + 7, j + 19, k + 10, air, 0);
		b(w, i + 7, j + 19, k + 11, air, 0);
		b(w, i + 7, j + 19, k + 12, air, 0);
		b(w, i + 7, j + 19, k + 13, air, 0);
		b(w, i + 7, j + 19, k + 14, air, 0);
		b(w, i + 7, j + 19, k + 15, air, 0);
		b(w, i + 7, j + 20, k, air, 0);
		b(w, i + 7, j + 20, k + 1, air, 0);
		b(w, i + 7, j + 20, k + 2, air, 0);
		b(w, i + 7, j + 20, k + 3, air, 0);
		b(w, i + 7, j + 20, k + 4, air, 0);
		b(w, i + 7, j + 20, k + 5, air, 0);
		b(w, i + 7, j + 20, k + 6, air, 0);
		b(w, i + 7, j + 20, k + 7, air, 0);
		b(w, i + 7, j + 20, k + 8, air, 0);
		b(w, i + 7, j + 20, k + 9, air, 0);
		b(w, i + 7, j + 20, k + 10, air, 0);
		b(w, i + 7, j + 20, k + 11, air, 0);
		b(w, i + 7, j + 20, k + 12, air, 0);
		b(w, i + 7, j + 20, k + 13, air, 0);
		b(w, i + 7, j + 20, k + 14, air, 0);
		b(w, i + 7, j + 20, k + 15, air, 0);
		b(w, i + 7, j + 21, k, air, 0);
		b(w, i + 7, j + 21, k + 1, air, 0);
		b(w, i + 7, j + 21, k + 2, air, 0);
		b(w, i + 7, j + 21, k + 3, air, 0);
		b(w, i + 7, j + 21, k + 4, air, 0);
		b(w, i + 7, j + 21, k + 5, air, 0);
		b(w, i + 7, j + 21, k + 6, air, 0);
		b(w, i + 7, j + 21, k + 7, air, 0);
		b(w, i + 7, j + 21, k + 8, air, 0);
		b(w, i + 7, j + 21, k + 9, air, 0);
		b(w, i + 7, j + 21, k + 10, air, 0);
		b(w, i + 7, j + 21, k + 11, air, 0);
		b(w, i + 7, j + 21, k + 12, air, 0);
		b(w, i + 7, j + 21, k + 13, air, 0);
		b(w, i + 7, j + 21, k + 14, air, 0);
		b(w, i + 7, j + 21, k + 15, air, 0);
		b(w, i + 7, j + 22, k, air, 0);
		b(w, i + 7, j + 22, k + 1, air, 0);
		b(w, i + 7, j + 22, k + 2, air, 0);
		b(w, i + 7, j + 22, k + 3, air, 0);
		b(w, i + 7, j + 22, k + 4, air, 0);
		b(w, i + 7, j + 22, k + 5, air, 0);
		b(w, i + 7, j + 22, k + 6, air, 0);
		b(w, i + 7, j + 22, k + 7, air, 0);
		b(w, i + 7, j + 22, k + 8, air, 0);
		b(w, i + 7, j + 22, k + 9, air, 0);
		b(w, i + 7, j + 22, k + 10, air, 0);
		b(w, i + 7, j + 22, k + 11, air, 0);
		b(w, i + 7, j + 22, k + 12, air, 0);
		b(w, i + 7, j + 22, k + 13, air, 0);
		b(w, i + 7, j + 22, k + 14, air, 0);
		b(w, i + 7, j + 22, k + 15, air, 0);
		b(w, i + 7, j + 23, k, air, 0);
		b(w, i + 7, j + 23, k + 1, air, 0);
		b(w, i + 7, j + 23, k + 2, air, 0);
		b(w, i + 7, j + 23, k + 3, air, 0);
		b(w, i + 7, j + 23, k + 4, air, 0);
		b(w, i + 7, j + 23, k + 5, air, 0);
		b(w, i + 7, j + 23, k + 6, air, 0);
		b(w, i + 7, j + 23, k + 7, air, 0);
		b(w, i + 7, j + 23, k + 8, air, 0);
		b(w, i + 7, j + 23, k + 9, air, 0);
		b(w, i + 7, j + 23, k + 10, air, 0);
		b(w, i + 7, j + 23, k + 11, air, 0);
		b(w, i + 7, j + 23, k + 12, air, 0);
		b(w, i + 7, j + 23, k + 13, air, 0);
		b(w, i + 7, j + 23, k + 14, air, 0);
		b(w, i + 7, j + 23, k + 15, air, 0);
		b(w, i + 7, j + 24, k, air, 0);
		b(w, i + 7, j + 24, k + 1, air, 0);
		b(w, i + 7, j + 24, k + 2, air, 0);
		b(w, i + 7, j + 24, k + 3, air, 0);
		b(w, i + 7, j + 24, k + 4, air, 0);
		b(w, i + 7, j + 24, k + 5, air, 0);
		b(w, i + 7, j + 24, k + 6, air, 0);
		b(w, i + 7, j + 24, k + 7, air, 0);
		b(w, i + 7, j + 24, k + 8, air, 0);
		b(w, i + 7, j + 24, k + 9, air, 0);
		b(w, i + 7, j + 24, k + 10, air, 0);
		b(w, i + 7, j + 24, k + 11, air, 0);
		b(w, i + 7, j + 24, k + 12, air, 0);
		b(w, i + 7, j + 24, k + 13, air, 0);
		b(w, i + 7, j + 24, k + 14, air, 0);
		b(w, i + 7, j + 24, k + 15, air, 0);
		b(w, i + 7, j + 25, k, air, 0);
		b(w, i + 7, j + 25, k + 1, air, 0);
		b(w, i + 7, j + 25, k + 2, air, 0);
		b(w, i + 7, j + 25, k + 3, air, 0);
		b(w, i + 7, j + 25, k + 4, air, 0);
		b(w, i + 7, j + 25, k + 5, air, 0);
		b(w, i + 7, j + 25, k + 6, air, 0);
		b(w, i + 7, j + 25, k + 7, air, 0);
		b(w, i + 7, j + 25, k + 8, air, 0);
		b(w, i + 7, j + 25, k + 9, air, 0);
		b(w, i + 7, j + 25, k + 10, air, 0);
		b(w, i + 7, j + 25, k + 11, air, 0);
		b(w, i + 7, j + 25, k + 12, air, 0);
		b(w, i + 7, j + 25, k + 13, air, 0);
		b(w, i + 7, j + 25, k + 14, air, 0);
		b(w, i + 7, j + 25, k + 15, air, 0);
		b(w, i + 7, j + 26, k, air, 0);
		b(w, i + 7, j + 26, k + 1, air, 0);
		b(w, i + 7, j + 26, k + 2, air, 0);
		b(w, i + 7, j + 26, k + 3, air, 0);
		b(w, i + 7, j + 26, k + 4, air, 0);
		b(w, i + 7, j + 26, k + 5, air, 0);
		b(w, i + 7, j + 26, k + 6, air, 0);
		b(w, i + 7, j + 26, k + 7, air, 0);
		b(w, i + 7, j + 26, k + 8, air, 0);
		b(w, i + 7, j + 26, k + 9, air, 0);
		b(w, i + 7, j + 26, k + 10, air, 0);
		b(w, i + 7, j + 26, k + 11, air, 0);
		b(w, i + 7, j + 26, k + 12, air, 0);
		b(w, i + 7, j + 26, k + 13, air, 0);
		b(w, i + 7, j + 26, k + 14, air, 0);
		b(w, i + 7, j + 26, k + 15, air, 0);
		b(w, i + 7, j + 27, k, air, 0);
		b(w, i + 7, j + 27, k + 1, air, 0);
		b(w, i + 7, j + 27, k + 2, air, 0);
		b(w, i + 7, j + 27, k + 3, air, 0);
		b(w, i + 7, j + 27, k + 4, air, 0);
		b(w, i + 7, j + 27, k + 5, air, 0);
		b(w, i + 7, j + 27, k + 6, air, 0);
		b(w, i + 7, j + 27, k + 7, air, 0);
		b(w, i + 7, j + 27, k + 8, air, 0);
		b(w, i + 7, j + 27, k + 9, air, 0);
		b(w, i + 7, j + 27, k + 10, air, 0);
		b(w, i + 7, j + 27, k + 11, air, 0);
		b(w, i + 7, j + 27, k + 12, air, 0);
		b(w, i + 7, j + 27, k + 13, air, 0);
		b(w, i + 7, j + 27, k + 14, air, 0);
		b(w, i + 7, j + 27, k + 15, air, 0);
		b(w, i + 7, j + 28, k, air, 0);
		b(w, i + 7, j + 28, k + 1, air, 0);
		b(w, i + 7, j + 28, k + 2, air, 0);
		b(w, i + 7, j + 28, k + 3, air, 0);
		b(w, i + 7, j + 28, k + 4, air, 0);
		b(w, i + 7, j + 28, k + 5, air, 0);
		b(w, i + 7, j + 28, k + 6, air, 0);
		b(w, i + 7, j + 28, k + 7, air, 0);
		b(w, i + 7, j + 28, k + 8, air, 0);
		b(w, i + 7, j + 28, k + 9, air, 0);
		b(w, i + 7, j + 28, k + 10, air, 0);
		b(w, i + 7, j + 28, k + 11, air, 0);
		b(w, i + 7, j + 28, k + 12, air, 0);
		b(w, i + 7, j + 28, k + 13, air, 0);
		b(w, i + 7, j + 28, k + 14, air, 0);
		b(w, i + 7, j + 28, k + 15, air, 0);
		b(w, i + 8, j, k, blockTatooineSand, 0);
		b(w, i + 8, j, k + 1, blockTatooineSand, 0);
		b(w, i + 8, j, k + 2, blockTatooineSand, 0);
		b(w, i + 8, j, k + 3, blockTatooineSand, 0);
		b(w, i + 8, j, k + 4, blockTatooineSand, 0);
		b(w, i + 8, j, k + 5, blockTatooineSand, 0);
		b(w, i + 8, j, k + 6, blockTatooineSand, 0);
		b(w, i + 8, j, k + 7, blockTatooineSand, 0);
		b(w, i + 8, j, k + 8, blockTatooineSand, 0);
		b(w, i + 8, j, k + 9, blockTatooineSand, 0);
		b(w, i + 8, j, k + 10, blockTatooineSand, 0);
		b(w, i + 8, j, k + 11, blockTatooineSand, 0);
		b(w, i + 8, j, k + 12, blockTatooineSand, 0);
		b(w, i + 8, j, k + 13, blockTatooineSand, 0);
		b(w, i + 8, j, k + 14, blockTatooineSand, 0);
		b(w, i + 8, j, k + 15, blockTatooineSand, 0);
		b(w, i + 8, j + 1, k, sandstone, 0);
		b(w, i + 8, j + 1, k + 1, sandstone, 0);
		b(w, i + 8, j + 1, k + 2, sandstone, 0);
		b(w, i + 8, j + 1, k + 3, sandstone, 0);
		b(w, i + 8, j + 1, k + 4, sandstone, 0);
		b(w, i + 8, j + 1, k + 5, sandstone, 0);
		b(w, i + 8, j + 1, k + 6, sandstone, 0);
		b(w, i + 8, j + 1, k + 7, sandstone, 0);
		b(w, i + 8, j + 1, k + 8, sandstone, 0);
		b(w, i + 8, j + 1, k + 9, sandstone, 0);
		b(w, i + 8, j + 1, k + 10, air, 0);
		b(w, i + 8, j + 1, k + 11, air, 0);
		b(w, i + 8, j + 1, k + 12, air, 0);
		b(w, i + 8, j + 1, k + 13, air, 0);
		b(w, i + 8, j + 1, k + 14, sandstone, 0);
		b(w, i + 8, j + 1, k + 15, air, 0);
		b(w, i + 8, j + 2, k, air, 0);
		b(w, i + 8, j + 2, k + 1, air, 0);
		b(w, i + 8, j + 2, k + 2, air, 0);
		b(w, i + 8, j + 2, k + 3, air, 0);
		b(w, i + 8, j + 2, k + 4, air, 0);
		b(w, i + 8, j + 2, k + 5, air, 0);
		b(w, i + 8, j + 2, k + 6, sandstone, 0);
		b(w, i + 8, j + 2, k + 7, sandstone, 0);
		b(w, i + 8, j + 2, k + 8, sandstone, 0);
		b(w, i + 8, j + 2, k + 9, sandstone, 0);
		b(w, i + 8, j + 2, k + 10, air, 0);
		b(w, i + 8, j + 2, k + 11, air, 0);
		b(w, i + 8, j + 2, k + 12, air, 0);
		b(w, i + 8, j + 2, k + 13, air, 0);
		b(w, i + 8, j + 2, k + 14, sandstone, 0);
		b(w, i + 8, j + 2, k + 15, air, 0);
		b(w, i + 8, j + 3, k, air, 0);
		b(w, i + 8, j + 3, k + 1, air, 0);
		b(w, i + 8, j + 3, k + 2, air, 0);
		b(w, i + 8, j + 3, k + 3, air, 0);
		b(w, i + 8, j + 3, k + 4, air, 0);
		b(w, i + 8, j + 3, k + 5, air, 0);
		b(w, i + 8, j + 3, k + 6, sandstone, 0);
		b(w, i + 8, j + 3, k + 7, sandstone, 0);
		b(w, i + 8, j + 3, k + 8, sandstone, 0);
		b(w, i + 8, j + 3, k + 9, sandstone, 0);
		b(w, i + 8, j + 3, k + 10, air, 0);
		b(w, i + 8, j + 3, k + 11, air, 0);
		b(w, i + 8, j + 3, k + 12, air, 0);
		b(w, i + 8, j + 3, k + 13, air, 0);
		b(w, i + 8, j + 3, k + 14, sandstone, 0);
		b(w, i + 8, j + 3, k + 15, air, 0);
		b(w, i + 8, j + 4, k, air, 0);
		b(w, i + 8, j + 4, k + 1, air, 0);
		b(w, i + 8, j + 4, k + 2, air, 0);
		b(w, i + 8, j + 4, k + 3, air, 0);
		b(w, i + 8, j + 4, k + 4, air, 0);
		b(w, i + 8, j + 4, k + 5, air, 0);
		b(w, i + 8, j + 4, k + 6, sandstone, 0);
		b(w, i + 8, j + 4, k + 7, sandstone, 0);
		b(w, i + 8, j + 4, k + 8, sandstone, 0);
		b(w, i + 8, j + 4, k + 9, sandstone, 0);
		b(w, i + 8, j + 4, k + 10, air, 0);
		b(w, i + 8, j + 4, k + 11, air, 0);
		b(w, i + 8, j + 4, k + 12, air, 0);
		b(w, i + 8, j + 4, k + 13, air, 0);
		b(w, i + 8, j + 4, k + 14, sandstone, 0);
		b(w, i + 8, j + 4, k + 15, air, 0);
		b(w, i + 8, j + 5, k, air, 0);
		b(w, i + 8, j + 5, k + 1, air, 0);
		b(w, i + 8, j + 5, k + 2, air, 0);
		b(w, i + 8, j + 5, k + 3, air, 0);
		b(w, i + 8, j + 5, k + 4, air, 0);
		b(w, i + 8, j + 5, k + 5, air, 0);
		b(w, i + 8, j + 5, k + 6, sandstone, 0);
		b(w, i + 8, j + 5, k + 7, sandstone, 0);
		b(w, i + 8, j + 5, k + 8, sandstone, 0);
		b(w, i + 8, j + 5, k + 9, sandstone, 0);
		b(w, i + 8, j + 5, k + 10, air, 0);
		b(w, i + 8, j + 5, k + 11, air, 0);
		b(w, i + 8, j + 5, k + 12, air, 0);
		b(w, i + 8, j + 5, k + 13, air, 0);
		b(w, i + 8, j + 5, k + 14, sandstone, 0);
		b(w, i + 8, j + 5, k + 15, air, 0);
		b(w, i + 8, j + 6, k, air, 0);
		b(w, i + 8, j + 6, k + 1, air, 0);
		b(w, i + 8, j + 6, k + 2, air, 0);
		b(w, i + 8, j + 6, k + 3, air, 0);
		b(w, i + 8, j + 6, k + 4, air, 0);
		b(w, i + 8, j + 6, k + 5, air, 0);
		b(w, i + 8, j + 6, k + 6, sandstone, 0);
		b(w, i + 8, j + 6, k + 7, sandstone, 0);
		b(w, i + 8, j + 6, k + 8, sandstone, 0);
		b(w, i + 8, j + 6, k + 9, sandstone, 0);
		b(w, i + 8, j + 6, k + 10, sandstone, 0);
		b(w, i + 8, j + 6, k + 11, sandstone, 0);
		b(w, i + 8, j + 6, k + 12, sandstone, 0);
		b(w, i + 8, j + 6, k + 13, sandstone, 0);
		b(w, i + 8, j + 6, k + 14, sandstone, 0);
		b(w, i + 8, j + 6, k + 15, air, 0);
		b(w, i + 8, j + 7, k, air, 0);
		b(w, i + 8, j + 7, k + 1, air, 0);
		b(w, i + 8, j + 7, k + 2, air, 0);
		b(w, i + 8, j + 7, k + 3, air, 0);
		b(w, i + 8, j + 7, k + 4, air, 0);
		b(w, i + 8, j + 7, k + 5, air, 0);
		b(w, i + 8, j + 7, k + 6, sandstone, 0);
		b(w, i + 8, j + 7, k + 7, sandstone, 0);
		b(w, i + 8, j + 7, k + 8, sandstone, 0);
		b(w, i + 8, j + 7, k + 9, sandstone_stairs, 0);
		m(w, i + 8, j + 7, k + 9, 3);
		b(w, i + 8, j + 7, k + 10, air, 0);
		b(w, i + 8, j + 7, k + 11, air, 0);
		b(w, i + 8, j + 7, k + 12, air, 0);
		b(w, i + 8, j + 7, k + 13, air, 0);
		b(w, i + 8, j + 7, k + 14, air, 0);
		b(w, i + 8, j + 7, k + 15, air, 0);
		b(w, i + 8, j + 8, k, air, 0);
		b(w, i + 8, j + 8, k + 1, air, 0);
		b(w, i + 8, j + 8, k + 2, air, 0);
		b(w, i + 8, j + 8, k + 3, air, 0);
		b(w, i + 8, j + 8, k + 4, sandstone, 0);
		b(w, i + 8, j + 8, k + 5, sandstone, 0);
		b(w, i + 8, j + 8, k + 6, sandstone, 0);
		b(w, i + 8, j + 8, k + 7, sandstone, 0);
		b(w, i + 8, j + 8, k + 8, sandstone, 0);
		b(w, i + 8, j + 8, k + 9, air, 0);
		b(w, i + 8, j + 8, k + 10, air, 0);
		b(w, i + 8, j + 8, k + 11, air, 0);
		b(w, i + 8, j + 8, k + 12, air, 0);
		b(w, i + 8, j + 8, k + 13, air, 0);
		b(w, i + 8, j + 8, k + 14, air, 0);
		b(w, i + 8, j + 8, k + 15, air, 0);
		b(w, i + 8, j + 9, k, air, 0);
		b(w, i + 8, j + 9, k + 1, air, 0);
		b(w, i + 8, j + 9, k + 2, air, 0);
		b(w, i + 8, j + 9, k + 3, air, 0);
		b(w, i + 8, j + 9, k + 4, stone_slab, 0);
		m(w, i + 8, j + 9, k + 4, 1);
		b(w, i + 8, j + 9, k + 5, stone_slab, 0);
		m(w, i + 8, j + 9, k + 5, 1);
		b(w, i + 8, j + 9, k + 6, air, 0);
		b(w, i + 8, j + 9, k + 7, air, 0);
		b(w, i + 8, j + 9, k + 8, air, 0);
		b(w, i + 8, j + 9, k + 9, air, 0);
		b(w, i + 8, j + 9, k + 10, air, 0);
		b(w, i + 8, j + 9, k + 11, air, 0);
		b(w, i + 8, j + 9, k + 12, air, 0);
		b(w, i + 8, j + 9, k + 13, air, 0);
		b(w, i + 8, j + 9, k + 14, air, 0);
		b(w, i + 8, j + 9, k + 15, air, 0);
		b(w, i + 8, j + 10, k, air, 0);
		b(w, i + 8, j + 10, k + 1, air, 0);
		b(w, i + 8, j + 10, k + 2, air, 0);
		b(w, i + 8, j + 10, k + 3, air, 0);
		b(w, i + 8, j + 10, k + 4, air, 0);
		b(w, i + 8, j + 10, k + 5, air, 0);
		b(w, i + 8, j + 10, k + 6, air, 0);
		b(w, i + 8, j + 10, k + 7, air, 0);
		b(w, i + 8, j + 10, k + 8, air, 0);
		b(w, i + 8, j + 10, k + 9, air, 0);
		b(w, i + 8, j + 10, k + 10, air, 0);
		b(w, i + 8, j + 10, k + 11, air, 0);
		b(w, i + 8, j + 10, k + 12, air, 0);
		b(w, i + 8, j + 10, k + 13, air, 0);
		b(w, i + 8, j + 10, k + 14, air, 0);
		b(w, i + 8, j + 10, k + 15, air, 0);
		b(w, i + 8, j + 11, k, air, 0);
		b(w, i + 8, j + 11, k + 1, air, 0);
		b(w, i + 8, j + 11, k + 2, air, 0);
		b(w, i + 8, j + 11, k + 3, air, 0);
		b(w, i + 8, j + 11, k + 4, air, 0);
		b(w, i + 8, j + 11, k + 5, air, 0);
		b(w, i + 8, j + 11, k + 6, air, 0);
		b(w, i + 8, j + 11, k + 7, air, 0);
		b(w, i + 8, j + 11, k + 8, air, 0);
		b(w, i + 8, j + 11, k + 9, air, 0);
		b(w, i + 8, j + 11, k + 10, air, 0);
		b(w, i + 8, j + 11, k + 11, air, 0);
		b(w, i + 8, j + 11, k + 12, air, 0);
		b(w, i + 8, j + 11, k + 13, air, 0);
		b(w, i + 8, j + 11, k + 14, air, 0);
		b(w, i + 8, j + 11, k + 15, air, 0);
		b(w, i + 8, j + 12, k, air, 0);
		b(w, i + 8, j + 12, k + 1, air, 0);
		b(w, i + 8, j + 12, k + 2, air, 0);
		b(w, i + 8, j + 12, k + 3, air, 0);
		b(w, i + 8, j + 12, k + 4, air, 0);
		b(w, i + 8, j + 12, k + 5, air, 0);
		b(w, i + 8, j + 12, k + 6, air, 0);
		b(w, i + 8, j + 12, k + 7, air, 0);
		b(w, i + 8, j + 12, k + 8, air, 0);
		b(w, i + 8, j + 12, k + 9, air, 0);
		b(w, i + 8, j + 12, k + 10, air, 0);
		b(w, i + 8, j + 12, k + 11, air, 0);
		b(w, i + 8, j + 12, k + 12, air, 0);
		b(w, i + 8, j + 12, k + 13, air, 0);
		b(w, i + 8, j + 12, k + 14, air, 0);
		b(w, i + 8, j + 12, k + 15, air, 0);
		b(w, i + 8, j + 13, k, air, 0);
		b(w, i + 8, j + 13, k + 1, air, 0);
		b(w, i + 8, j + 13, k + 2, air, 0);
		b(w, i + 8, j + 13, k + 3, air, 0);
		b(w, i + 8, j + 13, k + 4, air, 0);
		b(w, i + 8, j + 13, k + 5, air, 0);
		b(w, i + 8, j + 13, k + 6, air, 0);
		b(w, i + 8, j + 13, k + 7, air, 0);
		b(w, i + 8, j + 13, k + 8, air, 0);
		b(w, i + 8, j + 13, k + 9, air, 0);
		b(w, i + 8, j + 13, k + 10, air, 0);
		b(w, i + 8, j + 13, k + 11, air, 0);
		b(w, i + 8, j + 13, k + 12, air, 0);
		b(w, i + 8, j + 13, k + 13, air, 0);
		b(w, i + 8, j + 13, k + 14, air, 0);
		b(w, i + 8, j + 13, k + 15, air, 0);
		b(w, i + 8, j + 14, k, air, 0);
		b(w, i + 8, j + 14, k + 1, air, 0);
		b(w, i + 8, j + 14, k + 2, air, 0);
		b(w, i + 8, j + 14, k + 3, air, 0);
		b(w, i + 8, j + 14, k + 4, air, 0);
		b(w, i + 8, j + 14, k + 5, air, 0);
		b(w, i + 8, j + 14, k + 6, air, 0);
		b(w, i + 8, j + 14, k + 7, air, 0);
		b(w, i + 8, j + 14, k + 8, air, 0);
		b(w, i + 8, j + 14, k + 9, air, 0);
		b(w, i + 8, j + 14, k + 10, air, 0);
		b(w, i + 8, j + 14, k + 11, air, 0);
		b(w, i + 8, j + 14, k + 12, air, 0);
		b(w, i + 8, j + 14, k + 13, air, 0);
		b(w, i + 8, j + 14, k + 14, air, 0);
		b(w, i + 8, j + 14, k + 15, air, 0);
		b(w, i + 8, j + 15, k, air, 0);
		b(w, i + 8, j + 15, k + 1, air, 0);
		b(w, i + 8, j + 15, k + 2, air, 0);
		b(w, i + 8, j + 15, k + 3, air, 0);
		b(w, i + 8, j + 15, k + 4, air, 0);
		b(w, i + 8, j + 15, k + 5, air, 0);
		b(w, i + 8, j + 15, k + 6, air, 0);
		b(w, i + 8, j + 15, k + 7, air, 0);
		b(w, i + 8, j + 15, k + 8, air, 0);
		b(w, i + 8, j + 15, k + 9, air, 0);
		b(w, i + 8, j + 15, k + 10, air, 0);
		b(w, i + 8, j + 15, k + 11, air, 0);
		b(w, i + 8, j + 15, k + 12, air, 0);
		b(w, i + 8, j + 15, k + 13, air, 0);
		b(w, i + 8, j + 15, k + 14, air, 0);
		b(w, i + 8, j + 15, k + 15, air, 0);
		b(w, i + 8, j + 16, k, air, 0);
		b(w, i + 8, j + 16, k + 1, air, 0);
		b(w, i + 8, j + 16, k + 2, air, 0);
		b(w, i + 8, j + 16, k + 3, air, 0);
		b(w, i + 8, j + 16, k + 4, air, 0);
		b(w, i + 8, j + 16, k + 5, air, 0);
		b(w, i + 8, j + 16, k + 6, air, 0);
		b(w, i + 8, j + 16, k + 7, air, 0);
		b(w, i + 8, j + 16, k + 8, air, 0);
		b(w, i + 8, j + 16, k + 9, air, 0);
		b(w, i + 8, j + 16, k + 10, air, 0);
		b(w, i + 8, j + 16, k + 11, air, 0);
		b(w, i + 8, j + 16, k + 12, air, 0);
		b(w, i + 8, j + 16, k + 13, air, 0);
		b(w, i + 8, j + 16, k + 14, air, 0);
		b(w, i + 8, j + 16, k + 15, air, 0);
		b(w, i + 8, j + 17, k, air, 0);
		b(w, i + 8, j + 17, k + 1, air, 0);
		b(w, i + 8, j + 17, k + 2, air, 0);
		b(w, i + 8, j + 17, k + 3, air, 0);
		b(w, i + 8, j + 17, k + 4, air, 0);
		b(w, i + 8, j + 17, k + 5, air, 0);
		b(w, i + 8, j + 17, k + 6, air, 0);
		b(w, i + 8, j + 17, k + 7, air, 0);
		b(w, i + 8, j + 17, k + 8, air, 0);
		b(w, i + 8, j + 17, k + 9, air, 0);
		b(w, i + 8, j + 17, k + 10, air, 0);
		b(w, i + 8, j + 17, k + 11, air, 0);
		b(w, i + 8, j + 17, k + 12, air, 0);
		b(w, i + 8, j + 17, k + 13, air, 0);
		b(w, i + 8, j + 17, k + 14, air, 0);
		b(w, i + 8, j + 17, k + 15, air, 0);
		b(w, i + 8, j + 18, k, air, 0);
		b(w, i + 8, j + 18, k + 1, air, 0);
		b(w, i + 8, j + 18, k + 2, air, 0);
		b(w, i + 8, j + 18, k + 3, air, 0);
		b(w, i + 8, j + 18, k + 4, air, 0);
		b(w, i + 8, j + 18, k + 5, air, 0);
		b(w, i + 8, j + 18, k + 6, air, 0);
		b(w, i + 8, j + 18, k + 7, air, 0);
		generate_8(w, i, j, k);
	}

	public static void generate_8(World w, int i, int j, int k)
	{
		b(w, i + 8, j + 18, k + 8, air, 0);
		b(w, i + 8, j + 18, k + 9, air, 0);
		b(w, i + 8, j + 18, k + 10, air, 0);
		b(w, i + 8, j + 18, k + 11, air, 0);
		b(w, i + 8, j + 18, k + 12, air, 0);
		b(w, i + 8, j + 18, k + 13, air, 0);
		b(w, i + 8, j + 18, k + 14, air, 0);
		b(w, i + 8, j + 18, k + 15, air, 0);
		b(w, i + 8, j + 19, k, air, 0);
		b(w, i + 8, j + 19, k + 1, air, 0);
		b(w, i + 8, j + 19, k + 2, air, 0);
		b(w, i + 8, j + 19, k + 3, air, 0);
		b(w, i + 8, j + 19, k + 4, air, 0);
		b(w, i + 8, j + 19, k + 5, air, 0);
		b(w, i + 8, j + 19, k + 6, air, 0);
		b(w, i + 8, j + 19, k + 7, air, 0);
		b(w, i + 8, j + 19, k + 8, air, 0);
		b(w, i + 8, j + 19, k + 9, air, 0);
		b(w, i + 8, j + 19, k + 10, air, 0);
		b(w, i + 8, j + 19, k + 11, air, 0);
		b(w, i + 8, j + 19, k + 12, air, 0);
		b(w, i + 8, j + 19, k + 13, air, 0);
		b(w, i + 8, j + 19, k + 14, air, 0);
		b(w, i + 8, j + 19, k + 15, air, 0);
		b(w, i + 8, j + 20, k, air, 0);
		b(w, i + 8, j + 20, k + 1, air, 0);
		b(w, i + 8, j + 20, k + 2, air, 0);
		b(w, i + 8, j + 20, k + 3, air, 0);
		b(w, i + 8, j + 20, k + 4, air, 0);
		b(w, i + 8, j + 20, k + 5, air, 0);
		b(w, i + 8, j + 20, k + 6, air, 0);
		b(w, i + 8, j + 20, k + 7, air, 0);
		b(w, i + 8, j + 20, k + 8, air, 0);
		b(w, i + 8, j + 20, k + 9, air, 0);
		b(w, i + 8, j + 20, k + 10, air, 0);
		b(w, i + 8, j + 20, k + 11, air, 0);
		b(w, i + 8, j + 20, k + 12, air, 0);
		b(w, i + 8, j + 20, k + 13, air, 0);
		b(w, i + 8, j + 20, k + 14, air, 0);
		b(w, i + 8, j + 20, k + 15, air, 0);
		b(w, i + 8, j + 21, k, air, 0);
		b(w, i + 8, j + 21, k + 1, air, 0);
		b(w, i + 8, j + 21, k + 2, air, 0);
		b(w, i + 8, j + 21, k + 3, air, 0);
		b(w, i + 8, j + 21, k + 4, air, 0);
		b(w, i + 8, j + 21, k + 5, air, 0);
		b(w, i + 8, j + 21, k + 6, air, 0);
		b(w, i + 8, j + 21, k + 7, air, 0);
		b(w, i + 8, j + 21, k + 8, air, 0);
		b(w, i + 8, j + 21, k + 9, air, 0);
		b(w, i + 8, j + 21, k + 10, air, 0);
		b(w, i + 8, j + 21, k + 11, air, 0);
		b(w, i + 8, j + 21, k + 12, air, 0);
		b(w, i + 8, j + 21, k + 13, air, 0);
		b(w, i + 8, j + 21, k + 14, air, 0);
		b(w, i + 8, j + 21, k + 15, air, 0);
		b(w, i + 8, j + 22, k, air, 0);
		b(w, i + 8, j + 22, k + 1, air, 0);
		b(w, i + 8, j + 22, k + 2, air, 0);
		b(w, i + 8, j + 22, k + 3, air, 0);
		b(w, i + 8, j + 22, k + 4, air, 0);
		b(w, i + 8, j + 22, k + 5, air, 0);
		b(w, i + 8, j + 22, k + 6, air, 0);
		b(w, i + 8, j + 22, k + 7, air, 0);
		b(w, i + 8, j + 22, k + 8, air, 0);
		b(w, i + 8, j + 22, k + 9, air, 0);
		b(w, i + 8, j + 22, k + 10, air, 0);
		b(w, i + 8, j + 22, k + 11, air, 0);
		b(w, i + 8, j + 22, k + 12, air, 0);
		b(w, i + 8, j + 22, k + 13, air, 0);
		b(w, i + 8, j + 22, k + 14, air, 0);
		b(w, i + 8, j + 22, k + 15, air, 0);
		b(w, i + 8, j + 23, k, air, 0);
		b(w, i + 8, j + 23, k + 1, air, 0);
		b(w, i + 8, j + 23, k + 2, air, 0);
		b(w, i + 8, j + 23, k + 3, air, 0);
		b(w, i + 8, j + 23, k + 4, air, 0);
		b(w, i + 8, j + 23, k + 5, air, 0);
		b(w, i + 8, j + 23, k + 6, air, 0);
		b(w, i + 8, j + 23, k + 7, air, 0);
		b(w, i + 8, j + 23, k + 8, air, 0);
		b(w, i + 8, j + 23, k + 9, air, 0);
		b(w, i + 8, j + 23, k + 10, air, 0);
		b(w, i + 8, j + 23, k + 11, air, 0);
		b(w, i + 8, j + 23, k + 12, air, 0);
		b(w, i + 8, j + 23, k + 13, air, 0);
		b(w, i + 8, j + 23, k + 14, air, 0);
		b(w, i + 8, j + 23, k + 15, air, 0);
		b(w, i + 8, j + 24, k, air, 0);
		b(w, i + 8, j + 24, k + 1, air, 0);
		b(w, i + 8, j + 24, k + 2, air, 0);
		b(w, i + 8, j + 24, k + 3, air, 0);
		b(w, i + 8, j + 24, k + 4, air, 0);
		b(w, i + 8, j + 24, k + 5, air, 0);
		b(w, i + 8, j + 24, k + 6, air, 0);
		b(w, i + 8, j + 24, k + 7, air, 0);
		b(w, i + 8, j + 24, k + 8, air, 0);
		b(w, i + 8, j + 24, k + 9, air, 0);
		b(w, i + 8, j + 24, k + 10, air, 0);
		b(w, i + 8, j + 24, k + 11, air, 0);
		b(w, i + 8, j + 24, k + 12, air, 0);
		b(w, i + 8, j + 24, k + 13, air, 0);
		b(w, i + 8, j + 24, k + 14, air, 0);
		b(w, i + 8, j + 24, k + 15, air, 0);
		b(w, i + 8, j + 25, k, air, 0);
		b(w, i + 8, j + 25, k + 1, air, 0);
		b(w, i + 8, j + 25, k + 2, air, 0);
		b(w, i + 8, j + 25, k + 3, air, 0);
		b(w, i + 8, j + 25, k + 4, air, 0);
		b(w, i + 8, j + 25, k + 5, air, 0);
		b(w, i + 8, j + 25, k + 6, air, 0);
		b(w, i + 8, j + 25, k + 7, air, 0);
		b(w, i + 8, j + 25, k + 8, air, 0);
		b(w, i + 8, j + 25, k + 9, air, 0);
		b(w, i + 8, j + 25, k + 10, air, 0);
		b(w, i + 8, j + 25, k + 11, air, 0);
		b(w, i + 8, j + 25, k + 12, air, 0);
		b(w, i + 8, j + 25, k + 13, air, 0);
		b(w, i + 8, j + 25, k + 14, air, 0);
		b(w, i + 8, j + 25, k + 15, air, 0);
		b(w, i + 8, j + 26, k, air, 0);
		b(w, i + 8, j + 26, k + 1, air, 0);
		b(w, i + 8, j + 26, k + 2, air, 0);
		b(w, i + 8, j + 26, k + 3, air, 0);
		b(w, i + 8, j + 26, k + 4, air, 0);
		b(w, i + 8, j + 26, k + 5, air, 0);
		b(w, i + 8, j + 26, k + 6, air, 0);
		b(w, i + 8, j + 26, k + 7, air, 0);
		b(w, i + 8, j + 26, k + 8, air, 0);
		b(w, i + 8, j + 26, k + 9, air, 0);
		b(w, i + 8, j + 26, k + 10, air, 0);
		b(w, i + 8, j + 26, k + 11, air, 0);
		b(w, i + 8, j + 26, k + 12, air, 0);
		b(w, i + 8, j + 26, k + 13, air, 0);
		b(w, i + 8, j + 26, k + 14, air, 0);
		b(w, i + 8, j + 26, k + 15, air, 0);
		b(w, i + 8, j + 27, k, air, 0);
		b(w, i + 8, j + 27, k + 1, air, 0);
		b(w, i + 8, j + 27, k + 2, air, 0);
		b(w, i + 8, j + 27, k + 3, air, 0);
		b(w, i + 8, j + 27, k + 4, air, 0);
		b(w, i + 8, j + 27, k + 5, air, 0);
		b(w, i + 8, j + 27, k + 6, air, 0);
		b(w, i + 8, j + 27, k + 7, air, 0);
		b(w, i + 8, j + 27, k + 8, air, 0);
		b(w, i + 8, j + 27, k + 9, air, 0);
		b(w, i + 8, j + 27, k + 10, air, 0);
		b(w, i + 8, j + 27, k + 11, air, 0);
		b(w, i + 8, j + 27, k + 12, air, 0);
		b(w, i + 8, j + 27, k + 13, air, 0);
		b(w, i + 8, j + 27, k + 14, air, 0);
		b(w, i + 8, j + 27, k + 15, air, 0);
		b(w, i + 8, j + 28, k, air, 0);
		b(w, i + 8, j + 28, k + 1, air, 0);
		b(w, i + 8, j + 28, k + 2, air, 0);
		b(w, i + 8, j + 28, k + 3, air, 0);
		b(w, i + 8, j + 28, k + 4, air, 0);
		b(w, i + 8, j + 28, k + 5, air, 0);
		b(w, i + 8, j + 28, k + 6, air, 0);
		b(w, i + 8, j + 28, k + 7, air, 0);
		b(w, i + 8, j + 28, k + 8, air, 0);
		b(w, i + 8, j + 28, k + 9, air, 0);
		b(w, i + 8, j + 28, k + 10, air, 0);
		b(w, i + 8, j + 28, k + 11, air, 0);
		b(w, i + 8, j + 28, k + 12, air, 0);
		b(w, i + 8, j + 28, k + 13, air, 0);
		b(w, i + 8, j + 28, k + 14, air, 0);
		b(w, i + 8, j + 28, k + 15, air, 0);
		b(w, i + 9, j, k, blockTatooineSand, 0);
		b(w, i + 9, j, k + 1, blockTatooineSand, 0);
		b(w, i + 9, j, k + 2, blockTatooineSand, 0);
		b(w, i + 9, j, k + 3, blockTatooineSand, 0);
		b(w, i + 9, j, k + 4, blockTatooineSand, 0);
		b(w, i + 9, j, k + 5, blockTatooineSand, 0);
		b(w, i + 9, j, k + 6, blockTatooineSand, 0);
		b(w, i + 9, j, k + 7, blockTatooineSand, 0);
		b(w, i + 9, j, k + 8, blockTatooineSand, 0);
		b(w, i + 9, j, k + 9, blockTatooineSand, 0);
		b(w, i + 9, j, k + 10, blockTatooineSand, 0);
		b(w, i + 9, j, k + 11, blockTatooineSand, 0);
		b(w, i + 9, j, k + 12, blockTatooineSand, 0);
		b(w, i + 9, j, k + 13, blockTatooineSand, 0);
		b(w, i + 9, j, k + 14, blockTatooineSand, 0);
		b(w, i + 9, j, k + 15, blockTatooineSand, 0);
		b(w, i + 9, j + 1, k, sandstone, 0);
		b(w, i + 9, j + 1, k + 1, sandstone, 0);
		b(w, i + 9, j + 1, k + 2, sandstone, 0);
		b(w, i + 9, j + 1, k + 3, sandstone, 0);
		b(w, i + 9, j + 1, k + 4, sandstone, 0);
		b(w, i + 9, j + 1, k + 5, sandstone, 0);
		b(w, i + 9, j + 1, k + 6, sandstone, 0);
		b(w, i + 9, j + 1, k + 7, sandstone, 0);
		b(w, i + 9, j + 1, k + 8, sandstone, 0);
		b(w, i + 9, j + 1, k + 9, sandstone, 0);
		b(w, i + 9, j + 1, k + 10, air, 0);
		b(w, i + 9, j + 1, k + 11, air, 0);
		b(w, i + 9, j + 1, k + 12, air, 0);
		b(w, i + 9, j + 1, k + 13, air, 0);
		b(w, i + 9, j + 1, k + 14, sandstone, 0);
		b(w, i + 9, j + 1, k + 15, air, 0);
		b(w, i + 9, j + 2, k, air, 0);
		b(w, i + 9, j + 2, k + 1, air, 0);
		b(w, i + 9, j + 2, k + 2, air, 0);
		b(w, i + 9, j + 2, k + 3, air, 0);
		b(w, i + 9, j + 2, k + 4, air, 0);
		b(w, i + 9, j + 2, k + 5, air, 0);
		b(w, i + 9, j + 2, k + 6, air, 0);
		b(w, i + 9, j + 2, k + 7, sandstone, 0);
		b(w, i + 9, j + 2, k + 8, sandstone, 0);
		b(w, i + 9, j + 2, k + 9, sandstone, 0);
		b(w, i + 9, j + 2, k + 10, air, 0);
		b(w, i + 9, j + 2, k + 11, air, 0);
		b(w, i + 9, j + 2, k + 12, air, 0);
		b(w, i + 9, j + 2, k + 13, air, 0);
		b(w, i + 9, j + 2, k + 14, sandstone, 0);
		b(w, i + 9, j + 2, k + 15, air, 0);
		b(w, i + 9, j + 3, k, air, 0);
		b(w, i + 9, j + 3, k + 1, air, 0);
		b(w, i + 9, j + 3, k + 2, air, 0);
		b(w, i + 9, j + 3, k + 3, air, 0);
		b(w, i + 9, j + 3, k + 4, air, 0);
		b(w, i + 9, j + 3, k + 5, air, 0);
		b(w, i + 9, j + 3, k + 6, air, 0);
		b(w, i + 9, j + 3, k + 7, sandstone, 0);
		b(w, i + 9, j + 3, k + 8, sandstone, 0);
		b(w, i + 9, j + 3, k + 9, sandstone, 0);
		b(w, i + 9, j + 3, k + 10, air, 0);
		b(w, i + 9, j + 3, k + 11, air, 0);
		b(w, i + 9, j + 3, k + 12, air, 0);
		b(w, i + 9, j + 3, k + 13, air, 0);
		b(w, i + 9, j + 3, k + 14, sandstone, 0);
		b(w, i + 9, j + 3, k + 15, air, 0);
		b(w, i + 9, j + 4, k, air, 0);
		b(w, i + 9, j + 4, k + 1, air, 0);
		b(w, i + 9, j + 4, k + 2, air, 0);
		b(w, i + 9, j + 4, k + 3, air, 0);
		b(w, i + 9, j + 4, k + 4, air, 0);
		b(w, i + 9, j + 4, k + 5, air, 0);
		b(w, i + 9, j + 4, k + 6, air, 0);
		b(w, i + 9, j + 4, k + 7, sandstone, 0);
		b(w, i + 9, j + 4, k + 8, sandstone, 0);
		b(w, i + 9, j + 4, k + 9, sandstone, 0);
		b(w, i + 9, j + 4, k + 10, air, 0);
		b(w, i + 9, j + 4, k + 11, air, 0);
		b(w, i + 9, j + 4, k + 12, air, 0);
		b(w, i + 9, j + 4, k + 13, air, 0);
		b(w, i + 9, j + 4, k + 14, sandstone, 0);
		b(w, i + 9, j + 4, k + 15, air, 0);
		b(w, i + 9, j + 5, k, air, 0);
		b(w, i + 9, j + 5, k + 1, air, 0);
		b(w, i + 9, j + 5, k + 2, air, 0);
		b(w, i + 9, j + 5, k + 3, air, 0);
		b(w, i + 9, j + 5, k + 4, air, 0);
		b(w, i + 9, j + 5, k + 5, air, 0);
		b(w, i + 9, j + 5, k + 6, air, 0);
		b(w, i + 9, j + 5, k + 7, sandstone, 0);
		b(w, i + 9, j + 5, k + 8, sandstone, 0);
		b(w, i + 9, j + 5, k + 9, sandstone, 0);
		b(w, i + 9, j + 5, k + 10, air, 0);
		b(w, i + 9, j + 5, k + 11, air, 0);
		b(w, i + 9, j + 5, k + 12, air, 0);
		b(w, i + 9, j + 5, k + 13, air, 0);
		b(w, i + 9, j + 5, k + 14, sandstone, 0);
		b(w, i + 9, j + 5, k + 15, air, 0);
		b(w, i + 9, j + 6, k, air, 0);
		b(w, i + 9, j + 6, k + 1, air, 0);
		b(w, i + 9, j + 6, k + 2, air, 0);
		b(w, i + 9, j + 6, k + 3, air, 0);
		b(w, i + 9, j + 6, k + 4, air, 0);
		b(w, i + 9, j + 6, k + 5, air, 0);
		b(w, i + 9, j + 6, k + 6, air, 0);
		b(w, i + 9, j + 6, k + 7, sandstone, 0);
		b(w, i + 9, j + 6, k + 8, sandstone, 0);
		b(w, i + 9, j + 6, k + 9, sandstone, 0);
		b(w, i + 9, j + 6, k + 10, sandstone, 0);
		b(w, i + 9, j + 6, k + 11, sandstone, 0);
		b(w, i + 9, j + 6, k + 12, sandstone, 0);
		b(w, i + 9, j + 6, k + 13, sandstone, 0);
		b(w, i + 9, j + 6, k + 14, sandstone, 0);
		b(w, i + 9, j + 6, k + 15, air, 0);
		b(w, i + 9, j + 7, k, air, 0);
		b(w, i + 9, j + 7, k + 1, air, 0);
		b(w, i + 9, j + 7, k + 2, air, 0);
		b(w, i + 9, j + 7, k + 3, air, 0);
		b(w, i + 9, j + 7, k + 4, air, 0);
		b(w, i + 9, j + 7, k + 5, air, 0);
		b(w, i + 9, j + 7, k + 6, air, 0);
		b(w, i + 9, j + 7, k + 7, sandstone, 0);
		b(w, i + 9, j + 7, k + 8, sandstone, 0);
		b(w, i + 9, j + 7, k + 9, sandstone_stairs, 0);
		m(w, i + 9, j + 7, k + 9, 3);
		b(w, i + 9, j + 7, k + 10, air, 0);
		b(w, i + 9, j + 7, k + 11, air, 0);
		b(w, i + 9, j + 7, k + 12, air, 0);
		b(w, i + 9, j + 7, k + 13, air, 0);
		b(w, i + 9, j + 7, k + 14, air, 0);
		b(w, i + 9, j + 7, k + 15, air, 0);
		b(w, i + 9, j + 8, k, air, 0);
		b(w, i + 9, j + 8, k + 1, air, 0);
		b(w, i + 9, j + 8, k + 2, air, 0);
		b(w, i + 9, j + 8, k + 3, air, 0);
		b(w, i + 9, j + 8, k + 4, air, 0);
		b(w, i + 9, j + 8, k + 5, sandstone, 0);
		b(w, i + 9, j + 8, k + 6, sandstone, 0);
		b(w, i + 9, j + 8, k + 7, sandstone, 0);
		b(w, i + 9, j + 8, k + 8, sandstone, 0);
		b(w, i + 9, j + 8, k + 9, air, 0);
		b(w, i + 9, j + 8, k + 10, air, 0);
		b(w, i + 9, j + 8, k + 11, air, 0);
		b(w, i + 9, j + 8, k + 12, air, 0);
		b(w, i + 9, j + 8, k + 13, air, 0);
		b(w, i + 9, j + 8, k + 14, air, 0);
		b(w, i + 9, j + 8, k + 15, air, 0);
		b(w, i + 9, j + 9, k, air, 0);
		b(w, i + 9, j + 9, k + 1, air, 0);
		b(w, i + 9, j + 9, k + 2, air, 0);
		b(w, i + 9, j + 9, k + 3, air, 0);
		b(w, i + 9, j + 9, k + 4, air, 0);
		b(w, i + 9, j + 9, k + 5, stone_slab, 0);
		m(w, i + 9, j + 9, k + 5, 1);
		b(w, i + 9, j + 9, k + 6, stone_slab, 0);
		m(w, i + 9, j + 9, k + 6, 1);
		b(w, i + 9, j + 9, k + 7, air, 0);
		b(w, i + 9, j + 9, k + 8, air, 0);
		b(w, i + 9, j + 9, k + 9, air, 0);
		b(w, i + 9, j + 9, k + 10, air, 0);
		b(w, i + 9, j + 9, k + 11, air, 0);
		b(w, i + 9, j + 9, k + 12, air, 0);
		b(w, i + 9, j + 9, k + 13, air, 0);
		b(w, i + 9, j + 9, k + 14, air, 0);
		b(w, i + 9, j + 9, k + 15, air, 0);
		b(w, i + 9, j + 10, k, air, 0);
		b(w, i + 9, j + 10, k + 1, air, 0);
		b(w, i + 9, j + 10, k + 2, air, 0);
		b(w, i + 9, j + 10, k + 3, air, 0);
		b(w, i + 9, j + 10, k + 4, air, 0);
		b(w, i + 9, j + 10, k + 5, air, 0);
		b(w, i + 9, j + 10, k + 6, air, 0);
		b(w, i + 9, j + 10, k + 7, air, 0);
		b(w, i + 9, j + 10, k + 8, air, 0);
		b(w, i + 9, j + 10, k + 9, air, 0);
		b(w, i + 9, j + 10, k + 10, air, 0);
		b(w, i + 9, j + 10, k + 11, air, 0);
		b(w, i + 9, j + 10, k + 12, air, 0);
		b(w, i + 9, j + 10, k + 13, air, 0);
		b(w, i + 9, j + 10, k + 14, air, 0);
		b(w, i + 9, j + 10, k + 15, air, 0);
		b(w, i + 9, j + 11, k, air, 0);
		b(w, i + 9, j + 11, k + 1, air, 0);
		b(w, i + 9, j + 11, k + 2, air, 0);
		b(w, i + 9, j + 11, k + 3, air, 0);
		b(w, i + 9, j + 11, k + 4, air, 0);
		b(w, i + 9, j + 11, k + 5, air, 0);
		b(w, i + 9, j + 11, k + 6, air, 0);
		b(w, i + 9, j + 11, k + 7, air, 0);
		b(w, i + 9, j + 11, k + 8, air, 0);
		b(w, i + 9, j + 11, k + 9, air, 0);
		b(w, i + 9, j + 11, k + 10, air, 0);
		b(w, i + 9, j + 11, k + 11, air, 0);
		b(w, i + 9, j + 11, k + 12, air, 0);
		b(w, i + 9, j + 11, k + 13, air, 0);
		b(w, i + 9, j + 11, k + 14, air, 0);
		b(w, i + 9, j + 11, k + 15, air, 0);
		b(w, i + 9, j + 12, k, air, 0);
		b(w, i + 9, j + 12, k + 1, air, 0);
		b(w, i + 9, j + 12, k + 2, air, 0);
		b(w, i + 9, j + 12, k + 3, air, 0);
		b(w, i + 9, j + 12, k + 4, air, 0);
		b(w, i + 9, j + 12, k + 5, air, 0);
		b(w, i + 9, j + 12, k + 6, air, 0);
		b(w, i + 9, j + 12, k + 7, air, 0);
		b(w, i + 9, j + 12, k + 8, air, 0);
		b(w, i + 9, j + 12, k + 9, air, 0);
		b(w, i + 9, j + 12, k + 10, air, 0);
		b(w, i + 9, j + 12, k + 11, air, 0);
		b(w, i + 9, j + 12, k + 12, air, 0);
		b(w, i + 9, j + 12, k + 13, air, 0);
		b(w, i + 9, j + 12, k + 14, air, 0);
		b(w, i + 9, j + 12, k + 15, air, 0);
		b(w, i + 9, j + 13, k, air, 0);
		b(w, i + 9, j + 13, k + 1, air, 0);
		b(w, i + 9, j + 13, k + 2, air, 0);
		b(w, i + 9, j + 13, k + 3, air, 0);
		b(w, i + 9, j + 13, k + 4, air, 0);
		b(w, i + 9, j + 13, k + 5, air, 0);
		b(w, i + 9, j + 13, k + 6, air, 0);
		b(w, i + 9, j + 13, k + 7, air, 0);
		b(w, i + 9, j + 13, k + 8, air, 0);
		b(w, i + 9, j + 13, k + 9, air, 0);
		b(w, i + 9, j + 13, k + 10, air, 0);
		b(w, i + 9, j + 13, k + 11, air, 0);
		b(w, i + 9, j + 13, k + 12, air, 0);
		b(w, i + 9, j + 13, k + 13, air, 0);
		b(w, i + 9, j + 13, k + 14, air, 0);
		b(w, i + 9, j + 13, k + 15, air, 0);
		b(w, i + 9, j + 14, k, air, 0);
		b(w, i + 9, j + 14, k + 1, air, 0);
		b(w, i + 9, j + 14, k + 2, air, 0);
		b(w, i + 9, j + 14, k + 3, air, 0);
		b(w, i + 9, j + 14, k + 4, air, 0);
		b(w, i + 9, j + 14, k + 5, air, 0);
		b(w, i + 9, j + 14, k + 6, air, 0);
		b(w, i + 9, j + 14, k + 7, air, 0);
		b(w, i + 9, j + 14, k + 8, air, 0);
		b(w, i + 9, j + 14, k + 9, air, 0);
		b(w, i + 9, j + 14, k + 10, air, 0);
		b(w, i + 9, j + 14, k + 11, air, 0);
		b(w, i + 9, j + 14, k + 12, air, 0);
		b(w, i + 9, j + 14, k + 13, air, 0);
		b(w, i + 9, j + 14, k + 14, air, 0);
		b(w, i + 9, j + 14, k + 15, air, 0);
		b(w, i + 9, j + 15, k, air, 0);
		b(w, i + 9, j + 15, k + 1, air, 0);
		b(w, i + 9, j + 15, k + 2, air, 0);
		b(w, i + 9, j + 15, k + 3, air, 0);
		b(w, i + 9, j + 15, k + 4, air, 0);
		b(w, i + 9, j + 15, k + 5, air, 0);
		b(w, i + 9, j + 15, k + 6, air, 0);
		b(w, i + 9, j + 15, k + 7, air, 0);
		b(w, i + 9, j + 15, k + 8, air, 0);
		b(w, i + 9, j + 15, k + 9, air, 0);
		b(w, i + 9, j + 15, k + 10, air, 0);
		b(w, i + 9, j + 15, k + 11, air, 0);
		b(w, i + 9, j + 15, k + 12, air, 0);
		b(w, i + 9, j + 15, k + 13, air, 0);
		b(w, i + 9, j + 15, k + 14, air, 0);
		b(w, i + 9, j + 15, k + 15, air, 0);
		b(w, i + 9, j + 16, k, air, 0);
		b(w, i + 9, j + 16, k + 1, air, 0);
		b(w, i + 9, j + 16, k + 2, air, 0);
		b(w, i + 9, j + 16, k + 3, air, 0);
		b(w, i + 9, j + 16, k + 4, air, 0);
		b(w, i + 9, j + 16, k + 5, air, 0);
		b(w, i + 9, j + 16, k + 6, air, 0);
		b(w, i + 9, j + 16, k + 7, air, 0);
		b(w, i + 9, j + 16, k + 8, air, 0);
		b(w, i + 9, j + 16, k + 9, air, 0);
		b(w, i + 9, j + 16, k + 10, air, 0);
		b(w, i + 9, j + 16, k + 11, air, 0);
		b(w, i + 9, j + 16, k + 12, air, 0);
		b(w, i + 9, j + 16, k + 13, air, 0);
		b(w, i + 9, j + 16, k + 14, air, 0);
		b(w, i + 9, j + 16, k + 15, air, 0);
		b(w, i + 9, j + 17, k, air, 0);
		b(w, i + 9, j + 17, k + 1, air, 0);
		b(w, i + 9, j + 17, k + 2, air, 0);
		b(w, i + 9, j + 17, k + 3, air, 0);
		b(w, i + 9, j + 17, k + 4, air, 0);
		b(w, i + 9, j + 17, k + 5, air, 0);
		b(w, i + 9, j + 17, k + 6, air, 0);
		b(w, i + 9, j + 17, k + 7, air, 0);
		b(w, i + 9, j + 17, k + 8, air, 0);
		b(w, i + 9, j + 17, k + 9, air, 0);
		b(w, i + 9, j + 17, k + 10, air, 0);
		b(w, i + 9, j + 17, k + 11, air, 0);
		b(w, i + 9, j + 17, k + 12, air, 0);
		b(w, i + 9, j + 17, k + 13, air, 0);
		b(w, i + 9, j + 17, k + 14, air, 0);
		b(w, i + 9, j + 17, k + 15, air, 0);
		b(w, i + 9, j + 18, k, air, 0);
		b(w, i + 9, j + 18, k + 1, air, 0);
		b(w, i + 9, j + 18, k + 2, air, 0);
		b(w, i + 9, j + 18, k + 3, air, 0);
		b(w, i + 9, j + 18, k + 4, air, 0);
		b(w, i + 9, j + 18, k + 5, air, 0);
		b(w, i + 9, j + 18, k + 6, air, 0);
		b(w, i + 9, j + 18, k + 7, air, 0);
		b(w, i + 9, j + 18, k + 8, air, 0);
		b(w, i + 9, j + 18, k + 9, air, 0);
		b(w, i + 9, j + 18, k + 10, air, 0);
		b(w, i + 9, j + 18, k + 11, air, 0);
		b(w, i + 9, j + 18, k + 12, air, 0);
		b(w, i + 9, j + 18, k + 13, air, 0);
		b(w, i + 9, j + 18, k + 14, air, 0);
		b(w, i + 9, j + 18, k + 15, air, 0);
		b(w, i + 9, j + 19, k, air, 0);
		b(w, i + 9, j + 19, k + 1, air, 0);
		b(w, i + 9, j + 19, k + 2, air, 0);
		b(w, i + 9, j + 19, k + 3, air, 0);
		b(w, i + 9, j + 19, k + 4, air, 0);
		b(w, i + 9, j + 19, k + 5, air, 0);
		b(w, i + 9, j + 19, k + 6, air, 0);
		b(w, i + 9, j + 19, k + 7, air, 0);
		b(w, i + 9, j + 19, k + 8, air, 0);
		b(w, i + 9, j + 19, k + 9, air, 0);
		b(w, i + 9, j + 19, k + 10, air, 0);
		b(w, i + 9, j + 19, k + 11, air, 0);
		b(w, i + 9, j + 19, k + 12, air, 0);
		b(w, i + 9, j + 19, k + 13, air, 0);
		b(w, i + 9, j + 19, k + 14, air, 0);
		b(w, i + 9, j + 19, k + 15, air, 0);
		b(w, i + 9, j + 20, k, air, 0);
		b(w, i + 9, j + 20, k + 1, air, 0);
		b(w, i + 9, j + 20, k + 2, air, 0);
		b(w, i + 9, j + 20, k + 3, air, 0);
		b(w, i + 9, j + 20, k + 4, air, 0);
		b(w, i + 9, j + 20, k + 5, air, 0);
		b(w, i + 9, j + 20, k + 6, air, 0);
		b(w, i + 9, j + 20, k + 7, air, 0);
		b(w, i + 9, j + 20, k + 8, air, 0);
		b(w, i + 9, j + 20, k + 9, air, 0);
		b(w, i + 9, j + 20, k + 10, air, 0);
		b(w, i + 9, j + 20, k + 11, air, 0);
		b(w, i + 9, j + 20, k + 12, air, 0);
		generate_9(w, i, j, k);
	}

	public static void generate_9(World w, int i, int j, int k)
	{
		b(w, i + 9, j + 20, k + 13, air, 0);
		b(w, i + 9, j + 20, k + 14, air, 0);
		b(w, i + 9, j + 20, k + 15, air, 0);
		b(w, i + 9, j + 21, k, air, 0);
		b(w, i + 9, j + 21, k + 1, air, 0);
		b(w, i + 9, j + 21, k + 2, air, 0);
		b(w, i + 9, j + 21, k + 3, air, 0);
		b(w, i + 9, j + 21, k + 4, air, 0);
		b(w, i + 9, j + 21, k + 5, air, 0);
		b(w, i + 9, j + 21, k + 6, air, 0);
		b(w, i + 9, j + 21, k + 7, air, 0);
		b(w, i + 9, j + 21, k + 8, air, 0);
		b(w, i + 9, j + 21, k + 9, air, 0);
		b(w, i + 9, j + 21, k + 10, air, 0);
		b(w, i + 9, j + 21, k + 11, air, 0);
		b(w, i + 9, j + 21, k + 12, air, 0);
		b(w, i + 9, j + 21, k + 13, air, 0);
		b(w, i + 9, j + 21, k + 14, air, 0);
		b(w, i + 9, j + 21, k + 15, air, 0);
		b(w, i + 9, j + 22, k, air, 0);
		b(w, i + 9, j + 22, k + 1, air, 0);
		b(w, i + 9, j + 22, k + 2, air, 0);
		b(w, i + 9, j + 22, k + 3, air, 0);
		b(w, i + 9, j + 22, k + 4, air, 0);
		b(w, i + 9, j + 22, k + 5, air, 0);
		b(w, i + 9, j + 22, k + 6, air, 0);
		b(w, i + 9, j + 22, k + 7, air, 0);
		b(w, i + 9, j + 22, k + 8, air, 0);
		b(w, i + 9, j + 22, k + 9, air, 0);
		b(w, i + 9, j + 22, k + 10, air, 0);
		b(w, i + 9, j + 22, k + 11, air, 0);
		b(w, i + 9, j + 22, k + 12, air, 0);
		b(w, i + 9, j + 22, k + 13, air, 0);
		b(w, i + 9, j + 22, k + 14, air, 0);
		b(w, i + 9, j + 22, k + 15, air, 0);
		b(w, i + 9, j + 23, k, air, 0);
		b(w, i + 9, j + 23, k + 1, air, 0);
		b(w, i + 9, j + 23, k + 2, air, 0);
		b(w, i + 9, j + 23, k + 3, air, 0);
		b(w, i + 9, j + 23, k + 4, air, 0);
		b(w, i + 9, j + 23, k + 5, air, 0);
		b(w, i + 9, j + 23, k + 6, air, 0);
		b(w, i + 9, j + 23, k + 7, air, 0);
		b(w, i + 9, j + 23, k + 8, air, 0);
		b(w, i + 9, j + 23, k + 9, air, 0);
		b(w, i + 9, j + 23, k + 10, air, 0);
		b(w, i + 9, j + 23, k + 11, air, 0);
		b(w, i + 9, j + 23, k + 12, air, 0);
		b(w, i + 9, j + 23, k + 13, air, 0);
		b(w, i + 9, j + 23, k + 14, air, 0);
		b(w, i + 9, j + 23, k + 15, air, 0);
		b(w, i + 9, j + 24, k, air, 0);
		b(w, i + 9, j + 24, k + 1, air, 0);
		b(w, i + 9, j + 24, k + 2, air, 0);
		b(w, i + 9, j + 24, k + 3, air, 0);
		b(w, i + 9, j + 24, k + 4, air, 0);
		b(w, i + 9, j + 24, k + 5, air, 0);
		b(w, i + 9, j + 24, k + 6, air, 0);
		b(w, i + 9, j + 24, k + 7, air, 0);
		b(w, i + 9, j + 24, k + 8, air, 0);
		b(w, i + 9, j + 24, k + 9, air, 0);
		b(w, i + 9, j + 24, k + 10, air, 0);
		b(w, i + 9, j + 24, k + 11, air, 0);
		b(w, i + 9, j + 24, k + 12, air, 0);
		b(w, i + 9, j + 24, k + 13, air, 0);
		b(w, i + 9, j + 24, k + 14, air, 0);
		b(w, i + 9, j + 24, k + 15, air, 0);
		b(w, i + 9, j + 25, k, air, 0);
		b(w, i + 9, j + 25, k + 1, air, 0);
		b(w, i + 9, j + 25, k + 2, air, 0);
		b(w, i + 9, j + 25, k + 3, air, 0);
		b(w, i + 9, j + 25, k + 4, air, 0);
		b(w, i + 9, j + 25, k + 5, air, 0);
		b(w, i + 9, j + 25, k + 6, air, 0);
		b(w, i + 9, j + 25, k + 7, air, 0);
		b(w, i + 9, j + 25, k + 8, air, 0);
		b(w, i + 9, j + 25, k + 9, air, 0);
		b(w, i + 9, j + 25, k + 10, air, 0);
		b(w, i + 9, j + 25, k + 11, air, 0);
		b(w, i + 9, j + 25, k + 12, air, 0);
		b(w, i + 9, j + 25, k + 13, air, 0);
		b(w, i + 9, j + 25, k + 14, air, 0);
		b(w, i + 9, j + 25, k + 15, air, 0);
		b(w, i + 9, j + 26, k, air, 0);
		b(w, i + 9, j + 26, k + 1, air, 0);
		b(w, i + 9, j + 26, k + 2, air, 0);
		b(w, i + 9, j + 26, k + 3, air, 0);
		b(w, i + 9, j + 26, k + 4, air, 0);
		b(w, i + 9, j + 26, k + 5, air, 0);
		b(w, i + 9, j + 26, k + 6, air, 0);
		b(w, i + 9, j + 26, k + 7, air, 0);
		b(w, i + 9, j + 26, k + 8, air, 0);
		b(w, i + 9, j + 26, k + 9, air, 0);
		b(w, i + 9, j + 26, k + 10, air, 0);
		b(w, i + 9, j + 26, k + 11, air, 0);
		b(w, i + 9, j + 26, k + 12, air, 0);
		b(w, i + 9, j + 26, k + 13, air, 0);
		b(w, i + 9, j + 26, k + 14, air, 0);
		b(w, i + 9, j + 26, k + 15, air, 0);
		b(w, i + 9, j + 27, k, air, 0);
		b(w, i + 9, j + 27, k + 1, air, 0);
		b(w, i + 9, j + 27, k + 2, air, 0);
		b(w, i + 9, j + 27, k + 3, air, 0);
		b(w, i + 9, j + 27, k + 4, air, 0);
		b(w, i + 9, j + 27, k + 5, air, 0);
		b(w, i + 9, j + 27, k + 6, air, 0);
		b(w, i + 9, j + 27, k + 7, air, 0);
		b(w, i + 9, j + 27, k + 8, air, 0);
		b(w, i + 9, j + 27, k + 9, air, 0);
		b(w, i + 9, j + 27, k + 10, air, 0);
		b(w, i + 9, j + 27, k + 11, air, 0);
		b(w, i + 9, j + 27, k + 12, air, 0);
		b(w, i + 9, j + 27, k + 13, air, 0);
		b(w, i + 9, j + 27, k + 14, air, 0);
		b(w, i + 9, j + 27, k + 15, air, 0);
		b(w, i + 9, j + 28, k, air, 0);
		b(w, i + 9, j + 28, k + 1, air, 0);
		b(w, i + 9, j + 28, k + 2, air, 0);
		b(w, i + 9, j + 28, k + 3, air, 0);
		b(w, i + 9, j + 28, k + 4, air, 0);
		b(w, i + 9, j + 28, k + 5, air, 0);
		b(w, i + 9, j + 28, k + 6, air, 0);
		b(w, i + 9, j + 28, k + 7, air, 0);
		b(w, i + 9, j + 28, k + 8, air, 0);
		b(w, i + 9, j + 28, k + 9, air, 0);
		b(w, i + 9, j + 28, k + 10, air, 0);
		b(w, i + 9, j + 28, k + 11, air, 0);
		b(w, i + 9, j + 28, k + 12, air, 0);
		b(w, i + 9, j + 28, k + 13, air, 0);
		b(w, i + 9, j + 28, k + 14, air, 0);
		b(w, i + 9, j + 28, k + 15, air, 0);
		b(w, i + 10, j, k, blockTatooineSand, 0);
		b(w, i + 10, j, k + 1, blockTatooineSand, 0);
		b(w, i + 10, j, k + 2, blockTatooineSand, 0);
		b(w, i + 10, j, k + 3, blockTatooineSand, 0);
		b(w, i + 10, j, k + 4, blockTatooineSand, 0);
		b(w, i + 10, j, k + 5, blockTatooineSand, 0);
		b(w, i + 10, j, k + 6, blockTatooineSand, 0);
		b(w, i + 10, j, k + 7, blockTatooineSand, 0);
		b(w, i + 10, j, k + 8, blockTatooineSand, 0);
		b(w, i + 10, j, k + 9, blockTatooineSand, 0);
		b(w, i + 10, j, k + 10, blockTatooineSand, 0);
		b(w, i + 10, j, k + 11, blockTatooineSand, 0);
		b(w, i + 10, j, k + 12, blockTatooineSand, 0);
		b(w, i + 10, j, k + 13, blockTatooineSand, 0);
		b(w, i + 10, j, k + 14, blockTatooineSand, 0);
		b(w, i + 10, j, k + 15, blockTatooineSand, 0);
		b(w, i + 10, j + 1, k, sandstone_stairs, 0);
		m(w, i + 10, j + 1, k, 1);
		b(w, i + 10, j + 1, k + 1, sandstone_stairs, 0);
		m(w, i + 10, j + 1, k + 1, 1);
		b(w, i + 10, j + 1, k + 2, sandstone_stairs, 0);
		m(w, i + 10, j + 1, k + 2, 1);
		b(w, i + 10, j + 1, k + 3, sandstone, 0);
		b(w, i + 10, j + 1, k + 4, sandstone, 0);
		b(w, i + 10, j + 1, k + 5, sandstone, 0);
		b(w, i + 10, j + 1, k + 6, sandstone, 0);
		b(w, i + 10, j + 1, k + 7, sandstone, 0);
		b(w, i + 10, j + 1, k + 8, sandstone, 0);
		b(w, i + 10, j + 1, k + 9, sandstone_stairs, 0);
		m(w, i + 10, j + 1, k + 9, 3);
		b(w, i + 10, j + 1, k + 10, air, 0);
		b(w, i + 10, j + 1, k + 11, air, 0);
		b(w, i + 10, j + 1, k + 12, air, 0);
		b(w, i + 10, j + 1, k + 13, air, 0);
		b(w, i + 10, j + 1, k + 14, sandstone, 0);
		b(w, i + 10, j + 1, k + 15, air, 0);
		b(w, i + 10, j + 2, k, air, 0);
		b(w, i + 10, j + 2, k + 1, air, 0);
		b(w, i + 10, j + 2, k + 2, air, 0);
		b(w, i + 10, j + 2, k + 3, air, 0);
		b(w, i + 10, j + 2, k + 4, air, 0);
		b(w, i + 10, j + 2, k + 5, air, 0);
		b(w, i + 10, j + 2, k + 6, air, 0);
		b(w, i + 10, j + 2, k + 7, sandstone_stairs, 0);
		m(w, i + 10, j + 2, k + 7, 2);
		b(w, i + 10, j + 2, k + 8, sandstone, 0);
		b(w, i + 10, j + 2, k + 9, air, 0);
		b(w, i + 10, j + 2, k + 10, air, 0);
		b(w, i + 10, j + 2, k + 11, air, 0);
		b(w, i + 10, j + 2, k + 12, air, 0);
		b(w, i + 10, j + 2, k + 13, air, 0);
		b(w, i + 10, j + 2, k + 14, sandstone, 0);
		b(w, i + 10, j + 2, k + 15, air, 0);
		b(w, i + 10, j + 3, k, air, 0);
		b(w, i + 10, j + 3, k + 1, air, 0);
		b(w, i + 10, j + 3, k + 2, air, 0);
		b(w, i + 10, j + 3, k + 3, air, 0);
		b(w, i + 10, j + 3, k + 4, air, 0);
		b(w, i + 10, j + 3, k + 5, air, 0);
		b(w, i + 10, j + 3, k + 6, air, 0);
		b(w, i + 10, j + 3, k + 7, air, 0);
		b(w, i + 10, j + 3, k + 8, sandstone, 0);
		b(w, i + 10, j + 3, k + 9, air, 0);
		b(w, i + 10, j + 3, k + 10, air, 0);
		b(w, i + 10, j + 3, k + 11, air, 0);
		b(w, i + 10, j + 3, k + 12, air, 0);
		b(w, i + 10, j + 3, k + 13, air, 0);
		b(w, i + 10, j + 3, k + 14, sandstone, 0);
		b(w, i + 10, j + 3, k + 15, air, 0);
		b(w, i + 10, j + 4, k, air, 0);
		b(w, i + 10, j + 4, k + 1, air, 0);
		b(w, i + 10, j + 4, k + 2, air, 0);
		b(w, i + 10, j + 4, k + 3, air, 0);
		b(w, i + 10, j + 4, k + 4, air, 0);
		b(w, i + 10, j + 4, k + 5, air, 0);
		b(w, i + 10, j + 4, k + 6, air, 0);
		b(w, i + 10, j + 4, k + 7, air, 0);
		b(w, i + 10, j + 4, k + 8, sandstone, 0);
		b(w, i + 10, j + 4, k + 9, air, 0);
		b(w, i + 10, j + 4, k + 10, air, 0);
		b(w, i + 10, j + 4, k + 11, air, 0);
		b(w, i + 10, j + 4, k + 12, air, 0);
		b(w, i + 10, j + 4, k + 13, air, 0);
		b(w, i + 10, j + 4, k + 14, sandstone, 0);
		b(w, i + 10, j + 4, k + 15, air, 0);
		b(w, i + 10, j + 5, k, air, 0);
		b(w, i + 10, j + 5, k + 1, air, 0);
		b(w, i + 10, j + 5, k + 2, air, 0);
		b(w, i + 10, j + 5, k + 3, air, 0);
		b(w, i + 10, j + 5, k + 4, air, 0);
		b(w, i + 10, j + 5, k + 5, air, 0);
		b(w, i + 10, j + 5, k + 6, air, 0);
		b(w, i + 10, j + 5, k + 7, air, 0);
		b(w, i + 10, j + 5, k + 8, sandstone, 0);
		b(w, i + 10, j + 5, k + 9, air, 0);
		b(w, i + 10, j + 5, k + 10, air, 0);
		b(w, i + 10, j + 5, k + 11, air, 0);
		b(w, i + 10, j + 5, k + 12, air, 0);
		b(w, i + 10, j + 5, k + 13, air, 0);
		b(w, i + 10, j + 5, k + 14, sandstone, 0);
		b(w, i + 10, j + 5, k + 15, air, 0);
		b(w, i + 10, j + 6, k, air, 0);
		b(w, i + 10, j + 6, k + 1, air, 0);
		b(w, i + 10, j + 6, k + 2, air, 0);
		b(w, i + 10, j + 6, k + 3, air, 0);
		b(w, i + 10, j + 6, k + 4, air, 0);
		b(w, i + 10, j + 6, k + 5, air, 0);
		b(w, i + 10, j + 6, k + 6, air, 0);
		b(w, i + 10, j + 6, k + 7, air, 0);
		b(w, i + 10, j + 6, k + 8, sandstone, 0);
		b(w, i + 10, j + 6, k + 9, sandstone, 0);
		b(w, i + 10, j + 6, k + 10, sandstone, 0);
		b(w, i + 10, j + 6, k + 11, sandstone, 0);
		b(w, i + 10, j + 6, k + 12, sandstone, 0);
		b(w, i + 10, j + 6, k + 13, sandstone, 0);
		b(w, i + 10, j + 6, k + 14, sandstone, 0);
		b(w, i + 10, j + 6, k + 15, air, 0);
		b(w, i + 10, j + 7, k, air, 0);
		b(w, i + 10, j + 7, k + 1, air, 0);
		b(w, i + 10, j + 7, k + 2, air, 0);
		b(w, i + 10, j + 7, k + 3, air, 0);
		b(w, i + 10, j + 7, k + 4, air, 0);
		b(w, i + 10, j + 7, k + 5, air, 0);
		b(w, i + 10, j + 7, k + 6, air, 0);
		b(w, i + 10, j + 7, k + 7, air, 0);
		b(w, i + 10, j + 7, k + 8, sandstone, 0);
		b(w, i + 10, j + 7, k + 9, sandstone_stairs, 0);
		m(w, i + 10, j + 7, k + 9, 3);
		b(w, i + 10, j + 7, k + 10, air, 0);
		b(w, i + 10, j + 7, k + 11, air, 0);
		b(w, i + 10, j + 7, k + 12, air, 0);
		b(w, i + 10, j + 7, k + 13, air, 0);
		b(w, i + 10, j + 7, k + 14, air, 0);
		b(w, i + 10, j + 7, k + 15, air, 0);
		b(w, i + 10, j + 8, k, air, 0);
		b(w, i + 10, j + 8, k + 1, air, 0);
		b(w, i + 10, j + 8, k + 2, air, 0);
		b(w, i + 10, j + 8, k + 3, air, 0);
		b(w, i + 10, j + 8, k + 4, air, 0);
		b(w, i + 10, j + 8, k + 5, air, 0);
		b(w, i + 10, j + 8, k + 6, sandstone, 0);
		b(w, i + 10, j + 8, k + 7, sandstone, 0);
		b(w, i + 10, j + 8, k + 8, sandstone, 0);
		b(w, i + 10, j + 8, k + 9, air, 0);
		b(w, i + 10, j + 8, k + 10, air, 0);
		b(w, i + 10, j + 8, k + 11, air, 0);
		b(w, i + 10, j + 8, k + 12, air, 0);
		b(w, i + 10, j + 8, k + 13, air, 0);
		b(w, i + 10, j + 8, k + 14, air, 0);
		b(w, i + 10, j + 8, k + 15, air, 0);
		b(w, i + 10, j + 9, k, air, 0);
		b(w, i + 10, j + 9, k + 1, air, 0);
		b(w, i + 10, j + 9, k + 2, air, 0);
		b(w, i + 10, j + 9, k + 3, air, 0);
		b(w, i + 10, j + 9, k + 4, air, 0);
		b(w, i + 10, j + 9, k + 5, air, 0);
		b(w, i + 10, j + 9, k + 6, stone_slab, 0);
		m(w, i + 10, j + 9, k + 6, 1);
		b(w, i + 10, j + 9, k + 7, air, 0);
		b(w, i + 10, j + 9, k + 8, air, 0);
		b(w, i + 10, j + 9, k + 9, air, 0);
		b(w, i + 10, j + 9, k + 10, air, 0);
		b(w, i + 10, j + 9, k + 11, air, 0);
		b(w, i + 10, j + 9, k + 12, air, 0);
		b(w, i + 10, j + 9, k + 13, air, 0);
		b(w, i + 10, j + 9, k + 14, air, 0);
		b(w, i + 10, j + 9, k + 15, air, 0);
		b(w, i + 10, j + 10, k, air, 0);
		b(w, i + 10, j + 10, k + 1, air, 0);
		b(w, i + 10, j + 10, k + 2, air, 0);
		b(w, i + 10, j + 10, k + 3, air, 0);
		b(w, i + 10, j + 10, k + 4, air, 0);
		b(w, i + 10, j + 10, k + 5, air, 0);
		b(w, i + 10, j + 10, k + 6, air, 0);
		b(w, i + 10, j + 10, k + 7, air, 0);
		b(w, i + 10, j + 10, k + 8, air, 0);
		b(w, i + 10, j + 10, k + 9, air, 0);
		b(w, i + 10, j + 10, k + 10, air, 0);
		b(w, i + 10, j + 10, k + 11, air, 0);
		b(w, i + 10, j + 10, k + 12, air, 0);
		b(w, i + 10, j + 10, k + 13, air, 0);
		b(w, i + 10, j + 10, k + 14, air, 0);
		b(w, i + 10, j + 10, k + 15, air, 0);
		b(w, i + 10, j + 11, k, air, 0);
		b(w, i + 10, j + 11, k + 1, air, 0);
		b(w, i + 10, j + 11, k + 2, air, 0);
		b(w, i + 10, j + 11, k + 3, air, 0);
		b(w, i + 10, j + 11, k + 4, air, 0);
		b(w, i + 10, j + 11, k + 5, air, 0);
		b(w, i + 10, j + 11, k + 6, air, 0);
		b(w, i + 10, j + 11, k + 7, air, 0);
		b(w, i + 10, j + 11, k + 8, air, 0);
		b(w, i + 10, j + 11, k + 9, air, 0);
		b(w, i + 10, j + 11, k + 10, air, 0);
		b(w, i + 10, j + 11, k + 11, air, 0);
		b(w, i + 10, j + 11, k + 12, air, 0);
		b(w, i + 10, j + 11, k + 13, air, 0);
		b(w, i + 10, j + 11, k + 14, air, 0);
		b(w, i + 10, j + 11, k + 15, air, 0);
		b(w, i + 10, j + 12, k, air, 0);
		b(w, i + 10, j + 12, k + 1, air, 0);
		b(w, i + 10, j + 12, k + 2, air, 0);
		b(w, i + 10, j + 12, k + 3, air, 0);
		b(w, i + 10, j + 12, k + 4, air, 0);
		b(w, i + 10, j + 12, k + 5, air, 0);
		b(w, i + 10, j + 12, k + 6, air, 0);
		b(w, i + 10, j + 12, k + 7, air, 0);
		b(w, i + 10, j + 12, k + 8, air, 0);
		b(w, i + 10, j + 12, k + 9, air, 0);
		b(w, i + 10, j + 12, k + 10, air, 0);
		b(w, i + 10, j + 12, k + 11, air, 0);
		b(w, i + 10, j + 12, k + 12, air, 0);
		b(w, i + 10, j + 12, k + 13, air, 0);
		b(w, i + 10, j + 12, k + 14, air, 0);
		b(w, i + 10, j + 12, k + 15, air, 0);
		b(w, i + 10, j + 13, k, air, 0);
		b(w, i + 10, j + 13, k + 1, air, 0);
		b(w, i + 10, j + 13, k + 2, air, 0);
		b(w, i + 10, j + 13, k + 3, air, 0);
		b(w, i + 10, j + 13, k + 4, air, 0);
		b(w, i + 10, j + 13, k + 5, air, 0);
		b(w, i + 10, j + 13, k + 6, air, 0);
		b(w, i + 10, j + 13, k + 7, air, 0);
		b(w, i + 10, j + 13, k + 8, air, 0);
		b(w, i + 10, j + 13, k + 9, air, 0);
		b(w, i + 10, j + 13, k + 10, air, 0);
		b(w, i + 10, j + 13, k + 11, air, 0);
		b(w, i + 10, j + 13, k + 12, air, 0);
		b(w, i + 10, j + 13, k + 13, air, 0);
		b(w, i + 10, j + 13, k + 14, air, 0);
		b(w, i + 10, j + 13, k + 15, air, 0);
		b(w, i + 10, j + 14, k, air, 0);
		b(w, i + 10, j + 14, k + 1, air, 0);
		b(w, i + 10, j + 14, k + 2, air, 0);
		b(w, i + 10, j + 14, k + 3, air, 0);
		b(w, i + 10, j + 14, k + 4, air, 0);
		b(w, i + 10, j + 14, k + 5, air, 0);
		b(w, i + 10, j + 14, k + 6, air, 0);
		b(w, i + 10, j + 14, k + 7, air, 0);
		b(w, i + 10, j + 14, k + 8, air, 0);
		b(w, i + 10, j + 14, k + 9, air, 0);
		b(w, i + 10, j + 14, k + 10, air, 0);
		b(w, i + 10, j + 14, k + 11, air, 0);
		b(w, i + 10, j + 14, k + 12, air, 0);
		b(w, i + 10, j + 14, k + 13, air, 0);
		b(w, i + 10, j + 14, k + 14, air, 0);
		b(w, i + 10, j + 14, k + 15, air, 0);
		b(w, i + 10, j + 15, k, air, 0);
		b(w, i + 10, j + 15, k + 1, air, 0);
		b(w, i + 10, j + 15, k + 2, air, 0);
		b(w, i + 10, j + 15, k + 3, air, 0);
		b(w, i + 10, j + 15, k + 4, air, 0);
		b(w, i + 10, j + 15, k + 5, air, 0);
		b(w, i + 10, j + 15, k + 6, air, 0);
		b(w, i + 10, j + 15, k + 7, air, 0);
		b(w, i + 10, j + 15, k + 8, air, 0);
		b(w, i + 10, j + 15, k + 9, air, 0);
		b(w, i + 10, j + 15, k + 10, air, 0);
		b(w, i + 10, j + 15, k + 11, air, 0);
		b(w, i + 10, j + 15, k + 12, air, 0);
		b(w, i + 10, j + 15, k + 13, air, 0);
		b(w, i + 10, j + 15, k + 14, air, 0);
		b(w, i + 10, j + 15, k + 15, air, 0);
		b(w, i + 10, j + 16, k, air, 0);
		b(w, i + 10, j + 16, k + 1, air, 0);
		b(w, i + 10, j + 16, k + 2, air, 0);
		b(w, i + 10, j + 16, k + 3, air, 0);
		b(w, i + 10, j + 16, k + 4, air, 0);
		b(w, i + 10, j + 16, k + 5, air, 0);
		b(w, i + 10, j + 16, k + 6, air, 0);
		b(w, i + 10, j + 16, k + 7, air, 0);
		b(w, i + 10, j + 16, k + 8, air, 0);
		b(w, i + 10, j + 16, k + 9, air, 0);
		b(w, i + 10, j + 16, k + 10, air, 0);
		b(w, i + 10, j + 16, k + 11, air, 0);
		b(w, i + 10, j + 16, k + 12, air, 0);
		b(w, i + 10, j + 16, k + 13, air, 0);
		b(w, i + 10, j + 16, k + 14, air, 0);
		b(w, i + 10, j + 16, k + 15, air, 0);
		b(w, i + 10, j + 17, k, air, 0);
		b(w, i + 10, j + 17, k + 1, air, 0);
		b(w, i + 10, j + 17, k + 2, air, 0);
		b(w, i + 10, j + 17, k + 3, air, 0);
		b(w, i + 10, j + 17, k + 4, air, 0);
		b(w, i + 10, j + 17, k + 5, air, 0);
		b(w, i + 10, j + 17, k + 6, air, 0);
		b(w, i + 10, j + 17, k + 7, air, 0);
		b(w, i + 10, j + 17, k + 8, air, 0);
		b(w, i + 10, j + 17, k + 9, air, 0);
		b(w, i + 10, j + 17, k + 10, air, 0);
		b(w, i + 10, j + 17, k + 11, air, 0);
		b(w, i + 10, j + 17, k + 12, air, 0);
		b(w, i + 10, j + 17, k + 13, air, 0);
		b(w, i + 10, j + 17, k + 14, air, 0);
		b(w, i + 10, j + 17, k + 15, air, 0);
		b(w, i + 10, j + 18, k, air, 0);
		b(w, i + 10, j + 18, k + 1, air, 0);
		b(w, i + 10, j + 18, k + 2, air, 0);
		b(w, i + 10, j + 18, k + 3, air, 0);
		b(w, i + 10, j + 18, k + 4, air, 0);
		b(w, i + 10, j + 18, k + 5, air, 0);
		b(w, i + 10, j + 18, k + 6, air, 0);
		b(w, i + 10, j + 18, k + 7, air, 0);
		b(w, i + 10, j + 18, k + 8, air, 0);
		b(w, i + 10, j + 18, k + 9, air, 0);
		b(w, i + 10, j + 18, k + 10, air, 0);
		b(w, i + 10, j + 18, k + 11, air, 0);
		b(w, i + 10, j + 18, k + 12, air, 0);
		b(w, i + 10, j + 18, k + 13, air, 0);
		b(w, i + 10, j + 18, k + 14, air, 0);
		b(w, i + 10, j + 18, k + 15, air, 0);
		b(w, i + 10, j + 19, k, air, 0);
		b(w, i + 10, j + 19, k + 1, air, 0);
		b(w, i + 10, j + 19, k + 2, air, 0);
		b(w, i + 10, j + 19, k + 3, air, 0);
		b(w, i + 10, j + 19, k + 4, air, 0);
		b(w, i + 10, j + 19, k + 5, air, 0);
		b(w, i + 10, j + 19, k + 6, air, 0);
		b(w, i + 10, j + 19, k + 7, air, 0);
		b(w, i + 10, j + 19, k + 8, air, 0);
		b(w, i + 10, j + 19, k + 9, air, 0);
		b(w, i + 10, j + 19, k + 10, air, 0);
		b(w, i + 10, j + 19, k + 11, air, 0);
		b(w, i + 10, j + 19, k + 12, air, 0);
		b(w, i + 10, j + 19, k + 13, air, 0);
		b(w, i + 10, j + 19, k + 14, air, 0);
		b(w, i + 10, j + 19, k + 15, air, 0);
		b(w, i + 10, j + 20, k, air, 0);
		b(w, i + 10, j + 20, k + 1, air, 0);
		b(w, i + 10, j + 20, k + 2, air, 0);
		b(w, i + 10, j + 20, k + 3, air, 0);
		b(w, i + 10, j + 20, k + 4, air, 0);
		b(w, i + 10, j + 20, k + 5, air, 0);
		b(w, i + 10, j + 20, k + 6, air, 0);
		b(w, i + 10, j + 20, k + 7, air, 0);
		b(w, i + 10, j + 20, k + 8, air, 0);
		b(w, i + 10, j + 20, k + 9, air, 0);
		b(w, i + 10, j + 20, k + 10, air, 0);
		b(w, i + 10, j + 20, k + 11, air, 0);
		b(w, i + 10, j + 20, k + 12, air, 0);
		b(w, i + 10, j + 20, k + 13, air, 0);
		b(w, i + 10, j + 20, k + 14, air, 0);
		b(w, i + 10, j + 20, k + 15, air, 0);
		b(w, i + 10, j + 21, k, air, 0);
		b(w, i + 10, j + 21, k + 1, air, 0);
		b(w, i + 10, j + 21, k + 2, air, 0);
		b(w, i + 10, j + 21, k + 3, air, 0);
		b(w, i + 10, j + 21, k + 4, air, 0);
		b(w, i + 10, j + 21, k + 5, air, 0);
		b(w, i + 10, j + 21, k + 6, air, 0);
		b(w, i + 10, j + 21, k + 7, air, 0);
		b(w, i + 10, j + 21, k + 8, air, 0);
		b(w, i + 10, j + 21, k + 9, air, 0);
		b(w, i + 10, j + 21, k + 10, air, 0);
		b(w, i + 10, j + 21, k + 11, air, 0);
		b(w, i + 10, j + 21, k + 12, air, 0);
		b(w, i + 10, j + 21, k + 13, air, 0);
		b(w, i + 10, j + 21, k + 14, air, 0);
		b(w, i + 10, j + 21, k + 15, air, 0);
		b(w, i + 10, j + 22, k, air, 0);
		b(w, i + 10, j + 22, k + 1, air, 0);
		b(w, i + 10, j + 22, k + 2, air, 0);
		b(w, i + 10, j + 22, k + 3, air, 0);
		b(w, i + 10, j + 22, k + 4, air, 0);
		b(w, i + 10, j + 22, k + 5, air, 0);
		b(w, i + 10, j + 22, k + 6, air, 0);
		b(w, i + 10, j + 22, k + 7, air, 0);
		b(w, i + 10, j + 22, k + 8, air, 0);
		b(w, i + 10, j + 22, k + 9, air, 0);
		b(w, i + 10, j + 22, k + 10, air, 0);
		b(w, i + 10, j + 22, k + 11, air, 0);
		b(w, i + 10, j + 22, k + 12, air, 0);
		b(w, i + 10, j + 22, k + 13, air, 0);
		b(w, i + 10, j + 22, k + 14, air, 0);
		b(w, i + 10, j + 22, k + 15, air, 0);
		b(w, i + 10, j + 23, k, air, 0);
		b(w, i + 10, j + 23, k + 1, air, 0);
		generate_10(w, i, j, k);
	}

	public static void generate_10(World w, int i, int j, int k)
	{
		b(w, i + 10, j + 23, k + 2, air, 0);
		b(w, i + 10, j + 23, k + 3, air, 0);
		b(w, i + 10, j + 23, k + 4, air, 0);
		b(w, i + 10, j + 23, k + 5, air, 0);
		b(w, i + 10, j + 23, k + 6, air, 0);
		b(w, i + 10, j + 23, k + 7, air, 0);
		b(w, i + 10, j + 23, k + 8, air, 0);
		b(w, i + 10, j + 23, k + 9, air, 0);
		b(w, i + 10, j + 23, k + 10, air, 0);
		b(w, i + 10, j + 23, k + 11, air, 0);
		b(w, i + 10, j + 23, k + 12, air, 0);
		b(w, i + 10, j + 23, k + 13, air, 0);
		b(w, i + 10, j + 23, k + 14, air, 0);
		b(w, i + 10, j + 23, k + 15, air, 0);
		b(w, i + 10, j + 24, k, air, 0);
		b(w, i + 10, j + 24, k + 1, air, 0);
		b(w, i + 10, j + 24, k + 2, air, 0);
		b(w, i + 10, j + 24, k + 3, air, 0);
		b(w, i + 10, j + 24, k + 4, air, 0);
		b(w, i + 10, j + 24, k + 5, air, 0);
		b(w, i + 10, j + 24, k + 6, air, 0);
		b(w, i + 10, j + 24, k + 7, air, 0);
		b(w, i + 10, j + 24, k + 8, air, 0);
		b(w, i + 10, j + 24, k + 9, air, 0);
		b(w, i + 10, j + 24, k + 10, air, 0);
		b(w, i + 10, j + 24, k + 11, air, 0);
		b(w, i + 10, j + 24, k + 12, air, 0);
		b(w, i + 10, j + 24, k + 13, air, 0);
		b(w, i + 10, j + 24, k + 14, air, 0);
		b(w, i + 10, j + 24, k + 15, air, 0);
		b(w, i + 10, j + 25, k, air, 0);
		b(w, i + 10, j + 25, k + 1, air, 0);
		b(w, i + 10, j + 25, k + 2, air, 0);
		b(w, i + 10, j + 25, k + 3, air, 0);
		b(w, i + 10, j + 25, k + 4, air, 0);
		b(w, i + 10, j + 25, k + 5, air, 0);
		b(w, i + 10, j + 25, k + 6, air, 0);
		b(w, i + 10, j + 25, k + 7, air, 0);
		b(w, i + 10, j + 25, k + 8, air, 0);
		b(w, i + 10, j + 25, k + 9, air, 0);
		b(w, i + 10, j + 25, k + 10, air, 0);
		b(w, i + 10, j + 25, k + 11, air, 0);
		b(w, i + 10, j + 25, k + 12, air, 0);
		b(w, i + 10, j + 25, k + 13, air, 0);
		b(w, i + 10, j + 25, k + 14, air, 0);
		b(w, i + 10, j + 25, k + 15, air, 0);
		b(w, i + 10, j + 26, k, air, 0);
		b(w, i + 10, j + 26, k + 1, air, 0);
		b(w, i + 10, j + 26, k + 2, air, 0);
		b(w, i + 10, j + 26, k + 3, air, 0);
		b(w, i + 10, j + 26, k + 4, air, 0);
		b(w, i + 10, j + 26, k + 5, air, 0);
		b(w, i + 10, j + 26, k + 6, air, 0);
		b(w, i + 10, j + 26, k + 7, air, 0);
		b(w, i + 10, j + 26, k + 8, air, 0);
		b(w, i + 10, j + 26, k + 9, air, 0);
		b(w, i + 10, j + 26, k + 10, air, 0);
		b(w, i + 10, j + 26, k + 11, air, 0);
		b(w, i + 10, j + 26, k + 12, air, 0);
		b(w, i + 10, j + 26, k + 13, air, 0);
		b(w, i + 10, j + 26, k + 14, air, 0);
		b(w, i + 10, j + 26, k + 15, air, 0);
		b(w, i + 10, j + 27, k, air, 0);
		b(w, i + 10, j + 27, k + 1, air, 0);
		b(w, i + 10, j + 27, k + 2, air, 0);
		b(w, i + 10, j + 27, k + 3, air, 0);
		b(w, i + 10, j + 27, k + 4, air, 0);
		b(w, i + 10, j + 27, k + 5, air, 0);
		b(w, i + 10, j + 27, k + 6, air, 0);
		b(w, i + 10, j + 27, k + 7, air, 0);
		b(w, i + 10, j + 27, k + 8, air, 0);
		b(w, i + 10, j + 27, k + 9, air, 0);
		b(w, i + 10, j + 27, k + 10, air, 0);
		b(w, i + 10, j + 27, k + 11, air, 0);
		b(w, i + 10, j + 27, k + 12, air, 0);
		b(w, i + 10, j + 27, k + 13, air, 0);
		b(w, i + 10, j + 27, k + 14, air, 0);
		b(w, i + 10, j + 27, k + 15, air, 0);
		b(w, i + 10, j + 28, k, air, 0);
		b(w, i + 10, j + 28, k + 1, air, 0);
		b(w, i + 10, j + 28, k + 2, air, 0);
		b(w, i + 10, j + 28, k + 3, air, 0);
		b(w, i + 10, j + 28, k + 4, air, 0);
		b(w, i + 10, j + 28, k + 5, air, 0);
		b(w, i + 10, j + 28, k + 6, air, 0);
		b(w, i + 10, j + 28, k + 7, air, 0);
		b(w, i + 10, j + 28, k + 8, air, 0);
		b(w, i + 10, j + 28, k + 9, air, 0);
		b(w, i + 10, j + 28, k + 10, air, 0);
		b(w, i + 10, j + 28, k + 11, air, 0);
		b(w, i + 10, j + 28, k + 12, air, 0);
		b(w, i + 10, j + 28, k + 13, air, 0);
		b(w, i + 10, j + 28, k + 14, air, 0);
		b(w, i + 10, j + 28, k + 15, air, 0);
		b(w, i + 11, j, k, blockTatooineSand, 0);
		b(w, i + 11, j, k + 1, blockTatooineSand, 0);
		b(w, i + 11, j, k + 2, blockTatooineSand, 0);
		b(w, i + 11, j, k + 3, blockTatooineSand, 0);
		b(w, i + 11, j, k + 4, blockTatooineSand, 0);
		b(w, i + 11, j, k + 5, blockTatooineSand, 0);
		b(w, i + 11, j, k + 6, blockTatooineSand, 0);
		b(w, i + 11, j, k + 7, blockTatooineSand, 0);
		b(w, i + 11, j, k + 8, blockTatooineSand, 0);
		b(w, i + 11, j, k + 9, blockTatooineSand, 0);
		b(w, i + 11, j, k + 10, blockTatooineSand, 0);
		b(w, i + 11, j, k + 11, blockTatooineSand, 0);
		b(w, i + 11, j, k + 12, blockTatooineSand, 0);
		b(w, i + 11, j, k + 13, blockTatooineSand, 0);
		b(w, i + 11, j, k + 14, blockTatooineSand, 0);
		b(w, i + 11, j, k + 15, blockTatooineSand, 0);
		b(w, i + 11, j + 1, k, air, 0);
		b(w, i + 11, j + 1, k + 1, air, 0);
		b(w, i + 11, j + 1, k + 2, air, 0);
		b(w, i + 11, j + 1, k + 3, sandstone_stairs, 0);
		m(w, i + 11, j + 1, k + 3, 2);
		b(w, i + 11, j + 1, k + 4, sandstone, 0);
		b(w, i + 11, j + 1, k + 5, sandstone, 0);
		b(w, i + 11, j + 1, k + 6, sandstone, 0);
		b(w, i + 11, j + 1, k + 7, sandstone, 0);
		b(w, i + 11, j + 1, k + 8, sandstone, 0);
		b(w, i + 11, j + 1, k + 9, sandstone_stairs, 0);
		m(w, i + 11, j + 1, k + 9, 3);
		b(w, i + 11, j + 1, k + 10, air, 0);
		b(w, i + 11, j + 1, k + 11, air, 0);
		b(w, i + 11, j + 1, k + 12, air, 0);
		b(w, i + 11, j + 1, k + 13, air, 0);
		b(w, i + 11, j + 1, k + 14, sandstone, 0);
		m(w, i + 11, j + 1, k + 14, 2);
		b(w, i + 11, j + 1, k + 15, air, 0);
		b(w, i + 11, j + 2, k, air, 0);
		b(w, i + 11, j + 2, k + 1, air, 0);
		b(w, i + 11, j + 2, k + 2, air, 0);
		b(w, i + 11, j + 2, k + 3, air, 0);
		b(w, i + 11, j + 2, k + 4, air, 0);
		b(w, i + 11, j + 2, k + 5, air, 0);
		b(w, i + 11, j + 2, k + 6, air, 0);
		b(w, i + 11, j + 2, k + 7, air, 0);
		b(w, i + 11, j + 2, k + 8, air, 0);
		b(w, i + 11, j + 2, k + 9, air, 0);
		b(w, i + 11, j + 2, k + 10, air, 0);
		b(w, i + 11, j + 2, k + 11, air, 0);
		b(w, i + 11, j + 2, k + 12, air, 0);
		b(w, i + 11, j + 2, k + 13, air, 0);
		b(w, i + 11, j + 2, k + 14, sandstone, 0);
		m(w, i + 11, j + 2, k + 14, 2);
		b(w, i + 11, j + 2, k + 15, air, 0);
		b(w, i + 11, j + 3, k, air, 0);
		b(w, i + 11, j + 3, k + 1, air, 0);
		b(w, i + 11, j + 3, k + 2, air, 0);
		b(w, i + 11, j + 3, k + 3, air, 0);
		b(w, i + 11, j + 3, k + 4, air, 0);
		b(w, i + 11, j + 3, k + 5, air, 0);
		b(w, i + 11, j + 3, k + 6, air, 0);
		b(w, i + 11, j + 3, k + 7, air, 0);
		b(w, i + 11, j + 3, k + 8, air, 0);
		b(w, i + 11, j + 3, k + 9, air, 0);
		b(w, i + 11, j + 3, k + 10, air, 0);
		b(w, i + 11, j + 3, k + 11, air, 0);
		b(w, i + 11, j + 3, k + 12, air, 0);
		b(w, i + 11, j + 3, k + 13, air, 0);
		b(w, i + 11, j + 3, k + 14, sandstone, 0);
		m(w, i + 11, j + 3, k + 14, 2);
		b(w, i + 11, j + 3, k + 15, air, 0);
		b(w, i + 11, j + 4, k, air, 0);
		b(w, i + 11, j + 4, k + 1, air, 0);
		b(w, i + 11, j + 4, k + 2, air, 0);
		b(w, i + 11, j + 4, k + 3, air, 0);
		b(w, i + 11, j + 4, k + 4, air, 0);
		b(w, i + 11, j + 4, k + 5, air, 0);
		b(w, i + 11, j + 4, k + 6, air, 0);
		b(w, i + 11, j + 4, k + 7, air, 0);
		b(w, i + 11, j + 4, k + 8, air, 0);
		b(w, i + 11, j + 4, k + 9, air, 0);
		b(w, i + 11, j + 4, k + 10, air, 0);
		b(w, i + 11, j + 4, k + 11, air, 0);
		b(w, i + 11, j + 4, k + 12, air, 0);
		b(w, i + 11, j + 4, k + 13, air, 0);
		b(w, i + 11, j + 4, k + 14, sandstone, 0);
		m(w, i + 11, j + 4, k + 14, 2);
		b(w, i + 11, j + 4, k + 15, air, 0);
		b(w, i + 11, j + 5, k, air, 0);
		b(w, i + 11, j + 5, k + 1, air, 0);
		b(w, i + 11, j + 5, k + 2, air, 0);
		b(w, i + 11, j + 5, k + 3, air, 0);
		b(w, i + 11, j + 5, k + 4, air, 0);
		b(w, i + 11, j + 5, k + 5, air, 0);
		b(w, i + 11, j + 5, k + 6, air, 0);
		b(w, i + 11, j + 5, k + 7, air, 0);
		b(w, i + 11, j + 5, k + 8, sandstone_stairs, 0);
		m(w, i + 11, j + 5, k + 8, 5);
		b(w, i + 11, j + 5, k + 9, air, 0);
		b(w, i + 11, j + 5, k + 10, air, 0);
		b(w, i + 11, j + 5, k + 11, air, 0);
		b(w, i + 11, j + 5, k + 12, air, 0);
		b(w, i + 11, j + 5, k + 13, air, 0);
		b(w, i + 11, j + 5, k + 14, sandstone, 0);
		m(w, i + 11, j + 5, k + 14, 2);
		b(w, i + 11, j + 5, k + 15, air, 0);
		b(w, i + 11, j + 6, k, air, 0);
		b(w, i + 11, j + 6, k + 1, air, 0);
		b(w, i + 11, j + 6, k + 2, air, 0);
		b(w, i + 11, j + 6, k + 3, air, 0);
		b(w, i + 11, j + 6, k + 4, air, 0);
		b(w, i + 11, j + 6, k + 5, air, 0);
		b(w, i + 11, j + 6, k + 6, air, 0);
		b(w, i + 11, j + 6, k + 7, air, 0);
		b(w, i + 11, j + 6, k + 8, sandstone, 0);
		b(w, i + 11, j + 6, k + 9, sandstone, 0);
		b(w, i + 11, j + 6, k + 10, sandstone, 0);
		b(w, i + 11, j + 6, k + 11, sandstone, 0);
		b(w, i + 11, j + 6, k + 12, sandstone, 0);
		b(w, i + 11, j + 6, k + 13, sandstone, 0);
		b(w, i + 11, j + 6, k + 14, sandstone, 0);
		b(w, i + 11, j + 6, k + 15, air, 0);
		b(w, i + 11, j + 7, k, air, 0);
		b(w, i + 11, j + 7, k + 1, air, 0);
		b(w, i + 11, j + 7, k + 2, air, 0);
		b(w, i + 11, j + 7, k + 3, air, 0);
		b(w, i + 11, j + 7, k + 4, air, 0);
		b(w, i + 11, j + 7, k + 5, air, 0);
		b(w, i + 11, j + 7, k + 6, air, 0);
		b(w, i + 11, j + 7, k + 7, air, 0);
		b(w, i + 11, j + 7, k + 8, sandstone, 0);
		b(w, i + 11, j + 7, k + 9, sandstone_stairs, 0);
		m(w, i + 11, j + 7, k + 9, 3);
		b(w, i + 11, j + 7, k + 10, air, 0);
		b(w, i + 11, j + 7, k + 11, air, 0);
		b(w, i + 11, j + 7, k + 12, air, 0);
		b(w, i + 11, j + 7, k + 13, air, 0);
		b(w, i + 11, j + 7, k + 14, air, 0);
		b(w, i + 11, j + 7, k + 15, air, 0);
		b(w, i + 11, j + 8, k, air, 0);
		b(w, i + 11, j + 8, k + 1, air, 0);
		b(w, i + 11, j + 8, k + 2, air, 0);
		b(w, i + 11, j + 8, k + 3, air, 0);
		b(w, i + 11, j + 8, k + 4, air, 0);
		b(w, i + 11, j + 8, k + 5, air, 0);
		b(w, i + 11, j + 8, k + 6, sandstone, 0);
		b(w, i + 11, j + 8, k + 7, sandstone, 0);
		b(w, i + 11, j + 8, k + 8, sandstone, 0);
		b(w, i + 11, j + 8, k + 9, air, 0);
		b(w, i + 11, j + 8, k + 10, air, 0);
		b(w, i + 11, j + 8, k + 11, air, 0);
		b(w, i + 11, j + 8, k + 12, air, 0);
		b(w, i + 11, j + 8, k + 13, air, 0);
		b(w, i + 11, j + 8, k + 14, air, 0);
		b(w, i + 11, j + 8, k + 15, air, 0);
		b(w, i + 11, j + 9, k, air, 0);
		b(w, i + 11, j + 9, k + 1, air, 0);
		b(w, i + 11, j + 9, k + 2, air, 0);
		b(w, i + 11, j + 9, k + 3, air, 0);
		b(w, i + 11, j + 9, k + 4, air, 0);
		b(w, i + 11, j + 9, k + 5, air, 0);
		b(w, i + 11, j + 9, k + 6, stone_slab, 0);
		m(w, i + 11, j + 9, k + 6, 1);
		b(w, i + 11, j + 9, k + 7, air, 0);
		b(w, i + 11, j + 9, k + 8, air, 0);
		b(w, i + 11, j + 9, k + 9, air, 0);
		b(w, i + 11, j + 9, k + 10, air, 0);
		b(w, i + 11, j + 9, k + 11, air, 0);
		b(w, i + 11, j + 9, k + 12, air, 0);
		b(w, i + 11, j + 9, k + 13, air, 0);
		b(w, i + 11, j + 9, k + 14, air, 0);
		b(w, i + 11, j + 9, k + 15, air, 0);
		b(w, i + 11, j + 10, k, air, 0);
		b(w, i + 11, j + 10, k + 1, air, 0);
		b(w, i + 11, j + 10, k + 2, air, 0);
		b(w, i + 11, j + 10, k + 3, air, 0);
		b(w, i + 11, j + 10, k + 4, air, 0);
		b(w, i + 11, j + 10, k + 5, air, 0);
		b(w, i + 11, j + 10, k + 6, air, 0);
		b(w, i + 11, j + 10, k + 7, air, 0);
		b(w, i + 11, j + 10, k + 8, air, 0);
		b(w, i + 11, j + 10, k + 9, air, 0);
		b(w, i + 11, j + 10, k + 10, air, 0);
		b(w, i + 11, j + 10, k + 11, air, 0);
		b(w, i + 11, j + 10, k + 12, air, 0);
		b(w, i + 11, j + 10, k + 13, air, 0);
		b(w, i + 11, j + 10, k + 14, air, 0);
		b(w, i + 11, j + 10, k + 15, air, 0);
		b(w, i + 11, j + 11, k, air, 0);
		b(w, i + 11, j + 11, k + 1, air, 0);
		b(w, i + 11, j + 11, k + 2, air, 0);
		b(w, i + 11, j + 11, k + 3, air, 0);
		b(w, i + 11, j + 11, k + 4, air, 0);
		b(w, i + 11, j + 11, k + 5, air, 0);
		b(w, i + 11, j + 11, k + 6, air, 0);
		b(w, i + 11, j + 11, k + 7, air, 0);
		b(w, i + 11, j + 11, k + 8, air, 0);
		b(w, i + 11, j + 11, k + 9, air, 0);
		b(w, i + 11, j + 11, k + 10, air, 0);
		b(w, i + 11, j + 11, k + 11, air, 0);
		b(w, i + 11, j + 11, k + 12, air, 0);
		b(w, i + 11, j + 11, k + 13, air, 0);
		b(w, i + 11, j + 11, k + 14, air, 0);
		b(w, i + 11, j + 11, k + 15, air, 0);
		b(w, i + 11, j + 12, k, air, 0);
		b(w, i + 11, j + 12, k + 1, air, 0);
		b(w, i + 11, j + 12, k + 2, air, 0);
		b(w, i + 11, j + 12, k + 3, air, 0);
		b(w, i + 11, j + 12, k + 4, air, 0);
		b(w, i + 11, j + 12, k + 5, air, 0);
		b(w, i + 11, j + 12, k + 6, air, 0);
		b(w, i + 11, j + 12, k + 7, air, 0);
		b(w, i + 11, j + 12, k + 8, air, 0);
		b(w, i + 11, j + 12, k + 9, air, 0);
		b(w, i + 11, j + 12, k + 10, air, 0);
		b(w, i + 11, j + 12, k + 11, air, 0);
		b(w, i + 11, j + 12, k + 12, air, 0);
		b(w, i + 11, j + 12, k + 13, air, 0);
		b(w, i + 11, j + 12, k + 14, air, 0);
		b(w, i + 11, j + 12, k + 15, air, 0);
		b(w, i + 11, j + 13, k, air, 0);
		b(w, i + 11, j + 13, k + 1, air, 0);
		b(w, i + 11, j + 13, k + 2, air, 0);
		b(w, i + 11, j + 13, k + 3, air, 0);
		b(w, i + 11, j + 13, k + 4, air, 0);
		b(w, i + 11, j + 13, k + 5, air, 0);
		b(w, i + 11, j + 13, k + 6, air, 0);
		b(w, i + 11, j + 13, k + 7, air, 0);
		b(w, i + 11, j + 13, k + 8, air, 0);
		b(w, i + 11, j + 13, k + 9, air, 0);
		b(w, i + 11, j + 13, k + 10, air, 0);
		b(w, i + 11, j + 13, k + 11, air, 0);
		b(w, i + 11, j + 13, k + 12, air, 0);
		b(w, i + 11, j + 13, k + 13, air, 0);
		b(w, i + 11, j + 13, k + 14, air, 0);
		b(w, i + 11, j + 13, k + 15, air, 0);
		b(w, i + 11, j + 14, k, air, 0);
		b(w, i + 11, j + 14, k + 1, air, 0);
		b(w, i + 11, j + 14, k + 2, air, 0);
		b(w, i + 11, j + 14, k + 3, air, 0);
		b(w, i + 11, j + 14, k + 4, air, 0);
		b(w, i + 11, j + 14, k + 5, air, 0);
		b(w, i + 11, j + 14, k + 6, air, 0);
		b(w, i + 11, j + 14, k + 7, air, 0);
		b(w, i + 11, j + 14, k + 8, air, 0);
		b(w, i + 11, j + 14, k + 9, air, 0);
		b(w, i + 11, j + 14, k + 10, air, 0);
		b(w, i + 11, j + 14, k + 11, air, 0);
		b(w, i + 11, j + 14, k + 12, air, 0);
		b(w, i + 11, j + 14, k + 13, air, 0);
		b(w, i + 11, j + 14, k + 14, air, 0);
		b(w, i + 11, j + 14, k + 15, air, 0);
		b(w, i + 11, j + 15, k, air, 0);
		b(w, i + 11, j + 15, k + 1, air, 0);
		b(w, i + 11, j + 15, k + 2, air, 0);
		b(w, i + 11, j + 15, k + 3, air, 0);
		b(w, i + 11, j + 15, k + 4, air, 0);
		b(w, i + 11, j + 15, k + 5, air, 0);
		b(w, i + 11, j + 15, k + 6, air, 0);
		b(w, i + 11, j + 15, k + 7, air, 0);
		b(w, i + 11, j + 15, k + 8, air, 0);
		b(w, i + 11, j + 15, k + 9, air, 0);
		b(w, i + 11, j + 15, k + 10, air, 0);
		b(w, i + 11, j + 15, k + 11, air, 0);
		b(w, i + 11, j + 15, k + 12, air, 0);
		b(w, i + 11, j + 15, k + 13, air, 0);
		b(w, i + 11, j + 15, k + 14, air, 0);
		b(w, i + 11, j + 15, k + 15, air, 0);
		b(w, i + 11, j + 16, k, air, 0);
		b(w, i + 11, j + 16, k + 1, air, 0);
		b(w, i + 11, j + 16, k + 2, air, 0);
		b(w, i + 11, j + 16, k + 3, air, 0);
		b(w, i + 11, j + 16, k + 4, air, 0);
		b(w, i + 11, j + 16, k + 5, air, 0);
		b(w, i + 11, j + 16, k + 6, air, 0);
		b(w, i + 11, j + 16, k + 7, air, 0);
		b(w, i + 11, j + 16, k + 8, air, 0);
		b(w, i + 11, j + 16, k + 9, air, 0);
		b(w, i + 11, j + 16, k + 10, air, 0);
		b(w, i + 11, j + 16, k + 11, air, 0);
		b(w, i + 11, j + 16, k + 12, air, 0);
		b(w, i + 11, j + 16, k + 13, air, 0);
		b(w, i + 11, j + 16, k + 14, air, 0);
		b(w, i + 11, j + 16, k + 15, air, 0);
		b(w, i + 11, j + 17, k, air, 0);
		b(w, i + 11, j + 17, k + 1, air, 0);
		b(w, i + 11, j + 17, k + 2, air, 0);
		b(w, i + 11, j + 17, k + 3, air, 0);
		b(w, i + 11, j + 17, k + 4, air, 0);
		b(w, i + 11, j + 17, k + 5, air, 0);
		b(w, i + 11, j + 17, k + 6, air, 0);
		b(w, i + 11, j + 17, k + 7, air, 0);
		b(w, i + 11, j + 17, k + 8, air, 0);
		b(w, i + 11, j + 17, k + 9, air, 0);
		b(w, i + 11, j + 17, k + 10, air, 0);
		b(w, i + 11, j + 17, k + 11, air, 0);
		b(w, i + 11, j + 17, k + 12, air, 0);
		b(w, i + 11, j + 17, k + 13, air, 0);
		b(w, i + 11, j + 17, k + 14, air, 0);
		b(w, i + 11, j + 17, k + 15, air, 0);
		b(w, i + 11, j + 18, k, air, 0);
		b(w, i + 11, j + 18, k + 1, air, 0);
		b(w, i + 11, j + 18, k + 2, air, 0);
		b(w, i + 11, j + 18, k + 3, air, 0);
		b(w, i + 11, j + 18, k + 4, air, 0);
		b(w, i + 11, j + 18, k + 5, air, 0);
		b(w, i + 11, j + 18, k + 6, air, 0);
		b(w, i + 11, j + 18, k + 7, air, 0);
		b(w, i + 11, j + 18, k + 8, air, 0);
		b(w, i + 11, j + 18, k + 9, air, 0);
		b(w, i + 11, j + 18, k + 10, air, 0);
		b(w, i + 11, j + 18, k + 11, air, 0);
		b(w, i + 11, j + 18, k + 12, air, 0);
		b(w, i + 11, j + 18, k + 13, air, 0);
		b(w, i + 11, j + 18, k + 14, air, 0);
		b(w, i + 11, j + 18, k + 15, air, 0);
		b(w, i + 11, j + 19, k, air, 0);
		b(w, i + 11, j + 19, k + 1, air, 0);
		b(w, i + 11, j + 19, k + 2, air, 0);
		b(w, i + 11, j + 19, k + 3, air, 0);
		b(w, i + 11, j + 19, k + 4, air, 0);
		b(w, i + 11, j + 19, k + 5, air, 0);
		b(w, i + 11, j + 19, k + 6, air, 0);
		b(w, i + 11, j + 19, k + 7, air, 0);
		b(w, i + 11, j + 19, k + 8, air, 0);
		b(w, i + 11, j + 19, k + 9, air, 0);
		b(w, i + 11, j + 19, k + 10, air, 0);
		b(w, i + 11, j + 19, k + 11, air, 0);
		b(w, i + 11, j + 19, k + 12, air, 0);
		b(w, i + 11, j + 19, k + 13, air, 0);
		b(w, i + 11, j + 19, k + 14, air, 0);
		b(w, i + 11, j + 19, k + 15, air, 0);
		b(w, i + 11, j + 20, k, air, 0);
		b(w, i + 11, j + 20, k + 1, air, 0);
		b(w, i + 11, j + 20, k + 2, air, 0);
		b(w, i + 11, j + 20, k + 3, air, 0);
		b(w, i + 11, j + 20, k + 4, air, 0);
		b(w, i + 11, j + 20, k + 5, air, 0);
		b(w, i + 11, j + 20, k + 6, air, 0);
		b(w, i + 11, j + 20, k + 7, air, 0);
		b(w, i + 11, j + 20, k + 8, air, 0);
		b(w, i + 11, j + 20, k + 9, air, 0);
		b(w, i + 11, j + 20, k + 10, air, 0);
		b(w, i + 11, j + 20, k + 11, air, 0);
		b(w, i + 11, j + 20, k + 12, air, 0);
		b(w, i + 11, j + 20, k + 13, air, 0);
		b(w, i + 11, j + 20, k + 14, air, 0);
		b(w, i + 11, j + 20, k + 15, air, 0);
		b(w, i + 11, j + 21, k, air, 0);
		b(w, i + 11, j + 21, k + 1, air, 0);
		b(w, i + 11, j + 21, k + 2, air, 0);
		b(w, i + 11, j + 21, k + 3, air, 0);
		b(w, i + 11, j + 21, k + 4, air, 0);
		b(w, i + 11, j + 21, k + 5, air, 0);
		b(w, i + 11, j + 21, k + 6, air, 0);
		b(w, i + 11, j + 21, k + 7, air, 0);
		b(w, i + 11, j + 21, k + 8, air, 0);
		b(w, i + 11, j + 21, k + 9, air, 0);
		b(w, i + 11, j + 21, k + 10, air, 0);
		b(w, i + 11, j + 21, k + 11, air, 0);
		b(w, i + 11, j + 21, k + 12, air, 0);
		b(w, i + 11, j + 21, k + 13, air, 0);
		b(w, i + 11, j + 21, k + 14, air, 0);
		b(w, i + 11, j + 21, k + 15, air, 0);
		b(w, i + 11, j + 22, k, air, 0);
		b(w, i + 11, j + 22, k + 1, air, 0);
		b(w, i + 11, j + 22, k + 2, air, 0);
		b(w, i + 11, j + 22, k + 3, air, 0);
		b(w, i + 11, j + 22, k + 4, air, 0);
		b(w, i + 11, j + 22, k + 5, air, 0);
		b(w, i + 11, j + 22, k + 6, air, 0);
		b(w, i + 11, j + 22, k + 7, air, 0);
		b(w, i + 11, j + 22, k + 8, air, 0);
		b(w, i + 11, j + 22, k + 9, air, 0);
		b(w, i + 11, j + 22, k + 10, air, 0);
		b(w, i + 11, j + 22, k + 11, air, 0);
		b(w, i + 11, j + 22, k + 12, air, 0);
		b(w, i + 11, j + 22, k + 13, air, 0);
		b(w, i + 11, j + 22, k + 14, air, 0);
		b(w, i + 11, j + 22, k + 15, air, 0);
		b(w, i + 11, j + 23, k, air, 0);
		b(w, i + 11, j + 23, k + 1, air, 0);
		b(w, i + 11, j + 23, k + 2, air, 0);
		b(w, i + 11, j + 23, k + 3, air, 0);
		b(w, i + 11, j + 23, k + 4, air, 0);
		b(w, i + 11, j + 23, k + 5, air, 0);
		b(w, i + 11, j + 23, k + 6, air, 0);
		b(w, i + 11, j + 23, k + 7, air, 0);
		b(w, i + 11, j + 23, k + 8, air, 0);
		b(w, i + 11, j + 23, k + 9, air, 0);
		b(w, i + 11, j + 23, k + 10, air, 0);
		b(w, i + 11, j + 23, k + 11, air, 0);
		b(w, i + 11, j + 23, k + 12, air, 0);
		b(w, i + 11, j + 23, k + 13, air, 0);
		b(w, i + 11, j + 23, k + 14, air, 0);
		b(w, i + 11, j + 23, k + 15, air, 0);
		b(w, i + 11, j + 24, k, air, 0);
		b(w, i + 11, j + 24, k + 1, air, 0);
		b(w, i + 11, j + 24, k + 2, air, 0);
		b(w, i + 11, j + 24, k + 3, air, 0);
		b(w, i + 11, j + 24, k + 4, air, 0);
		b(w, i + 11, j + 24, k + 5, air, 0);
		b(w, i + 11, j + 24, k + 6, air, 0);
		b(w, i + 11, j + 24, k + 7, air, 0);
		b(w, i + 11, j + 24, k + 8, air, 0);
		b(w, i + 11, j + 24, k + 9, air, 0);
		b(w, i + 11, j + 24, k + 10, air, 0);
		b(w, i + 11, j + 24, k + 11, air, 0);
		b(w, i + 11, j + 24, k + 12, air, 0);
		b(w, i + 11, j + 24, k + 13, air, 0);
		b(w, i + 11, j + 24, k + 14, air, 0);
		b(w, i + 11, j + 24, k + 15, air, 0);
		b(w, i + 11, j + 25, k, air, 0);
		b(w, i + 11, j + 25, k + 1, air, 0);
		b(w, i + 11, j + 25, k + 2, air, 0);
		b(w, i + 11, j + 25, k + 3, air, 0);
		b(w, i + 11, j + 25, k + 4, air, 0);
		b(w, i + 11, j + 25, k + 5, air, 0);
		b(w, i + 11, j + 25, k + 6, air, 0);
		generate_11(w, i, j, k);
	}

	public static void generate_11(World w, int i, int j, int k)
	{
		b(w, i + 11, j + 25, k + 7, air, 0);
		b(w, i + 11, j + 25, k + 8, air, 0);
		b(w, i + 11, j + 25, k + 9, air, 0);
		b(w, i + 11, j + 25, k + 10, air, 0);
		b(w, i + 11, j + 25, k + 11, air, 0);
		b(w, i + 11, j + 25, k + 12, air, 0);
		b(w, i + 11, j + 25, k + 13, air, 0);
		b(w, i + 11, j + 25, k + 14, air, 0);
		b(w, i + 11, j + 25, k + 15, air, 0);
		b(w, i + 11, j + 26, k, air, 0);
		b(w, i + 11, j + 26, k + 1, air, 0);
		b(w, i + 11, j + 26, k + 2, air, 0);
		b(w, i + 11, j + 26, k + 3, air, 0);
		b(w, i + 11, j + 26, k + 4, air, 0);
		b(w, i + 11, j + 26, k + 5, air, 0);
		b(w, i + 11, j + 26, k + 6, air, 0);
		b(w, i + 11, j + 26, k + 7, air, 0);
		b(w, i + 11, j + 26, k + 8, air, 0);
		b(w, i + 11, j + 26, k + 9, air, 0);
		b(w, i + 11, j + 26, k + 10, air, 0);
		b(w, i + 11, j + 26, k + 11, air, 0);
		b(w, i + 11, j + 26, k + 12, air, 0);
		b(w, i + 11, j + 26, k + 13, air, 0);
		b(w, i + 11, j + 26, k + 14, air, 0);
		b(w, i + 11, j + 26, k + 15, air, 0);
		b(w, i + 11, j + 27, k, air, 0);
		b(w, i + 11, j + 27, k + 1, air, 0);
		b(w, i + 11, j + 27, k + 2, air, 0);
		b(w, i + 11, j + 27, k + 3, air, 0);
		b(w, i + 11, j + 27, k + 4, air, 0);
		b(w, i + 11, j + 27, k + 5, air, 0);
		b(w, i + 11, j + 27, k + 6, air, 0);
		b(w, i + 11, j + 27, k + 7, air, 0);
		b(w, i + 11, j + 27, k + 8, air, 0);
		b(w, i + 11, j + 27, k + 9, air, 0);
		b(w, i + 11, j + 27, k + 10, air, 0);
		b(w, i + 11, j + 27, k + 11, air, 0);
		b(w, i + 11, j + 27, k + 12, air, 0);
		b(w, i + 11, j + 27, k + 13, air, 0);
		b(w, i + 11, j + 27, k + 14, air, 0);
		b(w, i + 11, j + 27, k + 15, air, 0);
		b(w, i + 11, j + 28, k, air, 0);
		b(w, i + 11, j + 28, k + 1, air, 0);
		b(w, i + 11, j + 28, k + 2, air, 0);
		b(w, i + 11, j + 28, k + 3, air, 0);
		b(w, i + 11, j + 28, k + 4, air, 0);
		b(w, i + 11, j + 28, k + 5, air, 0);
		b(w, i + 11, j + 28, k + 6, air, 0);
		b(w, i + 11, j + 28, k + 7, air, 0);
		b(w, i + 11, j + 28, k + 8, air, 0);
		b(w, i + 11, j + 28, k + 9, air, 0);
		b(w, i + 11, j + 28, k + 10, air, 0);
		b(w, i + 11, j + 28, k + 11, air, 0);
		b(w, i + 11, j + 28, k + 12, air, 0);
		b(w, i + 11, j + 28, k + 13, air, 0);
		b(w, i + 11, j + 28, k + 14, air, 0);
		b(w, i + 11, j + 28, k + 15, air, 0);
		b(w, i + 12, j, k, blockTatooineSand, 0);
		b(w, i + 12, j, k + 1, blockTatooineSand, 0);
		b(w, i + 12, j, k + 2, blockTatooineSand, 0);
		b(w, i + 12, j, k + 3, blockTatooineSand, 0);
		b(w, i + 12, j, k + 4, blockTatooineSand, 0);
		b(w, i + 12, j, k + 5, blockTatooineSand, 0);
		b(w, i + 12, j, k + 6, blockTatooineSand, 0);
		b(w, i + 12, j, k + 7, blockTatooineSand, 0);
		b(w, i + 12, j, k + 8, blockTatooineSand, 0);
		b(w, i + 12, j, k + 9, blockTatooineSand, 0);
		b(w, i + 12, j, k + 10, blockTatooineSand, 0);
		b(w, i + 12, j, k + 11, blockTatooineSand, 0);
		b(w, i + 12, j, k + 12, blockTatooineSand, 0);
		b(w, i + 12, j, k + 13, blockTatooineSand, 0);
		b(w, i + 12, j, k + 14, blockTatooineSand, 0);
		b(w, i + 12, j, k + 15, blockTatooineSand, 0);
		b(w, i + 12, j + 1, k, air, 0);
		b(w, i + 12, j + 1, k + 1, air, 0);
		b(w, i + 12, j + 1, k + 2, air, 0);
		b(w, i + 12, j + 1, k + 3, sandstone_stairs, 0);
		m(w, i + 12, j + 1, k + 3, 2);
		b(w, i + 12, j + 1, k + 4, sandstone, 0);
		b(w, i + 12, j + 1, k + 5, sandstone, 0);
		b(w, i + 12, j + 1, k + 6, sandstone, 0);
		b(w, i + 12, j + 1, k + 7, sandstone, 0);
		b(w, i + 12, j + 1, k + 8, sandstone, 0);
		b(w, i + 12, j + 1, k + 9, sandstone_stairs, 0);
		m(w, i + 12, j + 1, k + 9, 3);
		b(w, i + 12, j + 1, k + 10, air, 0);
		b(w, i + 12, j + 1, k + 11, air, 0);
		b(w, i + 12, j + 1, k + 12, air, 0);
		b(w, i + 12, j + 1, k + 13, air, 0);
		b(w, i + 12, j + 1, k + 14, sandstone, 0);
		m(w, i + 12, j + 1, k + 14, 2);
		b(w, i + 12, j + 1, k + 15, air, 0);
		b(w, i + 12, j + 2, k, air, 0);
		b(w, i + 12, j + 2, k + 1, air, 0);
		b(w, i + 12, j + 2, k + 2, air, 0);
		b(w, i + 12, j + 2, k + 3, air, 0);
		b(w, i + 12, j + 2, k + 4, air, 0);
		b(w, i + 12, j + 2, k + 5, air, 0);
		b(w, i + 12, j + 2, k + 6, air, 0);
		b(w, i + 12, j + 2, k + 7, air, 0);
		b(w, i + 12, j + 2, k + 8, air, 0);
		b(w, i + 12, j + 2, k + 9, air, 0);
		b(w, i + 12, j + 2, k + 10, air, 0);
		b(w, i + 12, j + 2, k + 11, air, 0);
		b(w, i + 12, j + 2, k + 12, air, 0);
		b(w, i + 12, j + 2, k + 13, air, 0);
		b(w, i + 12, j + 2, k + 14, glass_pane, 0);
		b(w, i + 12, j + 2, k + 15, air, 0);
		b(w, i + 12, j + 3, k, air, 0);
		b(w, i + 12, j + 3, k + 1, air, 0);
		b(w, i + 12, j + 3, k + 2, air, 0);
		b(w, i + 12, j + 3, k + 3, air, 0);
		b(w, i + 12, j + 3, k + 4, air, 0);
		b(w, i + 12, j + 3, k + 5, air, 0);
		b(w, i + 12, j + 3, k + 6, air, 0);
		b(w, i + 12, j + 3, k + 7, air, 0);
		b(w, i + 12, j + 3, k + 8, air, 0);
		b(w, i + 12, j + 3, k + 9, air, 0);
		b(w, i + 12, j + 3, k + 10, air, 0);
		b(w, i + 12, j + 3, k + 11, air, 0);
		b(w, i + 12, j + 3, k + 12, air, 0);
		b(w, i + 12, j + 3, k + 13, air, 0);
		b(w, i + 12, j + 3, k + 14, glass_pane, 0);
		b(w, i + 12, j + 3, k + 15, air, 0);
		b(w, i + 12, j + 4, k, air, 0);
		b(w, i + 12, j + 4, k + 1, air, 0);
		b(w, i + 12, j + 4, k + 2, air, 0);
		b(w, i + 12, j + 4, k + 3, air, 0);
		b(w, i + 12, j + 4, k + 4, air, 0);
		b(w, i + 12, j + 4, k + 5, air, 0);
		b(w, i + 12, j + 4, k + 6, air, 0);
		b(w, i + 12, j + 4, k + 7, air, 0);
		b(w, i + 12, j + 4, k + 8, air, 0);
		b(w, i + 12, j + 4, k + 9, air, 0);
		b(w, i + 12, j + 4, k + 10, air, 0);
		b(w, i + 12, j + 4, k + 11, air, 0);
		b(w, i + 12, j + 4, k + 12, air, 0);
		b(w, i + 12, j + 4, k + 13, air, 0);
		b(w, i + 12, j + 4, k + 14, glass_pane, 0);
		b(w, i + 12, j + 4, k + 15, air, 0);
		b(w, i + 12, j + 5, k, air, 0);
		b(w, i + 12, j + 5, k + 1, air, 0);
		b(w, i + 12, j + 5, k + 2, air, 0);
		b(w, i + 12, j + 5, k + 3, air, 0);
		b(w, i + 12, j + 5, k + 4, air, 0);
		b(w, i + 12, j + 5, k + 5, air, 0);
		b(w, i + 12, j + 5, k + 6, air, 0);
		b(w, i + 12, j + 5, k + 7, air, 0);
		b(w, i + 12, j + 5, k + 8, stone_slab, 0);
		m(w, i + 12, j + 5, k + 8, 9);
		b(w, i + 12, j + 5, k + 9, air, 0);
		b(w, i + 12, j + 5, k + 10, air, 0);
		b(w, i + 12, j + 5, k + 11, air, 0);
		b(w, i + 12, j + 5, k + 12, air, 0);
		b(w, i + 12, j + 5, k + 13, air, 0);
		b(w, i + 12, j + 5, k + 14, sandstone, 0);
		m(w, i + 12, j + 5, k + 14, 2);
		b(w, i + 12, j + 5, k + 15, air, 0);
		b(w, i + 12, j + 6, k, air, 0);
		b(w, i + 12, j + 6, k + 1, air, 0);
		b(w, i + 12, j + 6, k + 2, air, 0);
		b(w, i + 12, j + 6, k + 3, air, 0);
		b(w, i + 12, j + 6, k + 4, air, 0);
		b(w, i + 12, j + 6, k + 5, air, 0);
		b(w, i + 12, j + 6, k + 6, air, 0);
		b(w, i + 12, j + 6, k + 7, air, 0);
		b(w, i + 12, j + 6, k + 8, sandstone, 0);
		b(w, i + 12, j + 6, k + 9, sandstone, 0);
		b(w, i + 12, j + 6, k + 10, sandstone, 0);
		b(w, i + 12, j + 6, k + 11, sandstone, 0);
		b(w, i + 12, j + 6, k + 12, sandstone, 0);
		b(w, i + 12, j + 6, k + 13, sandstone, 0);
		b(w, i + 12, j + 6, k + 14, sandstone, 0);
		b(w, i + 12, j + 6, k + 15, air, 0);
		b(w, i + 12, j + 7, k, air, 0);
		b(w, i + 12, j + 7, k + 1, air, 0);
		b(w, i + 12, j + 7, k + 2, air, 0);
		b(w, i + 12, j + 7, k + 3, air, 0);
		b(w, i + 12, j + 7, k + 4, air, 0);
		b(w, i + 12, j + 7, k + 5, air, 0);
		b(w, i + 12, j + 7, k + 6, air, 0);
		b(w, i + 12, j + 7, k + 7, air, 0);
		b(w, i + 12, j + 7, k + 8, sandstone, 0);
		b(w, i + 12, j + 7, k + 9, sandstone_stairs, 0);
		m(w, i + 12, j + 7, k + 9, 3);
		b(w, i + 12, j + 7, k + 10, air, 0);
		b(w, i + 12, j + 7, k + 11, air, 0);
		b(w, i + 12, j + 7, k + 12, air, 0);
		b(w, i + 12, j + 7, k + 13, air, 0);
		b(w, i + 12, j + 7, k + 14, air, 0);
		b(w, i + 12, j + 7, k + 15, air, 0);
		b(w, i + 12, j + 8, k, air, 0);
		b(w, i + 12, j + 8, k + 1, air, 0);
		b(w, i + 12, j + 8, k + 2, air, 0);
		b(w, i + 12, j + 8, k + 3, air, 0);
		b(w, i + 12, j + 8, k + 4, air, 0);
		b(w, i + 12, j + 8, k + 5, air, 0);
		b(w, i + 12, j + 8, k + 6, sandstone, 0);
		b(w, i + 12, j + 8, k + 7, sandstone, 0);
		b(w, i + 12, j + 8, k + 8, sandstone, 0);
		b(w, i + 12, j + 8, k + 9, air, 0);
		b(w, i + 12, j + 8, k + 10, air, 0);
		b(w, i + 12, j + 8, k + 11, air, 0);
		b(w, i + 12, j + 8, k + 12, air, 0);
		b(w, i + 12, j + 8, k + 13, air, 0);
		b(w, i + 12, j + 8, k + 14, air, 0);
		b(w, i + 12, j + 8, k + 15, air, 0);
		b(w, i + 12, j + 9, k, air, 0);
		b(w, i + 12, j + 9, k + 1, air, 0);
		b(w, i + 12, j + 9, k + 2, air, 0);
		b(w, i + 12, j + 9, k + 3, air, 0);
		b(w, i + 12, j + 9, k + 4, air, 0);
		b(w, i + 12, j + 9, k + 5, air, 0);
		b(w, i + 12, j + 9, k + 6, stone_slab, 0);
		m(w, i + 12, j + 9, k + 6, 1);
		b(w, i + 12, j + 9, k + 7, air, 0);
		b(w, i + 12, j + 9, k + 8, air, 0);
		b(w, i + 12, j + 9, k + 9, air, 0);
		b(w, i + 12, j + 9, k + 10, air, 0);
		b(w, i + 12, j + 9, k + 11, air, 0);
		b(w, i + 12, j + 9, k + 12, air, 0);
		b(w, i + 12, j + 9, k + 13, air, 0);
		b(w, i + 12, j + 9, k + 14, air, 0);
		b(w, i + 12, j + 9, k + 15, air, 0);
		b(w, i + 12, j + 10, k, air, 0);
		b(w, i + 12, j + 10, k + 1, air, 0);
		b(w, i + 12, j + 10, k + 2, air, 0);
		b(w, i + 12, j + 10, k + 3, air, 0);
		b(w, i + 12, j + 10, k + 4, air, 0);
		b(w, i + 12, j + 10, k + 5, air, 0);
		b(w, i + 12, j + 10, k + 6, air, 0);
		b(w, i + 12, j + 10, k + 7, air, 0);
		b(w, i + 12, j + 10, k + 8, air, 0);
		b(w, i + 12, j + 10, k + 9, air, 0);
		b(w, i + 12, j + 10, k + 10, air, 0);
		b(w, i + 12, j + 10, k + 11, air, 0);
		b(w, i + 12, j + 10, k + 12, air, 0);
		b(w, i + 12, j + 10, k + 13, air, 0);
		b(w, i + 12, j + 10, k + 14, air, 0);
		b(w, i + 12, j + 10, k + 15, air, 0);
		b(w, i + 12, j + 11, k, air, 0);
		b(w, i + 12, j + 11, k + 1, air, 0);
		b(w, i + 12, j + 11, k + 2, air, 0);
		b(w, i + 12, j + 11, k + 3, air, 0);
		b(w, i + 12, j + 11, k + 4, air, 0);
		b(w, i + 12, j + 11, k + 5, air, 0);
		b(w, i + 12, j + 11, k + 6, air, 0);
		b(w, i + 12, j + 11, k + 7, air, 0);
		b(w, i + 12, j + 11, k + 8, air, 0);
		b(w, i + 12, j + 11, k + 9, air, 0);
		b(w, i + 12, j + 11, k + 10, air, 0);
		b(w, i + 12, j + 11, k + 11, air, 0);
		b(w, i + 12, j + 11, k + 12, air, 0);
		b(w, i + 12, j + 11, k + 13, air, 0);
		b(w, i + 12, j + 11, k + 14, air, 0);
		b(w, i + 12, j + 11, k + 15, air, 0);
		b(w, i + 12, j + 12, k, air, 0);
		b(w, i + 12, j + 12, k + 1, air, 0);
		b(w, i + 12, j + 12, k + 2, air, 0);
		b(w, i + 12, j + 12, k + 3, air, 0);
		b(w, i + 12, j + 12, k + 4, air, 0);
		b(w, i + 12, j + 12, k + 5, air, 0);
		b(w, i + 12, j + 12, k + 6, air, 0);
		b(w, i + 12, j + 12, k + 7, air, 0);
		b(w, i + 12, j + 12, k + 8, air, 0);
		b(w, i + 12, j + 12, k + 9, air, 0);
		b(w, i + 12, j + 12, k + 10, air, 0);
		b(w, i + 12, j + 12, k + 11, air, 0);
		b(w, i + 12, j + 12, k + 12, air, 0);
		b(w, i + 12, j + 12, k + 13, air, 0);
		b(w, i + 12, j + 12, k + 14, air, 0);
		b(w, i + 12, j + 12, k + 15, air, 0);
		b(w, i + 12, j + 13, k, air, 0);
		b(w, i + 12, j + 13, k + 1, air, 0);
		b(w, i + 12, j + 13, k + 2, air, 0);
		b(w, i + 12, j + 13, k + 3, air, 0);
		b(w, i + 12, j + 13, k + 4, air, 0);
		b(w, i + 12, j + 13, k + 5, air, 0);
		b(w, i + 12, j + 13, k + 6, air, 0);
		b(w, i + 12, j + 13, k + 7, air, 0);
		b(w, i + 12, j + 13, k + 8, air, 0);
		b(w, i + 12, j + 13, k + 9, air, 0);
		b(w, i + 12, j + 13, k + 10, air, 0);
		b(w, i + 12, j + 13, k + 11, air, 0);
		b(w, i + 12, j + 13, k + 12, air, 0);
		b(w, i + 12, j + 13, k + 13, air, 0);
		b(w, i + 12, j + 13, k + 14, air, 0);
		b(w, i + 12, j + 13, k + 15, air, 0);
		b(w, i + 12, j + 14, k, air, 0);
		b(w, i + 12, j + 14, k + 1, air, 0);
		b(w, i + 12, j + 14, k + 2, air, 0);
		b(w, i + 12, j + 14, k + 3, air, 0);
		b(w, i + 12, j + 14, k + 4, air, 0);
		b(w, i + 12, j + 14, k + 5, air, 0);
		b(w, i + 12, j + 14, k + 6, air, 0);
		b(w, i + 12, j + 14, k + 7, air, 0);
		b(w, i + 12, j + 14, k + 8, air, 0);
		b(w, i + 12, j + 14, k + 9, air, 0);
		b(w, i + 12, j + 14, k + 10, air, 0);
		b(w, i + 12, j + 14, k + 11, air, 0);
		b(w, i + 12, j + 14, k + 12, air, 0);
		b(w, i + 12, j + 14, k + 13, air, 0);
		b(w, i + 12, j + 14, k + 14, air, 0);
		b(w, i + 12, j + 14, k + 15, air, 0);
		b(w, i + 12, j + 15, k, air, 0);
		b(w, i + 12, j + 15, k + 1, air, 0);
		b(w, i + 12, j + 15, k + 2, air, 0);
		b(w, i + 12, j + 15, k + 3, air, 0);
		b(w, i + 12, j + 15, k + 4, air, 0);
		b(w, i + 12, j + 15, k + 5, air, 0);
		b(w, i + 12, j + 15, k + 6, air, 0);
		b(w, i + 12, j + 15, k + 7, air, 0);
		b(w, i + 12, j + 15, k + 8, air, 0);
		b(w, i + 12, j + 15, k + 9, air, 0);
		b(w, i + 12, j + 15, k + 10, air, 0);
		b(w, i + 12, j + 15, k + 11, air, 0);
		b(w, i + 12, j + 15, k + 12, air, 0);
		b(w, i + 12, j + 15, k + 13, air, 0);
		b(w, i + 12, j + 15, k + 14, air, 0);
		b(w, i + 12, j + 15, k + 15, air, 0);
		b(w, i + 12, j + 16, k, air, 0);
		b(w, i + 12, j + 16, k + 1, air, 0);
		b(w, i + 12, j + 16, k + 2, air, 0);
		b(w, i + 12, j + 16, k + 3, air, 0);
		b(w, i + 12, j + 16, k + 4, air, 0);
		b(w, i + 12, j + 16, k + 5, air, 0);
		b(w, i + 12, j + 16, k + 6, air, 0);
		b(w, i + 12, j + 16, k + 7, air, 0);
		b(w, i + 12, j + 16, k + 8, air, 0);
		b(w, i + 12, j + 16, k + 9, air, 0);
		b(w, i + 12, j + 16, k + 10, air, 0);
		b(w, i + 12, j + 16, k + 11, air, 0);
		b(w, i + 12, j + 16, k + 12, air, 0);
		b(w, i + 12, j + 16, k + 13, air, 0);
		b(w, i + 12, j + 16, k + 14, air, 0);
		b(w, i + 12, j + 16, k + 15, air, 0);
		b(w, i + 12, j + 17, k, air, 0);
		b(w, i + 12, j + 17, k + 1, air, 0);
		b(w, i + 12, j + 17, k + 2, air, 0);
		b(w, i + 12, j + 17, k + 3, air, 0);
		b(w, i + 12, j + 17, k + 4, air, 0);
		b(w, i + 12, j + 17, k + 5, air, 0);
		b(w, i + 12, j + 17, k + 6, air, 0);
		b(w, i + 12, j + 17, k + 7, air, 0);
		b(w, i + 12, j + 17, k + 8, air, 0);
		b(w, i + 12, j + 17, k + 9, air, 0);
		b(w, i + 12, j + 17, k + 10, air, 0);
		b(w, i + 12, j + 17, k + 11, air, 0);
		b(w, i + 12, j + 17, k + 12, air, 0);
		b(w, i + 12, j + 17, k + 13, air, 0);
		b(w, i + 12, j + 17, k + 14, air, 0);
		b(w, i + 12, j + 17, k + 15, air, 0);
		b(w, i + 12, j + 18, k, air, 0);
		b(w, i + 12, j + 18, k + 1, air, 0);
		b(w, i + 12, j + 18, k + 2, air, 0);
		b(w, i + 12, j + 18, k + 3, air, 0);
		b(w, i + 12, j + 18, k + 4, air, 0);
		b(w, i + 12, j + 18, k + 5, air, 0);
		b(w, i + 12, j + 18, k + 6, air, 0);
		b(w, i + 12, j + 18, k + 7, air, 0);
		b(w, i + 12, j + 18, k + 8, air, 0);
		b(w, i + 12, j + 18, k + 9, air, 0);
		b(w, i + 12, j + 18, k + 10, air, 0);
		b(w, i + 12, j + 18, k + 11, air, 0);
		b(w, i + 12, j + 18, k + 12, air, 0);
		b(w, i + 12, j + 18, k + 13, air, 0);
		b(w, i + 12, j + 18, k + 14, air, 0);
		b(w, i + 12, j + 18, k + 15, air, 0);
		b(w, i + 12, j + 19, k, air, 0);
		b(w, i + 12, j + 19, k + 1, air, 0);
		b(w, i + 12, j + 19, k + 2, air, 0);
		b(w, i + 12, j + 19, k + 3, air, 0);
		b(w, i + 12, j + 19, k + 4, air, 0);
		b(w, i + 12, j + 19, k + 5, air, 0);
		b(w, i + 12, j + 19, k + 6, air, 0);
		b(w, i + 12, j + 19, k + 7, air, 0);
		b(w, i + 12, j + 19, k + 8, air, 0);
		b(w, i + 12, j + 19, k + 9, air, 0);
		b(w, i + 12, j + 19, k + 10, air, 0);
		b(w, i + 12, j + 19, k + 11, air, 0);
		b(w, i + 12, j + 19, k + 12, air, 0);
		b(w, i + 12, j + 19, k + 13, air, 0);
		b(w, i + 12, j + 19, k + 14, air, 0);
		b(w, i + 12, j + 19, k + 15, air, 0);
		b(w, i + 12, j + 20, k, air, 0);
		b(w, i + 12, j + 20, k + 1, air, 0);
		b(w, i + 12, j + 20, k + 2, air, 0);
		b(w, i + 12, j + 20, k + 3, air, 0);
		b(w, i + 12, j + 20, k + 4, air, 0);
		b(w, i + 12, j + 20, k + 5, air, 0);
		b(w, i + 12, j + 20, k + 6, air, 0);
		b(w, i + 12, j + 20, k + 7, air, 0);
		b(w, i + 12, j + 20, k + 8, air, 0);
		b(w, i + 12, j + 20, k + 9, air, 0);
		b(w, i + 12, j + 20, k + 10, air, 0);
		b(w, i + 12, j + 20, k + 11, air, 0);
		b(w, i + 12, j + 20, k + 12, air, 0);
		b(w, i + 12, j + 20, k + 13, air, 0);
		b(w, i + 12, j + 20, k + 14, air, 0);
		b(w, i + 12, j + 20, k + 15, air, 0);
		b(w, i + 12, j + 21, k, air, 0);
		b(w, i + 12, j + 21, k + 1, air, 0);
		b(w, i + 12, j + 21, k + 2, air, 0);
		b(w, i + 12, j + 21, k + 3, air, 0);
		b(w, i + 12, j + 21, k + 4, air, 0);
		b(w, i + 12, j + 21, k + 5, air, 0);
		b(w, i + 12, j + 21, k + 6, air, 0);
		b(w, i + 12, j + 21, k + 7, air, 0);
		b(w, i + 12, j + 21, k + 8, air, 0);
		b(w, i + 12, j + 21, k + 9, air, 0);
		b(w, i + 12, j + 21, k + 10, air, 0);
		b(w, i + 12, j + 21, k + 11, air, 0);
		b(w, i + 12, j + 21, k + 12, air, 0);
		b(w, i + 12, j + 21, k + 13, air, 0);
		b(w, i + 12, j + 21, k + 14, air, 0);
		b(w, i + 12, j + 21, k + 15, air, 0);
		b(w, i + 12, j + 22, k, air, 0);
		b(w, i + 12, j + 22, k + 1, air, 0);
		b(w, i + 12, j + 22, k + 2, air, 0);
		b(w, i + 12, j + 22, k + 3, air, 0);
		b(w, i + 12, j + 22, k + 4, air, 0);
		b(w, i + 12, j + 22, k + 5, air, 0);
		b(w, i + 12, j + 22, k + 6, air, 0);
		b(w, i + 12, j + 22, k + 7, air, 0);
		b(w, i + 12, j + 22, k + 8, air, 0);
		b(w, i + 12, j + 22, k + 9, air, 0);
		b(w, i + 12, j + 22, k + 10, air, 0);
		b(w, i + 12, j + 22, k + 11, air, 0);
		b(w, i + 12, j + 22, k + 12, air, 0);
		b(w, i + 12, j + 22, k + 13, air, 0);
		b(w, i + 12, j + 22, k + 14, air, 0);
		b(w, i + 12, j + 22, k + 15, air, 0);
		b(w, i + 12, j + 23, k, air, 0);
		b(w, i + 12, j + 23, k + 1, air, 0);
		b(w, i + 12, j + 23, k + 2, air, 0);
		b(w, i + 12, j + 23, k + 3, air, 0);
		b(w, i + 12, j + 23, k + 4, air, 0);
		b(w, i + 12, j + 23, k + 5, air, 0);
		b(w, i + 12, j + 23, k + 6, air, 0);
		b(w, i + 12, j + 23, k + 7, air, 0);
		b(w, i + 12, j + 23, k + 8, air, 0);
		b(w, i + 12, j + 23, k + 9, air, 0);
		b(w, i + 12, j + 23, k + 10, air, 0);
		b(w, i + 12, j + 23, k + 11, air, 0);
		b(w, i + 12, j + 23, k + 12, air, 0);
		b(w, i + 12, j + 23, k + 13, air, 0);
		b(w, i + 12, j + 23, k + 14, air, 0);
		b(w, i + 12, j + 23, k + 15, air, 0);
		b(w, i + 12, j + 24, k, air, 0);
		b(w, i + 12, j + 24, k + 1, air, 0);
		b(w, i + 12, j + 24, k + 2, air, 0);
		b(w, i + 12, j + 24, k + 3, air, 0);
		b(w, i + 12, j + 24, k + 4, air, 0);
		b(w, i + 12, j + 24, k + 5, air, 0);
		b(w, i + 12, j + 24, k + 6, air, 0);
		b(w, i + 12, j + 24, k + 7, air, 0);
		b(w, i + 12, j + 24, k + 8, air, 0);
		b(w, i + 12, j + 24, k + 9, air, 0);
		b(w, i + 12, j + 24, k + 10, air, 0);
		b(w, i + 12, j + 24, k + 11, air, 0);
		b(w, i + 12, j + 24, k + 12, air, 0);
		b(w, i + 12, j + 24, k + 13, air, 0);
		b(w, i + 12, j + 24, k + 14, air, 0);
		b(w, i + 12, j + 24, k + 15, air, 0);
		b(w, i + 12, j + 25, k, air, 0);
		b(w, i + 12, j + 25, k + 1, air, 0);
		b(w, i + 12, j + 25, k + 2, air, 0);
		b(w, i + 12, j + 25, k + 3, air, 0);
		b(w, i + 12, j + 25, k + 4, air, 0);
		b(w, i + 12, j + 25, k + 5, air, 0);
		b(w, i + 12, j + 25, k + 6, air, 0);
		b(w, i + 12, j + 25, k + 7, air, 0);
		b(w, i + 12, j + 25, k + 8, air, 0);
		b(w, i + 12, j + 25, k + 9, air, 0);
		b(w, i + 12, j + 25, k + 10, air, 0);
		b(w, i + 12, j + 25, k + 11, air, 0);
		b(w, i + 12, j + 25, k + 12, air, 0);
		b(w, i + 12, j + 25, k + 13, air, 0);
		b(w, i + 12, j + 25, k + 14, air, 0);
		b(w, i + 12, j + 25, k + 15, air, 0);
		b(w, i + 12, j + 26, k, air, 0);
		b(w, i + 12, j + 26, k + 1, air, 0);
		b(w, i + 12, j + 26, k + 2, air, 0);
		b(w, i + 12, j + 26, k + 3, air, 0);
		b(w, i + 12, j + 26, k + 4, air, 0);
		b(w, i + 12, j + 26, k + 5, air, 0);
		b(w, i + 12, j + 26, k + 6, air, 0);
		b(w, i + 12, j + 26, k + 7, air, 0);
		b(w, i + 12, j + 26, k + 8, air, 0);
		b(w, i + 12, j + 26, k + 9, air, 0);
		b(w, i + 12, j + 26, k + 10, air, 0);
		b(w, i + 12, j + 26, k + 11, air, 0);
		b(w, i + 12, j + 26, k + 12, air, 0);
		b(w, i + 12, j + 26, k + 13, air, 0);
		b(w, i + 12, j + 26, k + 14, air, 0);
		b(w, i + 12, j + 26, k + 15, air, 0);
		b(w, i + 12, j + 27, k, air, 0);
		b(w, i + 12, j + 27, k + 1, air, 0);
		b(w, i + 12, j + 27, k + 2, air, 0);
		b(w, i + 12, j + 27, k + 3, air, 0);
		b(w, i + 12, j + 27, k + 4, air, 0);
		b(w, i + 12, j + 27, k + 5, air, 0);
		b(w, i + 12, j + 27, k + 6, air, 0);
		b(w, i + 12, j + 27, k + 7, air, 0);
		b(w, i + 12, j + 27, k + 8, air, 0);
		b(w, i + 12, j + 27, k + 9, air, 0);
		b(w, i + 12, j + 27, k + 10, air, 0);
		b(w, i + 12, j + 27, k + 11, air, 0);
		generate_12(w, i, j, k);
	}

	public static void generate_12(World w, int i, int j, int k)
	{
		b(w, i + 12, j + 27, k + 12, air, 0);
		b(w, i + 12, j + 27, k + 13, air, 0);
		b(w, i + 12, j + 27, k + 14, air, 0);
		b(w, i + 12, j + 27, k + 15, air, 0);
		b(w, i + 12, j + 28, k, air, 0);
		b(w, i + 12, j + 28, k + 1, air, 0);
		b(w, i + 12, j + 28, k + 2, air, 0);
		b(w, i + 12, j + 28, k + 3, air, 0);
		b(w, i + 12, j + 28, k + 4, air, 0);
		b(w, i + 12, j + 28, k + 5, air, 0);
		b(w, i + 12, j + 28, k + 6, air, 0);
		b(w, i + 12, j + 28, k + 7, air, 0);
		b(w, i + 12, j + 28, k + 8, air, 0);
		b(w, i + 12, j + 28, k + 9, air, 0);
		b(w, i + 12, j + 28, k + 10, air, 0);
		b(w, i + 12, j + 28, k + 11, air, 0);
		b(w, i + 12, j + 28, k + 12, air, 0);
		b(w, i + 12, j + 28, k + 13, air, 0);
		b(w, i + 12, j + 28, k + 14, air, 0);
		b(w, i + 12, j + 28, k + 15, air, 0);
		b(w, i + 13, j, k, blockTatooineSand, 0);
		b(w, i + 13, j, k + 1, blockTatooineSand, 0);
		b(w, i + 13, j, k + 2, blockTatooineSand, 0);
		b(w, i + 13, j, k + 3, blockTatooineSand, 0);
		b(w, i + 13, j, k + 4, blockTatooineSand, 0);
		b(w, i + 13, j, k + 5, blockTatooineSand, 0);
		b(w, i + 13, j, k + 6, blockTatooineSand, 0);
		b(w, i + 13, j, k + 7, blockTatooineSand, 0);
		b(w, i + 13, j, k + 8, blockTatooineSand, 0);
		b(w, i + 13, j, k + 9, blockTatooineSand, 0);
		b(w, i + 13, j, k + 10, blockTatooineSand, 0);
		b(w, i + 13, j, k + 11, blockTatooineSand, 0);
		b(w, i + 13, j, k + 12, blockTatooineSand, 0);
		b(w, i + 13, j, k + 13, blockTatooineSand, 0);
		b(w, i + 13, j, k + 14, blockTatooineSand, 0);
		b(w, i + 13, j, k + 15, blockTatooineSand, 0);
		b(w, i + 13, j + 1, k, air, 0);
		b(w, i + 13, j + 1, k + 1, air, 0);
		b(w, i + 13, j + 1, k + 2, air, 0);
		b(w, i + 13, j + 1, k + 3, sandstone_stairs, 0);
		m(w, i + 13, j + 1, k + 3, 2);
		b(w, i + 13, j + 1, k + 4, sandstone, 0);
		b(w, i + 13, j + 1, k + 5, sandstone, 0);
		b(w, i + 13, j + 1, k + 6, sandstone, 0);
		b(w, i + 13, j + 1, k + 7, sandstone, 0);
		b(w, i + 13, j + 1, k + 8, sandstone, 0);
		b(w, i + 13, j + 1, k + 9, sandstone_stairs, 0);
		m(w, i + 13, j + 1, k + 9, 3);
		b(w, i + 13, j + 1, k + 10, air, 0);
		b(w, i + 13, j + 1, k + 11, air, 0);
		b(w, i + 13, j + 1, k + 12, air, 0);
		b(w, i + 13, j + 1, k + 13, air, 0);
		b(w, i + 13, j + 1, k + 14, sandstone, 0);
		m(w, i + 13, j + 1, k + 14, 2);
		b(w, i + 13, j + 1, k + 15, air, 0);
		b(w, i + 13, j + 2, k, air, 0);
		b(w, i + 13, j + 2, k + 1, air, 0);
		b(w, i + 13, j + 2, k + 2, air, 0);
		b(w, i + 13, j + 2, k + 3, air, 0);
		b(w, i + 13, j + 2, k + 4, air, 0);
		b(w, i + 13, j + 2, k + 5, air, 0);
		b(w, i + 13, j + 2, k + 6, air, 0);
		b(w, i + 13, j + 2, k + 7, air, 0);
		b(w, i + 13, j + 2, k + 8, air, 0);
		b(w, i + 13, j + 2, k + 9, air, 0);
		b(w, i + 13, j + 2, k + 10, air, 0);
		b(w, i + 13, j + 2, k + 11, air, 0);
		b(w, i + 13, j + 2, k + 12, air, 0);
		b(w, i + 13, j + 2, k + 13, air, 0);
		b(w, i + 13, j + 2, k + 14, glass_pane, 0);
		b(w, i + 13, j + 2, k + 15, air, 0);
		b(w, i + 13, j + 3, k, air, 0);
		b(w, i + 13, j + 3, k + 1, air, 0);
		b(w, i + 13, j + 3, k + 2, air, 0);
		b(w, i + 13, j + 3, k + 3, air, 0);
		b(w, i + 13, j + 3, k + 4, air, 0);
		b(w, i + 13, j + 3, k + 5, air, 0);
		b(w, i + 13, j + 3, k + 6, air, 0);
		b(w, i + 13, j + 3, k + 7, air, 0);
		b(w, i + 13, j + 3, k + 8, air, 0);
		b(w, i + 13, j + 3, k + 9, air, 0);
		b(w, i + 13, j + 3, k + 10, air, 0);
		b(w, i + 13, j + 3, k + 11, air, 0);
		b(w, i + 13, j + 3, k + 12, air, 0);
		b(w, i + 13, j + 3, k + 13, air, 0);
		b(w, i + 13, j + 3, k + 14, glass_pane, 0);
		b(w, i + 13, j + 3, k + 15, air, 0);
		b(w, i + 13, j + 4, k, air, 0);
		b(w, i + 13, j + 4, k + 1, air, 0);
		b(w, i + 13, j + 4, k + 2, air, 0);
		b(w, i + 13, j + 4, k + 3, air, 0);
		b(w, i + 13, j + 4, k + 4, air, 0);
		b(w, i + 13, j + 4, k + 5, air, 0);
		b(w, i + 13, j + 4, k + 6, air, 0);
		b(w, i + 13, j + 4, k + 7, air, 0);
		b(w, i + 13, j + 4, k + 8, air, 0);
		b(w, i + 13, j + 4, k + 9, air, 0);
		b(w, i + 13, j + 4, k + 10, air, 0);
		b(w, i + 13, j + 4, k + 11, air, 0);
		b(w, i + 13, j + 4, k + 12, air, 0);
		b(w, i + 13, j + 4, k + 13, air, 0);
		b(w, i + 13, j + 4, k + 14, glass_pane, 0);
		b(w, i + 13, j + 4, k + 15, air, 0);
		b(w, i + 13, j + 5, k, air, 0);
		b(w, i + 13, j + 5, k + 1, air, 0);
		b(w, i + 13, j + 5, k + 2, air, 0);
		b(w, i + 13, j + 5, k + 3, air, 0);
		b(w, i + 13, j + 5, k + 4, air, 0);
		b(w, i + 13, j + 5, k + 5, air, 0);
		b(w, i + 13, j + 5, k + 6, air, 0);
		b(w, i + 13, j + 5, k + 7, air, 0);
		b(w, i + 13, j + 5, k + 8, stone_slab, 0);
		m(w, i + 13, j + 5, k + 8, 9);
		b(w, i + 13, j + 5, k + 9, air, 0);
		b(w, i + 13, j + 5, k + 10, air, 0);
		b(w, i + 13, j + 5, k + 11, air, 0);
		b(w, i + 13, j + 5, k + 12, air, 0);
		b(w, i + 13, j + 5, k + 13, air, 0);
		b(w, i + 13, j + 5, k + 14, sandstone, 0);
		m(w, i + 13, j + 5, k + 14, 2);
		b(w, i + 13, j + 5, k + 15, air, 0);
		b(w, i + 13, j + 6, k, air, 0);
		b(w, i + 13, j + 6, k + 1, air, 0);
		b(w, i + 13, j + 6, k + 2, air, 0);
		b(w, i + 13, j + 6, k + 3, air, 0);
		b(w, i + 13, j + 6, k + 4, air, 0);
		b(w, i + 13, j + 6, k + 5, air, 0);
		b(w, i + 13, j + 6, k + 6, air, 0);
		b(w, i + 13, j + 6, k + 7, air, 0);
		b(w, i + 13, j + 6, k + 8, sandstone, 0);
		b(w, i + 13, j + 6, k + 9, sandstone, 0);
		b(w, i + 13, j + 6, k + 10, sandstone, 0);
		b(w, i + 13, j + 6, k + 11, sandstone, 0);
		b(w, i + 13, j + 6, k + 12, sandstone, 0);
		b(w, i + 13, j + 6, k + 13, sandstone, 0);
		b(w, i + 13, j + 6, k + 14, sandstone, 0);
		b(w, i + 13, j + 6, k + 15, air, 0);
		b(w, i + 13, j + 7, k, air, 0);
		b(w, i + 13, j + 7, k + 1, air, 0);
		b(w, i + 13, j + 7, k + 2, air, 0);
		b(w, i + 13, j + 7, k + 3, air, 0);
		b(w, i + 13, j + 7, k + 4, air, 0);
		b(w, i + 13, j + 7, k + 5, air, 0);
		b(w, i + 13, j + 7, k + 6, air, 0);
		b(w, i + 13, j + 7, k + 7, air, 0);
		b(w, i + 13, j + 7, k + 8, sandstone, 0);
		b(w, i + 13, j + 7, k + 9, sandstone_stairs, 0);
		m(w, i + 13, j + 7, k + 9, 3);
		b(w, i + 13, j + 7, k + 10, air, 0);
		b(w, i + 13, j + 7, k + 11, air, 0);
		b(w, i + 13, j + 7, k + 12, air, 0);
		b(w, i + 13, j + 7, k + 13, air, 0);
		b(w, i + 13, j + 7, k + 14, air, 0);
		b(w, i + 13, j + 7, k + 15, air, 0);
		b(w, i + 13, j + 8, k, air, 0);
		b(w, i + 13, j + 8, k + 1, air, 0);
		b(w, i + 13, j + 8, k + 2, air, 0);
		b(w, i + 13, j + 8, k + 3, air, 0);
		b(w, i + 13, j + 8, k + 4, air, 0);
		b(w, i + 13, j + 8, k + 5, air, 0);
		b(w, i + 13, j + 8, k + 6, sandstone, 0);
		b(w, i + 13, j + 8, k + 7, sandstone, 0);
		b(w, i + 13, j + 8, k + 8, sandstone, 0);
		b(w, i + 13, j + 8, k + 9, air, 0);
		b(w, i + 13, j + 8, k + 10, air, 0);
		b(w, i + 13, j + 8, k + 11, air, 0);
		b(w, i + 13, j + 8, k + 12, air, 0);
		b(w, i + 13, j + 8, k + 13, air, 0);
		b(w, i + 13, j + 8, k + 14, air, 0);
		b(w, i + 13, j + 8, k + 15, air, 0);
		b(w, i + 13, j + 9, k, air, 0);
		b(w, i + 13, j + 9, k + 1, air, 0);
		b(w, i + 13, j + 9, k + 2, air, 0);
		b(w, i + 13, j + 9, k + 3, air, 0);
		b(w, i + 13, j + 9, k + 4, air, 0);
		b(w, i + 13, j + 9, k + 5, air, 0);
		b(w, i + 13, j + 9, k + 6, stone_slab, 0);
		m(w, i + 13, j + 9, k + 6, 1);
		b(w, i + 13, j + 9, k + 7, air, 0);
		b(w, i + 13, j + 9, k + 8, air, 0);
		b(w, i + 13, j + 9, k + 9, air, 0);
		b(w, i + 13, j + 9, k + 10, air, 0);
		b(w, i + 13, j + 9, k + 11, air, 0);
		b(w, i + 13, j + 9, k + 12, air, 0);
		b(w, i + 13, j + 9, k + 13, air, 0);
		b(w, i + 13, j + 9, k + 14, air, 0);
		b(w, i + 13, j + 9, k + 15, air, 0);
		b(w, i + 13, j + 10, k, air, 0);
		b(w, i + 13, j + 10, k + 1, air, 0);
		b(w, i + 13, j + 10, k + 2, air, 0);
		b(w, i + 13, j + 10, k + 3, air, 0);
		b(w, i + 13, j + 10, k + 4, air, 0);
		b(w, i + 13, j + 10, k + 5, air, 0);
		b(w, i + 13, j + 10, k + 6, air, 0);
		b(w, i + 13, j + 10, k + 7, air, 0);
		b(w, i + 13, j + 10, k + 8, air, 0);
		b(w, i + 13, j + 10, k + 9, air, 0);
		b(w, i + 13, j + 10, k + 10, air, 0);
		b(w, i + 13, j + 10, k + 11, air, 0);
		b(w, i + 13, j + 10, k + 12, air, 0);
		b(w, i + 13, j + 10, k + 13, air, 0);
		b(w, i + 13, j + 10, k + 14, air, 0);
		b(w, i + 13, j + 10, k + 15, air, 0);
		b(w, i + 13, j + 11, k, air, 0);
		b(w, i + 13, j + 11, k + 1, air, 0);
		b(w, i + 13, j + 11, k + 2, air, 0);
		b(w, i + 13, j + 11, k + 3, air, 0);
		b(w, i + 13, j + 11, k + 4, air, 0);
		b(w, i + 13, j + 11, k + 5, air, 0);
		b(w, i + 13, j + 11, k + 6, air, 0);
		b(w, i + 13, j + 11, k + 7, air, 0);
		b(w, i + 13, j + 11, k + 8, air, 0);
		b(w, i + 13, j + 11, k + 9, air, 0);
		b(w, i + 13, j + 11, k + 10, air, 0);
		b(w, i + 13, j + 11, k + 11, air, 0);
		b(w, i + 13, j + 11, k + 12, air, 0);
		b(w, i + 13, j + 11, k + 13, air, 0);
		b(w, i + 13, j + 11, k + 14, air, 0);
		b(w, i + 13, j + 11, k + 15, air, 0);
		b(w, i + 13, j + 12, k, air, 0);
		b(w, i + 13, j + 12, k + 1, air, 0);
		b(w, i + 13, j + 12, k + 2, air, 0);
		b(w, i + 13, j + 12, k + 3, air, 0);
		b(w, i + 13, j + 12, k + 4, air, 0);
		b(w, i + 13, j + 12, k + 5, air, 0);
		b(w, i + 13, j + 12, k + 6, air, 0);
		b(w, i + 13, j + 12, k + 7, air, 0);
		b(w, i + 13, j + 12, k + 8, air, 0);
		b(w, i + 13, j + 12, k + 9, air, 0);
		b(w, i + 13, j + 12, k + 10, air, 0);
		b(w, i + 13, j + 12, k + 11, air, 0);
		b(w, i + 13, j + 12, k + 12, air, 0);
		b(w, i + 13, j + 12, k + 13, air, 0);
		b(w, i + 13, j + 12, k + 14, air, 0);
		b(w, i + 13, j + 12, k + 15, air, 0);
		b(w, i + 13, j + 13, k, air, 0);
		b(w, i + 13, j + 13, k + 1, air, 0);
		b(w, i + 13, j + 13, k + 2, air, 0);
		b(w, i + 13, j + 13, k + 3, air, 0);
		b(w, i + 13, j + 13, k + 4, air, 0);
		b(w, i + 13, j + 13, k + 5, air, 0);
		b(w, i + 13, j + 13, k + 6, air, 0);
		b(w, i + 13, j + 13, k + 7, air, 0);
		b(w, i + 13, j + 13, k + 8, air, 0);
		b(w, i + 13, j + 13, k + 9, air, 0);
		b(w, i + 13, j + 13, k + 10, air, 0);
		b(w, i + 13, j + 13, k + 11, air, 0);
		b(w, i + 13, j + 13, k + 12, air, 0);
		b(w, i + 13, j + 13, k + 13, air, 0);
		b(w, i + 13, j + 13, k + 14, air, 0);
		b(w, i + 13, j + 13, k + 15, air, 0);
		b(w, i + 13, j + 14, k, air, 0);
		b(w, i + 13, j + 14, k + 1, air, 0);
		b(w, i + 13, j + 14, k + 2, air, 0);
		b(w, i + 13, j + 14, k + 3, air, 0);
		b(w, i + 13, j + 14, k + 4, air, 0);
		b(w, i + 13, j + 14, k + 5, air, 0);
		b(w, i + 13, j + 14, k + 6, air, 0);
		b(w, i + 13, j + 14, k + 7, air, 0);
		b(w, i + 13, j + 14, k + 8, air, 0);
		b(w, i + 13, j + 14, k + 9, air, 0);
		b(w, i + 13, j + 14, k + 10, air, 0);
		b(w, i + 13, j + 14, k + 11, air, 0);
		b(w, i + 13, j + 14, k + 12, air, 0);
		b(w, i + 13, j + 14, k + 13, air, 0);
		b(w, i + 13, j + 14, k + 14, air, 0);
		b(w, i + 13, j + 14, k + 15, air, 0);
		b(w, i + 13, j + 15, k, air, 0);
		b(w, i + 13, j + 15, k + 1, air, 0);
		b(w, i + 13, j + 15, k + 2, air, 0);
		b(w, i + 13, j + 15, k + 3, air, 0);
		b(w, i + 13, j + 15, k + 4, air, 0);
		b(w, i + 13, j + 15, k + 5, air, 0);
		b(w, i + 13, j + 15, k + 6, air, 0);
		b(w, i + 13, j + 15, k + 7, air, 0);
		b(w, i + 13, j + 15, k + 8, air, 0);
		b(w, i + 13, j + 15, k + 9, air, 0);
		b(w, i + 13, j + 15, k + 10, air, 0);
		b(w, i + 13, j + 15, k + 11, air, 0);
		b(w, i + 13, j + 15, k + 12, air, 0);
		b(w, i + 13, j + 15, k + 13, air, 0);
		b(w, i + 13, j + 15, k + 14, air, 0);
		b(w, i + 13, j + 15, k + 15, air, 0);
		b(w, i + 13, j + 16, k, air, 0);
		b(w, i + 13, j + 16, k + 1, air, 0);
		b(w, i + 13, j + 16, k + 2, air, 0);
		b(w, i + 13, j + 16, k + 3, air, 0);
		b(w, i + 13, j + 16, k + 4, air, 0);
		b(w, i + 13, j + 16, k + 5, air, 0);
		b(w, i + 13, j + 16, k + 6, air, 0);
		b(w, i + 13, j + 16, k + 7, air, 0);
		b(w, i + 13, j + 16, k + 8, air, 0);
		b(w, i + 13, j + 16, k + 9, air, 0);
		b(w, i + 13, j + 16, k + 10, air, 0);
		b(w, i + 13, j + 16, k + 11, air, 0);
		b(w, i + 13, j + 16, k + 12, air, 0);
		b(w, i + 13, j + 16, k + 13, air, 0);
		b(w, i + 13, j + 16, k + 14, air, 0);
		b(w, i + 13, j + 16, k + 15, air, 0);
		b(w, i + 13, j + 17, k, air, 0);
		b(w, i + 13, j + 17, k + 1, air, 0);
		b(w, i + 13, j + 17, k + 2, air, 0);
		b(w, i + 13, j + 17, k + 3, air, 0);
		b(w, i + 13, j + 17, k + 4, air, 0);
		b(w, i + 13, j + 17, k + 5, air, 0);
		b(w, i + 13, j + 17, k + 6, air, 0);
		b(w, i + 13, j + 17, k + 7, air, 0);
		b(w, i + 13, j + 17, k + 8, air, 0);
		b(w, i + 13, j + 17, k + 9, air, 0);
		b(w, i + 13, j + 17, k + 10, air, 0);
		b(w, i + 13, j + 17, k + 11, air, 0);
		b(w, i + 13, j + 17, k + 12, air, 0);
		b(w, i + 13, j + 17, k + 13, air, 0);
		b(w, i + 13, j + 17, k + 14, air, 0);
		b(w, i + 13, j + 17, k + 15, air, 0);
		b(w, i + 13, j + 18, k, air, 0);
		b(w, i + 13, j + 18, k + 1, air, 0);
		b(w, i + 13, j + 18, k + 2, air, 0);
		b(w, i + 13, j + 18, k + 3, air, 0);
		b(w, i + 13, j + 18, k + 4, air, 0);
		b(w, i + 13, j + 18, k + 5, air, 0);
		b(w, i + 13, j + 18, k + 6, air, 0);
		b(w, i + 13, j + 18, k + 7, air, 0);
		b(w, i + 13, j + 18, k + 8, air, 0);
		b(w, i + 13, j + 18, k + 9, air, 0);
		b(w, i + 13, j + 18, k + 10, air, 0);
		b(w, i + 13, j + 18, k + 11, air, 0);
		b(w, i + 13, j + 18, k + 12, air, 0);
		b(w, i + 13, j + 18, k + 13, air, 0);
		b(w, i + 13, j + 18, k + 14, air, 0);
		b(w, i + 13, j + 18, k + 15, air, 0);
		b(w, i + 13, j + 19, k, air, 0);
		b(w, i + 13, j + 19, k + 1, air, 0);
		b(w, i + 13, j + 19, k + 2, air, 0);
		b(w, i + 13, j + 19, k + 3, air, 0);
		b(w, i + 13, j + 19, k + 4, air, 0);
		b(w, i + 13, j + 19, k + 5, air, 0);
		b(w, i + 13, j + 19, k + 6, air, 0);
		b(w, i + 13, j + 19, k + 7, air, 0);
		b(w, i + 13, j + 19, k + 8, air, 0);
		b(w, i + 13, j + 19, k + 9, air, 0);
		b(w, i + 13, j + 19, k + 10, air, 0);
		b(w, i + 13, j + 19, k + 11, air, 0);
		b(w, i + 13, j + 19, k + 12, air, 0);
		b(w, i + 13, j + 19, k + 13, air, 0);
		b(w, i + 13, j + 19, k + 14, air, 0);
		b(w, i + 13, j + 19, k + 15, air, 0);
		b(w, i + 13, j + 20, k, air, 0);
		b(w, i + 13, j + 20, k + 1, air, 0);
		b(w, i + 13, j + 20, k + 2, air, 0);
		b(w, i + 13, j + 20, k + 3, air, 0);
		b(w, i + 13, j + 20, k + 4, air, 0);
		b(w, i + 13, j + 20, k + 5, air, 0);
		b(w, i + 13, j + 20, k + 6, air, 0);
		b(w, i + 13, j + 20, k + 7, air, 0);
		b(w, i + 13, j + 20, k + 8, air, 0);
		b(w, i + 13, j + 20, k + 9, air, 0);
		b(w, i + 13, j + 20, k + 10, air, 0);
		b(w, i + 13, j + 20, k + 11, air, 0);
		b(w, i + 13, j + 20, k + 12, air, 0);
		b(w, i + 13, j + 20, k + 13, air, 0);
		b(w, i + 13, j + 20, k + 14, air, 0);
		b(w, i + 13, j + 20, k + 15, air, 0);
		b(w, i + 13, j + 21, k, air, 0);
		b(w, i + 13, j + 21, k + 1, air, 0);
		b(w, i + 13, j + 21, k + 2, air, 0);
		b(w, i + 13, j + 21, k + 3, air, 0);
		b(w, i + 13, j + 21, k + 4, air, 0);
		b(w, i + 13, j + 21, k + 5, air, 0);
		b(w, i + 13, j + 21, k + 6, air, 0);
		b(w, i + 13, j + 21, k + 7, air, 0);
		b(w, i + 13, j + 21, k + 8, air, 0);
		b(w, i + 13, j + 21, k + 9, air, 0);
		b(w, i + 13, j + 21, k + 10, air, 0);
		b(w, i + 13, j + 21, k + 11, air, 0);
		b(w, i + 13, j + 21, k + 12, air, 0);
		b(w, i + 13, j + 21, k + 13, air, 0);
		b(w, i + 13, j + 21, k + 14, air, 0);
		b(w, i + 13, j + 21, k + 15, air, 0);
		b(w, i + 13, j + 22, k, air, 0);
		b(w, i + 13, j + 22, k + 1, air, 0);
		b(w, i + 13, j + 22, k + 2, air, 0);
		b(w, i + 13, j + 22, k + 3, air, 0);
		b(w, i + 13, j + 22, k + 4, air, 0);
		b(w, i + 13, j + 22, k + 5, air, 0);
		b(w, i + 13, j + 22, k + 6, air, 0);
		b(w, i + 13, j + 22, k + 7, air, 0);
		b(w, i + 13, j + 22, k + 8, air, 0);
		b(w, i + 13, j + 22, k + 9, air, 0);
		b(w, i + 13, j + 22, k + 10, air, 0);
		b(w, i + 13, j + 22, k + 11, air, 0);
		b(w, i + 13, j + 22, k + 12, air, 0);
		b(w, i + 13, j + 22, k + 13, air, 0);
		b(w, i + 13, j + 22, k + 14, air, 0);
		b(w, i + 13, j + 22, k + 15, air, 0);
		b(w, i + 13, j + 23, k, air, 0);
		b(w, i + 13, j + 23, k + 1, air, 0);
		b(w, i + 13, j + 23, k + 2, air, 0);
		b(w, i + 13, j + 23, k + 3, air, 0);
		b(w, i + 13, j + 23, k + 4, air, 0);
		b(w, i + 13, j + 23, k + 5, air, 0);
		b(w, i + 13, j + 23, k + 6, air, 0);
		b(w, i + 13, j + 23, k + 7, air, 0);
		b(w, i + 13, j + 23, k + 8, air, 0);
		b(w, i + 13, j + 23, k + 9, air, 0);
		b(w, i + 13, j + 23, k + 10, air, 0);
		b(w, i + 13, j + 23, k + 11, air, 0);
		b(w, i + 13, j + 23, k + 12, air, 0);
		b(w, i + 13, j + 23, k + 13, air, 0);
		b(w, i + 13, j + 23, k + 14, air, 0);
		b(w, i + 13, j + 23, k + 15, air, 0);
		b(w, i + 13, j + 24, k, air, 0);
		b(w, i + 13, j + 24, k + 1, air, 0);
		b(w, i + 13, j + 24, k + 2, air, 0);
		b(w, i + 13, j + 24, k + 3, air, 0);
		b(w, i + 13, j + 24, k + 4, air, 0);
		b(w, i + 13, j + 24, k + 5, air, 0);
		b(w, i + 13, j + 24, k + 6, air, 0);
		b(w, i + 13, j + 24, k + 7, air, 0);
		b(w, i + 13, j + 24, k + 8, air, 0);
		b(w, i + 13, j + 24, k + 9, air, 0);
		b(w, i + 13, j + 24, k + 10, air, 0);
		b(w, i + 13, j + 24, k + 11, air, 0);
		b(w, i + 13, j + 24, k + 12, air, 0);
		b(w, i + 13, j + 24, k + 13, air, 0);
		b(w, i + 13, j + 24, k + 14, air, 0);
		b(w, i + 13, j + 24, k + 15, air, 0);
		b(w, i + 13, j + 25, k, air, 0);
		b(w, i + 13, j + 25, k + 1, air, 0);
		b(w, i + 13, j + 25, k + 2, air, 0);
		b(w, i + 13, j + 25, k + 3, air, 0);
		b(w, i + 13, j + 25, k + 4, air, 0);
		b(w, i + 13, j + 25, k + 5, air, 0);
		b(w, i + 13, j + 25, k + 6, air, 0);
		b(w, i + 13, j + 25, k + 7, air, 0);
		b(w, i + 13, j + 25, k + 8, air, 0);
		b(w, i + 13, j + 25, k + 9, air, 0);
		b(w, i + 13, j + 25, k + 10, air, 0);
		b(w, i + 13, j + 25, k + 11, air, 0);
		b(w, i + 13, j + 25, k + 12, air, 0);
		b(w, i + 13, j + 25, k + 13, air, 0);
		b(w, i + 13, j + 25, k + 14, air, 0);
		b(w, i + 13, j + 25, k + 15, air, 0);
		b(w, i + 13, j + 26, k, air, 0);
		b(w, i + 13, j + 26, k + 1, air, 0);
		b(w, i + 13, j + 26, k + 2, air, 0);
		b(w, i + 13, j + 26, k + 3, air, 0);
		b(w, i + 13, j + 26, k + 4, air, 0);
		b(w, i + 13, j + 26, k + 5, air, 0);
		b(w, i + 13, j + 26, k + 6, air, 0);
		b(w, i + 13, j + 26, k + 7, air, 0);
		b(w, i + 13, j + 26, k + 8, air, 0);
		b(w, i + 13, j + 26, k + 9, air, 0);
		b(w, i + 13, j + 26, k + 10, air, 0);
		b(w, i + 13, j + 26, k + 11, air, 0);
		b(w, i + 13, j + 26, k + 12, air, 0);
		b(w, i + 13, j + 26, k + 13, air, 0);
		b(w, i + 13, j + 26, k + 14, air, 0);
		b(w, i + 13, j + 26, k + 15, air, 0);
		b(w, i + 13, j + 27, k, air, 0);
		b(w, i + 13, j + 27, k + 1, air, 0);
		b(w, i + 13, j + 27, k + 2, air, 0);
		b(w, i + 13, j + 27, k + 3, air, 0);
		b(w, i + 13, j + 27, k + 4, air, 0);
		b(w, i + 13, j + 27, k + 5, air, 0);
		b(w, i + 13, j + 27, k + 6, air, 0);
		b(w, i + 13, j + 27, k + 7, air, 0);
		b(w, i + 13, j + 27, k + 8, air, 0);
		b(w, i + 13, j + 27, k + 9, air, 0);
		b(w, i + 13, j + 27, k + 10, air, 0);
		b(w, i + 13, j + 27, k + 11, air, 0);
		b(w, i + 13, j + 27, k + 12, air, 0);
		b(w, i + 13, j + 27, k + 13, air, 0);
		b(w, i + 13, j + 27, k + 14, air, 0);
		b(w, i + 13, j + 27, k + 15, air, 0);
		b(w, i + 13, j + 28, k, air, 0);
		b(w, i + 13, j + 28, k + 1, air, 0);
		b(w, i + 13, j + 28, k + 2, air, 0);
		b(w, i + 13, j + 28, k + 3, air, 0);
		b(w, i + 13, j + 28, k + 4, air, 0);
		b(w, i + 13, j + 28, k + 5, air, 0);
		b(w, i + 13, j + 28, k + 6, air, 0);
		b(w, i + 13, j + 28, k + 7, air, 0);
		b(w, i + 13, j + 28, k + 8, air, 0);
		b(w, i + 13, j + 28, k + 9, air, 0);
		b(w, i + 13, j + 28, k + 10, air, 0);
		b(w, i + 13, j + 28, k + 11, air, 0);
		b(w, i + 13, j + 28, k + 12, air, 0);
		b(w, i + 13, j + 28, k + 13, air, 0);
		b(w, i + 13, j + 28, k + 14, air, 0);
		b(w, i + 13, j + 28, k + 15, air, 0);
		b(w, i + 14, j, k, blockTatooineSand, 0);
		b(w, i + 14, j, k + 1, blockTatooineSand, 0);
		b(w, i + 14, j, k + 2, blockTatooineSand, 0);
		b(w, i + 14, j, k + 3, blockTatooineSand, 0);
		b(w, i + 14, j, k + 4, blockTatooineSand, 0);
		b(w, i + 14, j, k + 5, blockTatooineSand, 0);
		b(w, i + 14, j, k + 6, blockTatooineSand, 0);
		b(w, i + 14, j, k + 7, blockTatooineSand, 0);
		b(w, i + 14, j, k + 8, blockTatooineSand, 0);
		b(w, i + 14, j, k + 9, blockTatooineSand, 0);
		b(w, i + 14, j, k + 10, blockTatooineSand, 0);
		b(w, i + 14, j, k + 11, blockTatooineSand, 0);
		b(w, i + 14, j, k + 12, blockTatooineSand, 0);
		b(w, i + 14, j, k + 13, blockTatooineSand, 0);
		b(w, i + 14, j, k + 14, blockTatooineSand, 0);
		b(w, i + 14, j, k + 15, blockTatooineSand, 0);
		b(w, i + 14, j + 1, k, air, 0);
		generate_13(w, i, j, k);
	}

	public static void generate_13(World w, int i, int j, int k)
	{
		b(w, i + 14, j + 1, k + 1, air, 0);
		b(w, i + 14, j + 1, k + 2, air, 0);
		b(w, i + 14, j + 1, k + 3, sandstone_stairs, 0);
		m(w, i + 14, j + 1, k + 3, 2);
		b(w, i + 14, j + 1, k + 4, sandstone, 0);
		b(w, i + 14, j + 1, k + 5, sandstone, 0);
		b(w, i + 14, j + 1, k + 6, sandstone, 0);
		b(w, i + 14, j + 1, k + 7, sandstone, 0);
		b(w, i + 14, j + 1, k + 8, sandstone, 0);
		b(w, i + 14, j + 1, k + 9, sandstone_stairs, 0);
		m(w, i + 14, j + 1, k + 9, 3);
		b(w, i + 14, j + 1, k + 10, air, 0);
		b(w, i + 14, j + 1, k + 11, air, 0);
		b(w, i + 14, j + 1, k + 12, air, 0);
		b(w, i + 14, j + 1, k + 13, air, 0);
		b(w, i + 14, j + 1, k + 14, sandstone, 0);
		m(w, i + 14, j + 1, k + 14, 2);
		b(w, i + 14, j + 1, k + 15, air, 0);
		b(w, i + 14, j + 2, k, air, 0);
		b(w, i + 14, j + 2, k + 1, air, 0);
		b(w, i + 14, j + 2, k + 2, air, 0);
		b(w, i + 14, j + 2, k + 3, air, 0);
		b(w, i + 14, j + 2, k + 4, air, 0);
		b(w, i + 14, j + 2, k + 5, air, 0);
		b(w, i + 14, j + 2, k + 6, air, 0);
		b(w, i + 14, j + 2, k + 7, air, 0);
		b(w, i + 14, j + 2, k + 8, air, 0);
		b(w, i + 14, j + 2, k + 9, air, 0);
		b(w, i + 14, j + 2, k + 10, air, 0);
		b(w, i + 14, j + 2, k + 11, air, 0);
		b(w, i + 14, j + 2, k + 12, air, 0);
		b(w, i + 14, j + 2, k + 13, air, 0);
		b(w, i + 14, j + 2, k + 14, glass_pane, 0);
		b(w, i + 14, j + 2, k + 15, air, 0);
		b(w, i + 14, j + 3, k, air, 0);
		b(w, i + 14, j + 3, k + 1, air, 0);
		b(w, i + 14, j + 3, k + 2, air, 0);
		b(w, i + 14, j + 3, k + 3, air, 0);
		b(w, i + 14, j + 3, k + 4, air, 0);
		b(w, i + 14, j + 3, k + 5, air, 0);
		b(w, i + 14, j + 3, k + 6, air, 0);
		b(w, i + 14, j + 3, k + 7, air, 0);
		b(w, i + 14, j + 3, k + 8, air, 0);
		b(w, i + 14, j + 3, k + 9, air, 0);
		b(w, i + 14, j + 3, k + 10, air, 0);
		b(w, i + 14, j + 3, k + 11, air, 0);
		b(w, i + 14, j + 3, k + 12, air, 0);
		b(w, i + 14, j + 3, k + 13, air, 0);
		b(w, i + 14, j + 3, k + 14, glass_pane, 0);
		b(w, i + 14, j + 3, k + 15, air, 0);
		b(w, i + 14, j + 4, k, air, 0);
		b(w, i + 14, j + 4, k + 1, air, 0);
		b(w, i + 14, j + 4, k + 2, air, 0);
		b(w, i + 14, j + 4, k + 3, air, 0);
		b(w, i + 14, j + 4, k + 4, air, 0);
		b(w, i + 14, j + 4, k + 5, air, 0);
		b(w, i + 14, j + 4, k + 6, air, 0);
		b(w, i + 14, j + 4, k + 7, air, 0);
		b(w, i + 14, j + 4, k + 8, air, 0);
		b(w, i + 14, j + 4, k + 9, air, 0);
		b(w, i + 14, j + 4, k + 10, air, 0);
		b(w, i + 14, j + 4, k + 11, air, 0);
		b(w, i + 14, j + 4, k + 12, air, 0);
		b(w, i + 14, j + 4, k + 13, air, 0);
		b(w, i + 14, j + 4, k + 14, glass_pane, 0);
		b(w, i + 14, j + 4, k + 15, air, 0);
		b(w, i + 14, j + 5, k, air, 0);
		b(w, i + 14, j + 5, k + 1, air, 0);
		b(w, i + 14, j + 5, k + 2, air, 0);
		b(w, i + 14, j + 5, k + 3, air, 0);
		b(w, i + 14, j + 5, k + 4, air, 0);
		b(w, i + 14, j + 5, k + 5, air, 0);
		b(w, i + 14, j + 5, k + 6, air, 0);
		b(w, i + 14, j + 5, k + 7, air, 0);
		b(w, i + 14, j + 5, k + 8, sandstone_stairs, 0);
		m(w, i + 14, j + 5, k + 8, 4);
		b(w, i + 14, j + 5, k + 9, air, 0);
		b(w, i + 14, j + 5, k + 10, air, 0);
		b(w, i + 14, j + 5, k + 11, air, 0);
		b(w, i + 14, j + 5, k + 12, air, 0);
		b(w, i + 14, j + 5, k + 13, air, 0);
		b(w, i + 14, j + 5, k + 14, sandstone, 0);
		m(w, i + 14, j + 5, k + 14, 2);
		b(w, i + 14, j + 5, k + 15, air, 0);
		b(w, i + 14, j + 6, k, air, 0);
		b(w, i + 14, j + 6, k + 1, air, 0);
		b(w, i + 14, j + 6, k + 2, air, 0);
		b(w, i + 14, j + 6, k + 3, air, 0);
		b(w, i + 14, j + 6, k + 4, air, 0);
		b(w, i + 14, j + 6, k + 5, air, 0);
		b(w, i + 14, j + 6, k + 6, air, 0);
		b(w, i + 14, j + 6, k + 7, air, 0);
		b(w, i + 14, j + 6, k + 8, sandstone, 0);
		b(w, i + 14, j + 6, k + 9, sandstone, 0);
		b(w, i + 14, j + 6, k + 10, sandstone, 0);
		b(w, i + 14, j + 6, k + 11, sandstone, 0);
		b(w, i + 14, j + 6, k + 12, sandstone, 0);
		b(w, i + 14, j + 6, k + 13, sandstone, 0);
		b(w, i + 14, j + 6, k + 14, sandstone, 0);
		b(w, i + 14, j + 6, k + 15, air, 0);
		b(w, i + 14, j + 7, k, air, 0);
		b(w, i + 14, j + 7, k + 1, air, 0);
		b(w, i + 14, j + 7, k + 2, air, 0);
		b(w, i + 14, j + 7, k + 3, air, 0);
		b(w, i + 14, j + 7, k + 4, air, 0);
		b(w, i + 14, j + 7, k + 5, air, 0);
		b(w, i + 14, j + 7, k + 6, air, 0);
		b(w, i + 14, j + 7, k + 7, air, 0);
		b(w, i + 14, j + 7, k + 8, sandstone, 0);
		b(w, i + 14, j + 7, k + 9, sandstone_stairs, 0);
		m(w, i + 14, j + 7, k + 9, 3);
		b(w, i + 14, j + 7, k + 10, air, 0);
		b(w, i + 14, j + 7, k + 11, air, 0);
		b(w, i + 14, j + 7, k + 12, air, 0);
		b(w, i + 14, j + 7, k + 13, air, 0);
		b(w, i + 14, j + 7, k + 14, air, 0);
		b(w, i + 14, j + 7, k + 15, air, 0);
		b(w, i + 14, j + 8, k, air, 0);
		b(w, i + 14, j + 8, k + 1, air, 0);
		b(w, i + 14, j + 8, k + 2, air, 0);
		b(w, i + 14, j + 8, k + 3, air, 0);
		b(w, i + 14, j + 8, k + 4, air, 0);
		b(w, i + 14, j + 8, k + 5, air, 0);
		b(w, i + 14, j + 8, k + 6, sandstone, 0);
		b(w, i + 14, j + 8, k + 7, sandstone, 0);
		b(w, i + 14, j + 8, k + 8, sandstone, 0);
		b(w, i + 14, j + 8, k + 9, air, 0);
		b(w, i + 14, j + 8, k + 10, air, 0);
		b(w, i + 14, j + 8, k + 11, air, 0);
		b(w, i + 14, j + 8, k + 12, air, 0);
		b(w, i + 14, j + 8, k + 13, air, 0);
		b(w, i + 14, j + 8, k + 14, air, 0);
		b(w, i + 14, j + 8, k + 15, air, 0);
		b(w, i + 14, j + 9, k, air, 0);
		b(w, i + 14, j + 9, k + 1, air, 0);
		b(w, i + 14, j + 9, k + 2, air, 0);
		b(w, i + 14, j + 9, k + 3, air, 0);
		b(w, i + 14, j + 9, k + 4, air, 0);
		b(w, i + 14, j + 9, k + 5, air, 0);
		b(w, i + 14, j + 9, k + 6, stone_slab, 0);
		m(w, i + 14, j + 9, k + 6, 1);
		b(w, i + 14, j + 9, k + 7, air, 0);
		b(w, i + 14, j + 9, k + 8, air, 0);
		b(w, i + 14, j + 9, k + 9, air, 0);
		b(w, i + 14, j + 9, k + 10, air, 0);
		b(w, i + 14, j + 9, k + 11, air, 0);
		b(w, i + 14, j + 9, k + 12, air, 0);
		b(w, i + 14, j + 9, k + 13, air, 0);
		b(w, i + 14, j + 9, k + 14, air, 0);
		b(w, i + 14, j + 9, k + 15, air, 0);
		b(w, i + 14, j + 10, k, air, 0);
		b(w, i + 14, j + 10, k + 1, air, 0);
		b(w, i + 14, j + 10, k + 2, air, 0);
		b(w, i + 14, j + 10, k + 3, air, 0);
		b(w, i + 14, j + 10, k + 4, air, 0);
		b(w, i + 14, j + 10, k + 5, air, 0);
		b(w, i + 14, j + 10, k + 6, air, 0);
		b(w, i + 14, j + 10, k + 7, air, 0);
		b(w, i + 14, j + 10, k + 8, air, 0);
		b(w, i + 14, j + 10, k + 9, air, 0);
		b(w, i + 14, j + 10, k + 10, air, 0);
		b(w, i + 14, j + 10, k + 11, air, 0);
		b(w, i + 14, j + 10, k + 12, air, 0);
		b(w, i + 14, j + 10, k + 13, air, 0);
		b(w, i + 14, j + 10, k + 14, air, 0);
		b(w, i + 14, j + 10, k + 15, air, 0);
		b(w, i + 14, j + 11, k, air, 0);
		b(w, i + 14, j + 11, k + 1, air, 0);
		b(w, i + 14, j + 11, k + 2, air, 0);
		b(w, i + 14, j + 11, k + 3, air, 0);
		b(w, i + 14, j + 11, k + 4, air, 0);
		b(w, i + 14, j + 11, k + 5, air, 0);
		b(w, i + 14, j + 11, k + 6, air, 0);
		b(w, i + 14, j + 11, k + 7, air, 0);
		b(w, i + 14, j + 11, k + 8, air, 0);
		b(w, i + 14, j + 11, k + 9, air, 0);
		b(w, i + 14, j + 11, k + 10, air, 0);
		b(w, i + 14, j + 11, k + 11, air, 0);
		b(w, i + 14, j + 11, k + 12, air, 0);
		b(w, i + 14, j + 11, k + 13, air, 0);
		b(w, i + 14, j + 11, k + 14, air, 0);
		b(w, i + 14, j + 11, k + 15, air, 0);
		b(w, i + 14, j + 12, k, air, 0);
		b(w, i + 14, j + 12, k + 1, air, 0);
		b(w, i + 14, j + 12, k + 2, air, 0);
		b(w, i + 14, j + 12, k + 3, air, 0);
		b(w, i + 14, j + 12, k + 4, air, 0);
		b(w, i + 14, j + 12, k + 5, air, 0);
		b(w, i + 14, j + 12, k + 6, air, 0);
		b(w, i + 14, j + 12, k + 7, air, 0);
		b(w, i + 14, j + 12, k + 8, air, 0);
		b(w, i + 14, j + 12, k + 9, air, 0);
		b(w, i + 14, j + 12, k + 10, air, 0);
		b(w, i + 14, j + 12, k + 11, air, 0);
		b(w, i + 14, j + 12, k + 12, air, 0);
		b(w, i + 14, j + 12, k + 13, air, 0);
		b(w, i + 14, j + 12, k + 14, air, 0);
		b(w, i + 14, j + 12, k + 15, air, 0);
		b(w, i + 14, j + 13, k, air, 0);
		b(w, i + 14, j + 13, k + 1, air, 0);
		b(w, i + 14, j + 13, k + 2, air, 0);
		b(w, i + 14, j + 13, k + 3, air, 0);
		b(w, i + 14, j + 13, k + 4, air, 0);
		b(w, i + 14, j + 13, k + 5, air, 0);
		b(w, i + 14, j + 13, k + 6, air, 0);
		b(w, i + 14, j + 13, k + 7, air, 0);
		b(w, i + 14, j + 13, k + 8, air, 0);
		b(w, i + 14, j + 13, k + 9, air, 0);
		b(w, i + 14, j + 13, k + 10, air, 0);
		b(w, i + 14, j + 13, k + 11, air, 0);
		b(w, i + 14, j + 13, k + 12, air, 0);
		b(w, i + 14, j + 13, k + 13, air, 0);
		b(w, i + 14, j + 13, k + 14, air, 0);
		b(w, i + 14, j + 13, k + 15, air, 0);
		b(w, i + 14, j + 14, k, air, 0);
		b(w, i + 14, j + 14, k + 1, air, 0);
		b(w, i + 14, j + 14, k + 2, air, 0);
		b(w, i + 14, j + 14, k + 3, air, 0);
		b(w, i + 14, j + 14, k + 4, air, 0);
		b(w, i + 14, j + 14, k + 5, air, 0);
		b(w, i + 14, j + 14, k + 6, air, 0);
		b(w, i + 14, j + 14, k + 7, air, 0);
		b(w, i + 14, j + 14, k + 8, air, 0);
		b(w, i + 14, j + 14, k + 9, air, 0);
		b(w, i + 14, j + 14, k + 10, air, 0);
		b(w, i + 14, j + 14, k + 11, air, 0);
		b(w, i + 14, j + 14, k + 12, air, 0);
		b(w, i + 14, j + 14, k + 13, air, 0);
		b(w, i + 14, j + 14, k + 14, air, 0);
		b(w, i + 14, j + 14, k + 15, air, 0);
		b(w, i + 14, j + 15, k, air, 0);
		b(w, i + 14, j + 15, k + 1, air, 0);
		b(w, i + 14, j + 15, k + 2, air, 0);
		b(w, i + 14, j + 15, k + 3, air, 0);
		b(w, i + 14, j + 15, k + 4, air, 0);
		b(w, i + 14, j + 15, k + 5, air, 0);
		b(w, i + 14, j + 15, k + 6, air, 0);
		b(w, i + 14, j + 15, k + 7, air, 0);
		b(w, i + 14, j + 15, k + 8, air, 0);
		b(w, i + 14, j + 15, k + 9, air, 0);
		b(w, i + 14, j + 15, k + 10, air, 0);
		b(w, i + 14, j + 15, k + 11, air, 0);
		b(w, i + 14, j + 15, k + 12, air, 0);
		b(w, i + 14, j + 15, k + 13, air, 0);
		b(w, i + 14, j + 15, k + 14, air, 0);
		b(w, i + 14, j + 15, k + 15, air, 0);
		b(w, i + 14, j + 16, k, air, 0);
		b(w, i + 14, j + 16, k + 1, air, 0);
		b(w, i + 14, j + 16, k + 2, air, 0);
		b(w, i + 14, j + 16, k + 3, air, 0);
		b(w, i + 14, j + 16, k + 4, air, 0);
		b(w, i + 14, j + 16, k + 5, air, 0);
		b(w, i + 14, j + 16, k + 6, air, 0);
		b(w, i + 14, j + 16, k + 7, air, 0);
		b(w, i + 14, j + 16, k + 8, air, 0);
		b(w, i + 14, j + 16, k + 9, air, 0);
		b(w, i + 14, j + 16, k + 10, air, 0);
		b(w, i + 14, j + 16, k + 11, air, 0);
		b(w, i + 14, j + 16, k + 12, air, 0);
		b(w, i + 14, j + 16, k + 13, air, 0);
		b(w, i + 14, j + 16, k + 14, air, 0);
		b(w, i + 14, j + 16, k + 15, air, 0);
		b(w, i + 14, j + 17, k, air, 0);
		b(w, i + 14, j + 17, k + 1, air, 0);
		b(w, i + 14, j + 17, k + 2, air, 0);
		b(w, i + 14, j + 17, k + 3, air, 0);
		b(w, i + 14, j + 17, k + 4, air, 0);
		b(w, i + 14, j + 17, k + 5, air, 0);
		b(w, i + 14, j + 17, k + 6, air, 0);
		b(w, i + 14, j + 17, k + 7, air, 0);
		b(w, i + 14, j + 17, k + 8, air, 0);
		b(w, i + 14, j + 17, k + 9, air, 0);
		b(w, i + 14, j + 17, k + 10, air, 0);
		b(w, i + 14, j + 17, k + 11, air, 0);
		b(w, i + 14, j + 17, k + 12, air, 0);
		b(w, i + 14, j + 17, k + 13, air, 0);
		b(w, i + 14, j + 17, k + 14, air, 0);
		b(w, i + 14, j + 17, k + 15, air, 0);
		b(w, i + 14, j + 18, k, air, 0);
		b(w, i + 14, j + 18, k + 1, air, 0);
		b(w, i + 14, j + 18, k + 2, air, 0);
		b(w, i + 14, j + 18, k + 3, air, 0);
		b(w, i + 14, j + 18, k + 4, air, 0);
		b(w, i + 14, j + 18, k + 5, air, 0);
		b(w, i + 14, j + 18, k + 6, air, 0);
		b(w, i + 14, j + 18, k + 7, air, 0);
		b(w, i + 14, j + 18, k + 8, air, 0);
		b(w, i + 14, j + 18, k + 9, air, 0);
		b(w, i + 14, j + 18, k + 10, air, 0);
		b(w, i + 14, j + 18, k + 11, air, 0);
		b(w, i + 14, j + 18, k + 12, air, 0);
		b(w, i + 14, j + 18, k + 13, air, 0);
		b(w, i + 14, j + 18, k + 14, air, 0);
		b(w, i + 14, j + 18, k + 15, air, 0);
		b(w, i + 14, j + 19, k, air, 0);
		b(w, i + 14, j + 19, k + 1, air, 0);
		b(w, i + 14, j + 19, k + 2, air, 0);
		b(w, i + 14, j + 19, k + 3, air, 0);
		b(w, i + 14, j + 19, k + 4, air, 0);
		b(w, i + 14, j + 19, k + 5, air, 0);
		b(w, i + 14, j + 19, k + 6, air, 0);
		b(w, i + 14, j + 19, k + 7, air, 0);
		b(w, i + 14, j + 19, k + 8, air, 0);
		b(w, i + 14, j + 19, k + 9, air, 0);
		b(w, i + 14, j + 19, k + 10, air, 0);
		b(w, i + 14, j + 19, k + 11, air, 0);
		b(w, i + 14, j + 19, k + 12, air, 0);
		b(w, i + 14, j + 19, k + 13, air, 0);
		b(w, i + 14, j + 19, k + 14, air, 0);
		b(w, i + 14, j + 19, k + 15, air, 0);
		b(w, i + 14, j + 20, k, air, 0);
		b(w, i + 14, j + 20, k + 1, air, 0);
		b(w, i + 14, j + 20, k + 2, air, 0);
		b(w, i + 14, j + 20, k + 3, air, 0);
		b(w, i + 14, j + 20, k + 4, air, 0);
		b(w, i + 14, j + 20, k + 5, air, 0);
		b(w, i + 14, j + 20, k + 6, air, 0);
		b(w, i + 14, j + 20, k + 7, air, 0);
		b(w, i + 14, j + 20, k + 8, air, 0);
		b(w, i + 14, j + 20, k + 9, air, 0);
		b(w, i + 14, j + 20, k + 10, air, 0);
		b(w, i + 14, j + 20, k + 11, air, 0);
		b(w, i + 14, j + 20, k + 12, air, 0);
		b(w, i + 14, j + 20, k + 13, air, 0);
		b(w, i + 14, j + 20, k + 14, air, 0);
		b(w, i + 14, j + 20, k + 15, air, 0);
		b(w, i + 14, j + 21, k, air, 0);
		b(w, i + 14, j + 21, k + 1, air, 0);
		b(w, i + 14, j + 21, k + 2, air, 0);
		b(w, i + 14, j + 21, k + 3, air, 0);
		b(w, i + 14, j + 21, k + 4, air, 0);
		b(w, i + 14, j + 21, k + 5, air, 0);
		b(w, i + 14, j + 21, k + 6, air, 0);
		b(w, i + 14, j + 21, k + 7, air, 0);
		b(w, i + 14, j + 21, k + 8, air, 0);
		b(w, i + 14, j + 21, k + 9, air, 0);
		b(w, i + 14, j + 21, k + 10, air, 0);
		b(w, i + 14, j + 21, k + 11, air, 0);
		b(w, i + 14, j + 21, k + 12, air, 0);
		b(w, i + 14, j + 21, k + 13, air, 0);
		b(w, i + 14, j + 21, k + 14, air, 0);
		b(w, i + 14, j + 21, k + 15, air, 0);
		b(w, i + 14, j + 22, k, air, 0);
		b(w, i + 14, j + 22, k + 1, air, 0);
		b(w, i + 14, j + 22, k + 2, air, 0);
		b(w, i + 14, j + 22, k + 3, air, 0);
		b(w, i + 14, j + 22, k + 4, air, 0);
		b(w, i + 14, j + 22, k + 5, air, 0);
		b(w, i + 14, j + 22, k + 6, air, 0);
		b(w, i + 14, j + 22, k + 7, air, 0);
		b(w, i + 14, j + 22, k + 8, air, 0);
		b(w, i + 14, j + 22, k + 9, air, 0);
		b(w, i + 14, j + 22, k + 10, air, 0);
		b(w, i + 14, j + 22, k + 11, air, 0);
		b(w, i + 14, j + 22, k + 12, air, 0);
		b(w, i + 14, j + 22, k + 13, air, 0);
		b(w, i + 14, j + 22, k + 14, air, 0);
		b(w, i + 14, j + 22, k + 15, air, 0);
		b(w, i + 14, j + 23, k, air, 0);
		b(w, i + 14, j + 23, k + 1, air, 0);
		b(w, i + 14, j + 23, k + 2, air, 0);
		b(w, i + 14, j + 23, k + 3, air, 0);
		b(w, i + 14, j + 23, k + 4, air, 0);
		b(w, i + 14, j + 23, k + 5, air, 0);
		b(w, i + 14, j + 23, k + 6, air, 0);
		b(w, i + 14, j + 23, k + 7, air, 0);
		b(w, i + 14, j + 23, k + 8, air, 0);
		b(w, i + 14, j + 23, k + 9, air, 0);
		b(w, i + 14, j + 23, k + 10, air, 0);
		b(w, i + 14, j + 23, k + 11, air, 0);
		b(w, i + 14, j + 23, k + 12, air, 0);
		b(w, i + 14, j + 23, k + 13, air, 0);
		b(w, i + 14, j + 23, k + 14, air, 0);
		b(w, i + 14, j + 23, k + 15, air, 0);
		b(w, i + 14, j + 24, k, air, 0);
		b(w, i + 14, j + 24, k + 1, air, 0);
		b(w, i + 14, j + 24, k + 2, air, 0);
		b(w, i + 14, j + 24, k + 3, air, 0);
		b(w, i + 14, j + 24, k + 4, air, 0);
		b(w, i + 14, j + 24, k + 5, air, 0);
		b(w, i + 14, j + 24, k + 6, air, 0);
		b(w, i + 14, j + 24, k + 7, air, 0);
		b(w, i + 14, j + 24, k + 8, air, 0);
		b(w, i + 14, j + 24, k + 9, air, 0);
		b(w, i + 14, j + 24, k + 10, air, 0);
		b(w, i + 14, j + 24, k + 11, air, 0);
		b(w, i + 14, j + 24, k + 12, air, 0);
		b(w, i + 14, j + 24, k + 13, air, 0);
		b(w, i + 14, j + 24, k + 14, air, 0);
		b(w, i + 14, j + 24, k + 15, air, 0);
		b(w, i + 14, j + 25, k, air, 0);
		b(w, i + 14, j + 25, k + 1, air, 0);
		b(w, i + 14, j + 25, k + 2, air, 0);
		b(w, i + 14, j + 25, k + 3, air, 0);
		b(w, i + 14, j + 25, k + 4, air, 0);
		b(w, i + 14, j + 25, k + 5, air, 0);
		b(w, i + 14, j + 25, k + 6, air, 0);
		b(w, i + 14, j + 25, k + 7, air, 0);
		b(w, i + 14, j + 25, k + 8, air, 0);
		b(w, i + 14, j + 25, k + 9, air, 0);
		b(w, i + 14, j + 25, k + 10, air, 0);
		b(w, i + 14, j + 25, k + 11, air, 0);
		b(w, i + 14, j + 25, k + 12, air, 0);
		b(w, i + 14, j + 25, k + 13, air, 0);
		b(w, i + 14, j + 25, k + 14, air, 0);
		b(w, i + 14, j + 25, k + 15, air, 0);
		b(w, i + 14, j + 26, k, air, 0);
		b(w, i + 14, j + 26, k + 1, air, 0);
		b(w, i + 14, j + 26, k + 2, air, 0);
		b(w, i + 14, j + 26, k + 3, air, 0);
		b(w, i + 14, j + 26, k + 4, air, 0);
		b(w, i + 14, j + 26, k + 5, air, 0);
		b(w, i + 14, j + 26, k + 6, air, 0);
		b(w, i + 14, j + 26, k + 7, air, 0);
		b(w, i + 14, j + 26, k + 8, air, 0);
		b(w, i + 14, j + 26, k + 9, air, 0);
		b(w, i + 14, j + 26, k + 10, air, 0);
		b(w, i + 14, j + 26, k + 11, air, 0);
		b(w, i + 14, j + 26, k + 12, air, 0);
		b(w, i + 14, j + 26, k + 13, air, 0);
		b(w, i + 14, j + 26, k + 14, air, 0);
		b(w, i + 14, j + 26, k + 15, air, 0);
		b(w, i + 14, j + 27, k, air, 0);
		b(w, i + 14, j + 27, k + 1, air, 0);
		b(w, i + 14, j + 27, k + 2, air, 0);
		b(w, i + 14, j + 27, k + 3, air, 0);
		b(w, i + 14, j + 27, k + 4, air, 0);
		b(w, i + 14, j + 27, k + 5, air, 0);
		b(w, i + 14, j + 27, k + 6, air, 0);
		b(w, i + 14, j + 27, k + 7, air, 0);
		b(w, i + 14, j + 27, k + 8, air, 0);
		b(w, i + 14, j + 27, k + 9, air, 0);
		b(w, i + 14, j + 27, k + 10, air, 0);
		b(w, i + 14, j + 27, k + 11, air, 0);
		b(w, i + 14, j + 27, k + 12, air, 0);
		b(w, i + 14, j + 27, k + 13, air, 0);
		b(w, i + 14, j + 27, k + 14, air, 0);
		b(w, i + 14, j + 27, k + 15, air, 0);
		b(w, i + 14, j + 28, k, air, 0);
		b(w, i + 14, j + 28, k + 1, air, 0);
		b(w, i + 14, j + 28, k + 2, air, 0);
		b(w, i + 14, j + 28, k + 3, air, 0);
		b(w, i + 14, j + 28, k + 4, air, 0);
		b(w, i + 14, j + 28, k + 5, air, 0);
		b(w, i + 14, j + 28, k + 6, air, 0);
		b(w, i + 14, j + 28, k + 7, air, 0);
		b(w, i + 14, j + 28, k + 8, air, 0);
		b(w, i + 14, j + 28, k + 9, air, 0);
		b(w, i + 14, j + 28, k + 10, air, 0);
		b(w, i + 14, j + 28, k + 11, air, 0);
		b(w, i + 14, j + 28, k + 12, air, 0);
		b(w, i + 14, j + 28, k + 13, air, 0);
		b(w, i + 14, j + 28, k + 14, air, 0);
		b(w, i + 14, j + 28, k + 15, air, 0);
		b(w, i + 15, j, k, blockTatooineSand, 0);
		b(w, i + 15, j, k + 1, blockTatooineSand, 0);
		b(w, i + 15, j, k + 2, blockTatooineSand, 0);
		b(w, i + 15, j, k + 3, blockTatooineSand, 0);
		b(w, i + 15, j, k + 4, blockTatooineSand, 0);
		b(w, i + 15, j, k + 5, blockTatooineSand, 0);
		b(w, i + 15, j, k + 6, blockTatooineSand, 0);
		b(w, i + 15, j, k + 7, blockTatooineSand, 0);
		b(w, i + 15, j, k + 8, blockTatooineSand, 0);
		b(w, i + 15, j, k + 9, blockTatooineSand, 0);
		b(w, i + 15, j, k + 10, blockTatooineSand, 0);
		b(w, i + 15, j, k + 11, blockTatooineSand, 0);
		b(w, i + 15, j, k + 12, blockTatooineSand, 0);
		b(w, i + 15, j, k + 13, blockTatooineSand, 0);
		b(w, i + 15, j, k + 14, blockTatooineSand, 0);
		b(w, i + 15, j, k + 15, blockTatooineSand, 0);
		b(w, i + 15, j + 1, k, sandstone_stairs, 0);
		b(w, i + 15, j + 1, k + 1, sandstone_stairs, 0);
		b(w, i + 15, j + 1, k + 2, sandstone_stairs, 0);
		b(w, i + 15, j + 1, k + 3, sandstone, 0);
		b(w, i + 15, j + 1, k + 4, sandstone, 0);
		b(w, i + 15, j + 1, k + 5, sandstone, 0);
		b(w, i + 15, j + 1, k + 6, sandstone, 0);
		b(w, i + 15, j + 1, k + 7, sandstone, 0);
		b(w, i + 15, j + 1, k + 8, sandstone, 0);
		b(w, i + 15, j + 1, k + 9, sandstone_stairs, 0);
		m(w, i + 15, j + 1, k + 9, 3);
		b(w, i + 15, j + 1, k + 10, air, 0);
		b(w, i + 15, j + 1, k + 11, air, 0);
		b(w, i + 15, j + 1, k + 12, air, 0);
		b(w, i + 15, j + 1, k + 13, air, 0);
		b(w, i + 15, j + 1, k + 14, sandstone, 0);
		m(w, i + 15, j + 1, k + 14, 2);
		b(w, i + 15, j + 1, k + 15, air, 0);
		b(w, i + 15, j + 2, k, air, 0);
		b(w, i + 15, j + 2, k + 1, air, 0);
		b(w, i + 15, j + 2, k + 2, air, 0);
		b(w, i + 15, j + 2, k + 3, air, 0);
		b(w, i + 15, j + 2, k + 4, air, 0);
		b(w, i + 15, j + 2, k + 5, air, 0);
		b(w, i + 15, j + 2, k + 6, air, 0);
		b(w, i + 15, j + 2, k + 7, sandstone_stairs, 0);
		m(w, i + 15, j + 2, k + 7, 2);
		b(w, i + 15, j + 2, k + 8, sandstone, 0);
		b(w, i + 15, j + 2, k + 9, air, 0);
		b(w, i + 15, j + 2, k + 10, air, 0);
		b(w, i + 15, j + 2, k + 11, air, 0);
		b(w, i + 15, j + 2, k + 12, air, 0);
		b(w, i + 15, j + 2, k + 13, air, 0);
		b(w, i + 15, j + 2, k + 14, glass_pane, 0);
		b(w, i + 15, j + 2, k + 15, air, 0);
		b(w, i + 15, j + 3, k, air, 0);
		b(w, i + 15, j + 3, k + 1, air, 0);
		b(w, i + 15, j + 3, k + 2, air, 0);
		b(w, i + 15, j + 3, k + 3, air, 0);
		b(w, i + 15, j + 3, k + 4, air, 0);
		b(w, i + 15, j + 3, k + 5, air, 0);
		generate_14(w, i, j, k);
	}

	public static void generate_14(World w, int i, int j, int k)
	{
		b(w, i + 15, j + 3, k + 6, air, 0);
		b(w, i + 15, j + 3, k + 7, air, 0);
		b(w, i + 15, j + 3, k + 8, sandstone, 0);
		b(w, i + 15, j + 3, k + 9, air, 0);
		b(w, i + 15, j + 3, k + 10, air, 0);
		b(w, i + 15, j + 3, k + 11, air, 0);
		b(w, i + 15, j + 3, k + 12, air, 0);
		b(w, i + 15, j + 3, k + 13, air, 0);
		b(w, i + 15, j + 3, k + 14, glass_pane, 0);
		b(w, i + 15, j + 3, k + 15, air, 0);
		b(w, i + 15, j + 4, k, air, 0);
		b(w, i + 15, j + 4, k + 1, air, 0);
		b(w, i + 15, j + 4, k + 2, air, 0);
		b(w, i + 15, j + 4, k + 3, air, 0);
		b(w, i + 15, j + 4, k + 4, air, 0);
		b(w, i + 15, j + 4, k + 5, air, 0);
		b(w, i + 15, j + 4, k + 6, air, 0);
		b(w, i + 15, j + 4, k + 7, air, 0);
		b(w, i + 15, j + 4, k + 8, sandstone, 0);
		b(w, i + 15, j + 4, k + 9, air, 0);
		b(w, i + 15, j + 4, k + 10, air, 0);
		b(w, i + 15, j + 4, k + 11, air, 0);
		b(w, i + 15, j + 4, k + 12, air, 0);
		b(w, i + 15, j + 4, k + 13, air, 0);
		b(w, i + 15, j + 4, k + 14, glass_pane, 0);
		b(w, i + 15, j + 4, k + 15, air, 0);
		b(w, i + 15, j + 5, k, air, 0);
		b(w, i + 15, j + 5, k + 1, air, 0);
		b(w, i + 15, j + 5, k + 2, air, 0);
		b(w, i + 15, j + 5, k + 3, air, 0);
		b(w, i + 15, j + 5, k + 4, air, 0);
		b(w, i + 15, j + 5, k + 5, air, 0);
		b(w, i + 15, j + 5, k + 6, air, 0);
		b(w, i + 15, j + 5, k + 7, air, 0);
		b(w, i + 15, j + 5, k + 8, sandstone, 0);
		b(w, i + 15, j + 5, k + 9, air, 0);
		b(w, i + 15, j + 5, k + 10, air, 0);
		b(w, i + 15, j + 5, k + 11, air, 0);
		b(w, i + 15, j + 5, k + 12, air, 0);
		b(w, i + 15, j + 5, k + 13, air, 0);
		b(w, i + 15, j + 5, k + 14, sandstone, 0);
		m(w, i + 15, j + 5, k + 14, 2);
		b(w, i + 15, j + 5, k + 15, air, 0);
		b(w, i + 15, j + 6, k, air, 0);
		b(w, i + 15, j + 6, k + 1, air, 0);
		b(w, i + 15, j + 6, k + 2, air, 0);
		b(w, i + 15, j + 6, k + 3, air, 0);
		b(w, i + 15, j + 6, k + 4, air, 0);
		b(w, i + 15, j + 6, k + 5, air, 0);
		b(w, i + 15, j + 6, k + 6, air, 0);
		b(w, i + 15, j + 6, k + 7, air, 0);
		b(w, i + 15, j + 6, k + 8, sandstone, 0);
		b(w, i + 15, j + 6, k + 9, sandstone, 0);
		b(w, i + 15, j + 6, k + 10, sandstone, 0);
		b(w, i + 15, j + 6, k + 11, sandstone, 0);
		b(w, i + 15, j + 6, k + 12, sandstone, 0);
		b(w, i + 15, j + 6, k + 13, sandstone, 0);
		b(w, i + 15, j + 6, k + 14, sandstone, 0);
		b(w, i + 15, j + 6, k + 15, air, 0);
		b(w, i + 15, j + 7, k, air, 0);
		b(w, i + 15, j + 7, k + 1, air, 0);
		b(w, i + 15, j + 7, k + 2, air, 0);
		b(w, i + 15, j + 7, k + 3, air, 0);
		b(w, i + 15, j + 7, k + 4, air, 0);
		b(w, i + 15, j + 7, k + 5, air, 0);
		b(w, i + 15, j + 7, k + 6, air, 0);
		b(w, i + 15, j + 7, k + 7, air, 0);
		b(w, i + 15, j + 7, k + 8, sandstone, 0);
		b(w, i + 15, j + 7, k + 9, sandstone_stairs, 0);
		m(w, i + 15, j + 7, k + 9, 3);
		b(w, i + 15, j + 7, k + 10, air, 0);
		b(w, i + 15, j + 7, k + 11, air, 0);
		b(w, i + 15, j + 7, k + 12, air, 0);
		b(w, i + 15, j + 7, k + 13, air, 0);
		b(w, i + 15, j + 7, k + 14, air, 0);
		b(w, i + 15, j + 7, k + 15, air, 0);
		b(w, i + 15, j + 8, k, air, 0);
		b(w, i + 15, j + 8, k + 1, air, 0);
		b(w, i + 15, j + 8, k + 2, air, 0);
		b(w, i + 15, j + 8, k + 3, air, 0);
		b(w, i + 15, j + 8, k + 4, air, 0);
		b(w, i + 15, j + 8, k + 5, air, 0);
		b(w, i + 15, j + 8, k + 6, sandstone, 0);
		b(w, i + 15, j + 8, k + 7, sandstone, 0);
		b(w, i + 15, j + 8, k + 8, sandstone, 0);
		b(w, i + 15, j + 8, k + 9, air, 0);
		b(w, i + 15, j + 8, k + 10, air, 0);
		b(w, i + 15, j + 8, k + 11, air, 0);
		b(w, i + 15, j + 8, k + 12, air, 0);
		b(w, i + 15, j + 8, k + 13, air, 0);
		b(w, i + 15, j + 8, k + 14, air, 0);
		b(w, i + 15, j + 8, k + 15, air, 0);
		b(w, i + 15, j + 9, k, air, 0);
		b(w, i + 15, j + 9, k + 1, air, 0);
		b(w, i + 15, j + 9, k + 2, air, 0);
		b(w, i + 15, j + 9, k + 3, air, 0);
		b(w, i + 15, j + 9, k + 4, air, 0);
		b(w, i + 15, j + 9, k + 5, air, 0);
		b(w, i + 15, j + 9, k + 6, stone_slab, 0);
		m(w, i + 15, j + 9, k + 6, 1);
		b(w, i + 15, j + 9, k + 7, air, 0);
		b(w, i + 15, j + 9, k + 8, air, 0);
		b(w, i + 15, j + 9, k + 9, air, 0);
		b(w, i + 15, j + 9, k + 10, air, 0);
		b(w, i + 15, j + 9, k + 11, air, 0);
		b(w, i + 15, j + 9, k + 12, air, 0);
		b(w, i + 15, j + 9, k + 13, air, 0);
		b(w, i + 15, j + 9, k + 14, air, 0);
		b(w, i + 15, j + 9, k + 15, air, 0);
		b(w, i + 15, j + 10, k, air, 0);
		b(w, i + 15, j + 10, k + 1, air, 0);
		b(w, i + 15, j + 10, k + 2, air, 0);
		b(w, i + 15, j + 10, k + 3, air, 0);
		b(w, i + 15, j + 10, k + 4, air, 0);
		b(w, i + 15, j + 10, k + 5, air, 0);
		b(w, i + 15, j + 10, k + 6, air, 0);
		b(w, i + 15, j + 10, k + 7, air, 0);
		b(w, i + 15, j + 10, k + 8, air, 0);
		b(w, i + 15, j + 10, k + 9, air, 0);
		b(w, i + 15, j + 10, k + 10, air, 0);
		b(w, i + 15, j + 10, k + 11, air, 0);
		b(w, i + 15, j + 10, k + 12, air, 0);
		b(w, i + 15, j + 10, k + 13, air, 0);
		b(w, i + 15, j + 10, k + 14, air, 0);
		b(w, i + 15, j + 10, k + 15, air, 0);
		b(w, i + 15, j + 11, k, air, 0);
		b(w, i + 15, j + 11, k + 1, air, 0);
		b(w, i + 15, j + 11, k + 2, air, 0);
		b(w, i + 15, j + 11, k + 3, air, 0);
		b(w, i + 15, j + 11, k + 4, air, 0);
		b(w, i + 15, j + 11, k + 5, air, 0);
		b(w, i + 15, j + 11, k + 6, air, 0);
		b(w, i + 15, j + 11, k + 7, air, 0);
		b(w, i + 15, j + 11, k + 8, air, 0);
		b(w, i + 15, j + 11, k + 9, air, 0);
		b(w, i + 15, j + 11, k + 10, air, 0);
		b(w, i + 15, j + 11, k + 11, air, 0);
		b(w, i + 15, j + 11, k + 12, air, 0);
		b(w, i + 15, j + 11, k + 13, air, 0);
		b(w, i + 15, j + 11, k + 14, air, 0);
		b(w, i + 15, j + 11, k + 15, air, 0);
		b(w, i + 15, j + 12, k, air, 0);
		b(w, i + 15, j + 12, k + 1, air, 0);
		b(w, i + 15, j + 12, k + 2, air, 0);
		b(w, i + 15, j + 12, k + 3, air, 0);
		b(w, i + 15, j + 12, k + 4, air, 0);
		b(w, i + 15, j + 12, k + 5, air, 0);
		b(w, i + 15, j + 12, k + 6, air, 0);
		b(w, i + 15, j + 12, k + 7, air, 0);
		b(w, i + 15, j + 12, k + 8, air, 0);
		b(w, i + 15, j + 12, k + 9, air, 0);
		b(w, i + 15, j + 12, k + 10, air, 0);
		b(w, i + 15, j + 12, k + 11, air, 0);
		b(w, i + 15, j + 12, k + 12, air, 0);
		b(w, i + 15, j + 12, k + 13, air, 0);
		b(w, i + 15, j + 12, k + 14, air, 0);
		b(w, i + 15, j + 12, k + 15, air, 0);
		b(w, i + 15, j + 13, k, air, 0);
		b(w, i + 15, j + 13, k + 1, air, 0);
		b(w, i + 15, j + 13, k + 2, air, 0);
		b(w, i + 15, j + 13, k + 3, air, 0);
		b(w, i + 15, j + 13, k + 4, air, 0);
		b(w, i + 15, j + 13, k + 5, air, 0);
		b(w, i + 15, j + 13, k + 6, air, 0);
		b(w, i + 15, j + 13, k + 7, air, 0);
		b(w, i + 15, j + 13, k + 8, air, 0);
		b(w, i + 15, j + 13, k + 9, air, 0);
		b(w, i + 15, j + 13, k + 10, air, 0);
		b(w, i + 15, j + 13, k + 11, air, 0);
		b(w, i + 15, j + 13, k + 12, air, 0);
		b(w, i + 15, j + 13, k + 13, air, 0);
		b(w, i + 15, j + 13, k + 14, air, 0);
		b(w, i + 15, j + 13, k + 15, air, 0);
		b(w, i + 15, j + 14, k, air, 0);
		b(w, i + 15, j + 14, k + 1, air, 0);
		b(w, i + 15, j + 14, k + 2, air, 0);
		b(w, i + 15, j + 14, k + 3, air, 0);
		b(w, i + 15, j + 14, k + 4, air, 0);
		b(w, i + 15, j + 14, k + 5, air, 0);
		b(w, i + 15, j + 14, k + 6, air, 0);
		b(w, i + 15, j + 14, k + 7, air, 0);
		b(w, i + 15, j + 14, k + 8, air, 0);
		b(w, i + 15, j + 14, k + 9, air, 0);
		b(w, i + 15, j + 14, k + 10, air, 0);
		b(w, i + 15, j + 14, k + 11, air, 0);
		b(w, i + 15, j + 14, k + 12, air, 0);
		b(w, i + 15, j + 14, k + 13, air, 0);
		b(w, i + 15, j + 14, k + 14, air, 0);
		b(w, i + 15, j + 14, k + 15, air, 0);
		b(w, i + 15, j + 15, k, air, 0);
		b(w, i + 15, j + 15, k + 1, air, 0);
		b(w, i + 15, j + 15, k + 2, air, 0);
		b(w, i + 15, j + 15, k + 3, air, 0);
		b(w, i + 15, j + 15, k + 4, air, 0);
		b(w, i + 15, j + 15, k + 5, air, 0);
		b(w, i + 15, j + 15, k + 6, air, 0);
		b(w, i + 15, j + 15, k + 7, air, 0);
		b(w, i + 15, j + 15, k + 8, air, 0);
		b(w, i + 15, j + 15, k + 9, air, 0);
		b(w, i + 15, j + 15, k + 10, air, 0);
		b(w, i + 15, j + 15, k + 11, air, 0);
		b(w, i + 15, j + 15, k + 12, air, 0);
		b(w, i + 15, j + 15, k + 13, air, 0);
		b(w, i + 15, j + 15, k + 14, air, 0);
		b(w, i + 15, j + 15, k + 15, air, 0);
		b(w, i + 15, j + 16, k, air, 0);
		b(w, i + 15, j + 16, k + 1, air, 0);
		b(w, i + 15, j + 16, k + 2, air, 0);
		b(w, i + 15, j + 16, k + 3, air, 0);
		b(w, i + 15, j + 16, k + 4, air, 0);
		b(w, i + 15, j + 16, k + 5, air, 0);
		b(w, i + 15, j + 16, k + 6, air, 0);
		b(w, i + 15, j + 16, k + 7, air, 0);
		b(w, i + 15, j + 16, k + 8, air, 0);
		b(w, i + 15, j + 16, k + 9, air, 0);
		b(w, i + 15, j + 16, k + 10, air, 0);
		b(w, i + 15, j + 16, k + 11, air, 0);
		b(w, i + 15, j + 16, k + 12, air, 0);
		b(w, i + 15, j + 16, k + 13, air, 0);
		b(w, i + 15, j + 16, k + 14, air, 0);
		b(w, i + 15, j + 16, k + 15, air, 0);
		b(w, i + 15, j + 17, k, air, 0);
		b(w, i + 15, j + 17, k + 1, air, 0);
		b(w, i + 15, j + 17, k + 2, air, 0);
		b(w, i + 15, j + 17, k + 3, air, 0);
		b(w, i + 15, j + 17, k + 4, air, 0);
		b(w, i + 15, j + 17, k + 5, air, 0);
		b(w, i + 15, j + 17, k + 6, air, 0);
		b(w, i + 15, j + 17, k + 7, air, 0);
		b(w, i + 15, j + 17, k + 8, air, 0);
		b(w, i + 15, j + 17, k + 9, air, 0);
		b(w, i + 15, j + 17, k + 10, air, 0);
		b(w, i + 15, j + 17, k + 11, air, 0);
		b(w, i + 15, j + 17, k + 12, air, 0);
		b(w, i + 15, j + 17, k + 13, air, 0);
		b(w, i + 15, j + 17, k + 14, air, 0);
		b(w, i + 15, j + 17, k + 15, air, 0);
		b(w, i + 15, j + 18, k, air, 0);
		b(w, i + 15, j + 18, k + 1, air, 0);
		b(w, i + 15, j + 18, k + 2, air, 0);
		b(w, i + 15, j + 18, k + 3, air, 0);
		b(w, i + 15, j + 18, k + 4, air, 0);
		b(w, i + 15, j + 18, k + 5, air, 0);
		b(w, i + 15, j + 18, k + 6, air, 0);
		b(w, i + 15, j + 18, k + 7, air, 0);
		b(w, i + 15, j + 18, k + 8, air, 0);
		b(w, i + 15, j + 18, k + 9, air, 0);
		b(w, i + 15, j + 18, k + 10, air, 0);
		b(w, i + 15, j + 18, k + 11, air, 0);
		b(w, i + 15, j + 18, k + 12, air, 0);
		b(w, i + 15, j + 18, k + 13, air, 0);
		b(w, i + 15, j + 18, k + 14, air, 0);
		b(w, i + 15, j + 18, k + 15, air, 0);
		b(w, i + 15, j + 19, k, air, 0);
		b(w, i + 15, j + 19, k + 1, air, 0);
		b(w, i + 15, j + 19, k + 2, air, 0);
		b(w, i + 15, j + 19, k + 3, air, 0);
		b(w, i + 15, j + 19, k + 4, air, 0);
		b(w, i + 15, j + 19, k + 5, air, 0);
		b(w, i + 15, j + 19, k + 6, air, 0);
		b(w, i + 15, j + 19, k + 7, air, 0);
		b(w, i + 15, j + 19, k + 8, air, 0);
		b(w, i + 15, j + 19, k + 9, air, 0);
		b(w, i + 15, j + 19, k + 10, air, 0);
		b(w, i + 15, j + 19, k + 11, air, 0);
		b(w, i + 15, j + 19, k + 12, air, 0);
		b(w, i + 15, j + 19, k + 13, air, 0);
		b(w, i + 15, j + 19, k + 14, air, 0);
		b(w, i + 15, j + 19, k + 15, air, 0);
		b(w, i + 15, j + 20, k, air, 0);
		b(w, i + 15, j + 20, k + 1, air, 0);
		b(w, i + 15, j + 20, k + 2, air, 0);
		b(w, i + 15, j + 20, k + 3, air, 0);
		b(w, i + 15, j + 20, k + 4, air, 0);
		b(w, i + 15, j + 20, k + 5, air, 0);
		b(w, i + 15, j + 20, k + 6, air, 0);
		b(w, i + 15, j + 20, k + 7, air, 0);
		b(w, i + 15, j + 20, k + 8, air, 0);
		b(w, i + 15, j + 20, k + 9, air, 0);
		b(w, i + 15, j + 20, k + 10, air, 0);
		b(w, i + 15, j + 20, k + 11, air, 0);
		b(w, i + 15, j + 20, k + 12, air, 0);
		b(w, i + 15, j + 20, k + 13, air, 0);
		b(w, i + 15, j + 20, k + 14, air, 0);
		b(w, i + 15, j + 20, k + 15, air, 0);
		b(w, i + 15, j + 21, k, air, 0);
		b(w, i + 15, j + 21, k + 1, air, 0);
		b(w, i + 15, j + 21, k + 2, air, 0);
		b(w, i + 15, j + 21, k + 3, air, 0);
		b(w, i + 15, j + 21, k + 4, air, 0);
		b(w, i + 15, j + 21, k + 5, air, 0);
		b(w, i + 15, j + 21, k + 6, air, 0);
		b(w, i + 15, j + 21, k + 7, air, 0);
		b(w, i + 15, j + 21, k + 8, air, 0);
		b(w, i + 15, j + 21, k + 9, air, 0);
		b(w, i + 15, j + 21, k + 10, air, 0);
		b(w, i + 15, j + 21, k + 11, air, 0);
		b(w, i + 15, j + 21, k + 12, air, 0);
		b(w, i + 15, j + 21, k + 13, air, 0);
		b(w, i + 15, j + 21, k + 14, air, 0);
		b(w, i + 15, j + 21, k + 15, air, 0);
		b(w, i + 15, j + 22, k, air, 0);
		b(w, i + 15, j + 22, k + 1, air, 0);
		b(w, i + 15, j + 22, k + 2, air, 0);
		b(w, i + 15, j + 22, k + 3, air, 0);
		b(w, i + 15, j + 22, k + 4, air, 0);
		b(w, i + 15, j + 22, k + 5, air, 0);
		b(w, i + 15, j + 22, k + 6, air, 0);
		b(w, i + 15, j + 22, k + 7, air, 0);
		b(w, i + 15, j + 22, k + 8, air, 0);
		b(w, i + 15, j + 22, k + 9, air, 0);
		b(w, i + 15, j + 22, k + 10, air, 0);
		b(w, i + 15, j + 22, k + 11, air, 0);
		b(w, i + 15, j + 22, k + 12, air, 0);
		b(w, i + 15, j + 22, k + 13, air, 0);
		b(w, i + 15, j + 22, k + 14, air, 0);
		b(w, i + 15, j + 22, k + 15, air, 0);
		b(w, i + 15, j + 23, k, air, 0);
		b(w, i + 15, j + 23, k + 1, air, 0);
		b(w, i + 15, j + 23, k + 2, air, 0);
		b(w, i + 15, j + 23, k + 3, air, 0);
		b(w, i + 15, j + 23, k + 4, air, 0);
		b(w, i + 15, j + 23, k + 5, air, 0);
		b(w, i + 15, j + 23, k + 6, air, 0);
		b(w, i + 15, j + 23, k + 7, air, 0);
		b(w, i + 15, j + 23, k + 8, air, 0);
		b(w, i + 15, j + 23, k + 9, air, 0);
		b(w, i + 15, j + 23, k + 10, air, 0);
		b(w, i + 15, j + 23, k + 11, air, 0);
		b(w, i + 15, j + 23, k + 12, air, 0);
		b(w, i + 15, j + 23, k + 13, air, 0);
		b(w, i + 15, j + 23, k + 14, air, 0);
		b(w, i + 15, j + 23, k + 15, air, 0);
		b(w, i + 15, j + 24, k, air, 0);
		b(w, i + 15, j + 24, k + 1, air, 0);
		b(w, i + 15, j + 24, k + 2, air, 0);
		b(w, i + 15, j + 24, k + 3, air, 0);
		b(w, i + 15, j + 24, k + 4, air, 0);
		b(w, i + 15, j + 24, k + 5, air, 0);
		b(w, i + 15, j + 24, k + 6, air, 0);
		b(w, i + 15, j + 24, k + 7, air, 0);
		b(w, i + 15, j + 24, k + 8, air, 0);
		b(w, i + 15, j + 24, k + 9, air, 0);
		b(w, i + 15, j + 24, k + 10, air, 0);
		b(w, i + 15, j + 24, k + 11, air, 0);
		b(w, i + 15, j + 24, k + 12, air, 0);
		b(w, i + 15, j + 24, k + 13, air, 0);
		b(w, i + 15, j + 24, k + 14, air, 0);
		b(w, i + 15, j + 24, k + 15, air, 0);
		b(w, i + 15, j + 25, k, air, 0);
		b(w, i + 15, j + 25, k + 1, air, 0);
		b(w, i + 15, j + 25, k + 2, air, 0);
		b(w, i + 15, j + 25, k + 3, air, 0);
		b(w, i + 15, j + 25, k + 4, air, 0);
		b(w, i + 15, j + 25, k + 5, air, 0);
		b(w, i + 15, j + 25, k + 6, air, 0);
		b(w, i + 15, j + 25, k + 7, air, 0);
		b(w, i + 15, j + 25, k + 8, air, 0);
		b(w, i + 15, j + 25, k + 9, air, 0);
		b(w, i + 15, j + 25, k + 10, air, 0);
		b(w, i + 15, j + 25, k + 11, air, 0);
		b(w, i + 15, j + 25, k + 12, air, 0);
		b(w, i + 15, j + 25, k + 13, air, 0);
		b(w, i + 15, j + 25, k + 14, air, 0);
		b(w, i + 15, j + 25, k + 15, air, 0);
		b(w, i + 15, j + 26, k, air, 0);
		b(w, i + 15, j + 26, k + 1, air, 0);
		b(w, i + 15, j + 26, k + 2, air, 0);
		b(w, i + 15, j + 26, k + 3, air, 0);
		b(w, i + 15, j + 26, k + 4, air, 0);
		b(w, i + 15, j + 26, k + 5, air, 0);
		b(w, i + 15, j + 26, k + 6, air, 0);
		b(w, i + 15, j + 26, k + 7, air, 0);
		b(w, i + 15, j + 26, k + 8, air, 0);
		b(w, i + 15, j + 26, k + 9, air, 0);
		b(w, i + 15, j + 26, k + 10, air, 0);
		b(w, i + 15, j + 26, k + 11, air, 0);
		b(w, i + 15, j + 26, k + 12, air, 0);
		b(w, i + 15, j + 26, k + 13, air, 0);
		b(w, i + 15, j + 26, k + 14, air, 0);
		b(w, i + 15, j + 26, k + 15, air, 0);
		b(w, i + 15, j + 27, k, air, 0);
		b(w, i + 15, j + 27, k + 1, air, 0);
		b(w, i + 15, j + 27, k + 2, air, 0);
		b(w, i + 15, j + 27, k + 3, air, 0);
		b(w, i + 15, j + 27, k + 4, air, 0);
		b(w, i + 15, j + 27, k + 5, air, 0);
		b(w, i + 15, j + 27, k + 6, air, 0);
		b(w, i + 15, j + 27, k + 7, air, 0);
		b(w, i + 15, j + 27, k + 8, air, 0);
		b(w, i + 15, j + 27, k + 9, air, 0);
		b(w, i + 15, j + 27, k + 10, air, 0);
		b(w, i + 15, j + 27, k + 11, air, 0);
		b(w, i + 15, j + 27, k + 12, air, 0);
		b(w, i + 15, j + 27, k + 13, air, 0);
		b(w, i + 15, j + 27, k + 14, air, 0);
		b(w, i + 15, j + 27, k + 15, air, 0);
		b(w, i + 15, j + 28, k, air, 0);
		b(w, i + 15, j + 28, k + 1, air, 0);
		b(w, i + 15, j + 28, k + 2, air, 0);
		b(w, i + 15, j + 28, k + 3, air, 0);
		b(w, i + 15, j + 28, k + 4, air, 0);
		b(w, i + 15, j + 28, k + 5, air, 0);
		b(w, i + 15, j + 28, k + 6, air, 0);
		b(w, i + 15, j + 28, k + 7, air, 0);
		b(w, i + 15, j + 28, k + 8, air, 0);
		b(w, i + 15, j + 28, k + 9, air, 0);
		b(w, i + 15, j + 28, k + 10, air, 0);
		b(w, i + 15, j + 28, k + 11, air, 0);
		b(w, i + 15, j + 28, k + 12, air, 0);
		b(w, i + 15, j + 28, k + 13, air, 0);
		b(w, i + 15, j + 28, k + 14, air, 0);
		b(w, i + 15, j + 28, k + 15, air, 0);
	}

}
//@formatter:on
