package com.parzivail.pswm.world.gen.asteroid;

import net.minecraft.world.World;

import static com.parzivail.util.world.WorldUtils.b;
import static net.minecraft.init.Blocks.air;
import static net.minecraft.init.Blocks.stone;

/*
 * Generated by SchematicExporter
 * 5/31/2016 3:57:16 PM
 */
//@formatter:off
public class WorldGenAsteroid2_x0_z16
{
	public static void generate(World w, int i, int j, int k)
	{
		b(w, i, j, k, air, 0);
		b(w, i, j + 1, k, air, 0);
		b(w, i, j + 2, k, air, 0);
		b(w, i, j + 3, k, air, 0);
		b(w, i, j + 4, k, air, 0);
		b(w, i, j + 5, k, air, 0);
		b(w, i, j + 6, k, air, 0);
		b(w, i, j + 7, k, air, 0);
		b(w, i, j + 8, k, air, 0);
		b(w, i, j + 9, k, air, 0);
		b(w, i, j + 10, k, air, 0);
		b(w, i, j + 11, k, air, 0);
		b(w, i, j + 12, k, air, 0);
		b(w, i, j + 13, k, air, 0);
		b(w, i, j + 14, k, air, 0);
		b(w, i, j + 15, k, air, 0);
		b(w, i, j + 16, k, air, 0);
		b(w, i + 1, j, k, air, 0);
		b(w, i + 1, j + 1, k, air, 0);
		b(w, i + 1, j + 2, k, air, 0);
		b(w, i + 1, j + 3, k, air, 0);
		b(w, i + 1, j + 4, k, air, 0);
		b(w, i + 1, j + 5, k, air, 0);
		b(w, i + 1, j + 6, k, air, 0);
		b(w, i + 1, j + 7, k, air, 0);
		b(w, i + 1, j + 8, k, air, 0);
		b(w, i + 1, j + 9, k, air, 0);
		b(w, i + 1, j + 10, k, air, 0);
		b(w, i + 1, j + 11, k, air, 0);
		b(w, i + 1, j + 12, k, air, 0);
		b(w, i + 1, j + 13, k, air, 0);
		b(w, i + 1, j + 14, k, air, 0);
		b(w, i + 1, j + 15, k, air, 0);
		b(w, i + 1, j + 16, k, air, 0);
		b(w, i + 2, j, k, air, 0);
		b(w, i + 2, j + 1, k, air, 0);
		b(w, i + 2, j + 2, k, air, 0);
		b(w, i + 2, j + 3, k, air, 0);
		b(w, i + 2, j + 4, k, air, 0);
		b(w, i + 2, j + 5, k, air, 0);
		b(w, i + 2, j + 6, k, air, 0);
		b(w, i + 2, j + 7, k, air, 0);
		b(w, i + 2, j + 8, k, air, 0);
		b(w, i + 2, j + 9, k, air, 0);
		b(w, i + 2, j + 10, k, air, 0);
		b(w, i + 2, j + 11, k, air, 0);
		b(w, i + 2, j + 12, k, air, 0);
		b(w, i + 2, j + 13, k, air, 0);
		b(w, i + 2, j + 14, k, air, 0);
		b(w, i + 2, j + 15, k, air, 0);
		b(w, i + 2, j + 16, k, air, 0);
		b(w, i + 3, j, k, air, 0);
		b(w, i + 3, j + 1, k, air, 0);
		b(w, i + 3, j + 2, k, air, 0);
		b(w, i + 3, j + 3, k, air, 0);
		b(w, i + 3, j + 4, k, air, 0);
		b(w, i + 3, j + 5, k, air, 0);
		b(w, i + 3, j + 6, k, air, 0);
		b(w, i + 3, j + 7, k, air, 0);
		b(w, i + 3, j + 8, k, air, 0);
		b(w, i + 3, j + 9, k, air, 0);
		b(w, i + 3, j + 10, k, air, 0);
		b(w, i + 3, j + 11, k, air, 0);
		b(w, i + 3, j + 12, k, air, 0);
		b(w, i + 3, j + 13, k, air, 0);
		b(w, i + 3, j + 14, k, air, 0);
		b(w, i + 3, j + 15, k, air, 0);
		b(w, i + 3, j + 16, k, air, 0);
		b(w, i + 4, j, k, air, 0);
		b(w, i + 4, j + 1, k, air, 0);
		b(w, i + 4, j + 2, k, air, 0);
		b(w, i + 4, j + 3, k, air, 0);
		b(w, i + 4, j + 4, k, air, 0);
		b(w, i + 4, j + 5, k, air, 0);
		b(w, i + 4, j + 6, k, air, 0);
		b(w, i + 4, j + 7, k, air, 0);
		b(w, i + 4, j + 8, k, air, 0);
		b(w, i + 4, j + 9, k, air, 0);
		b(w, i + 4, j + 10, k, air, 0);
		b(w, i + 4, j + 11, k, air, 0);
		b(w, i + 4, j + 12, k, air, 0);
		b(w, i + 4, j + 13, k, air, 0);
		b(w, i + 4, j + 14, k, air, 0);
		b(w, i + 4, j + 15, k, air, 0);
		b(w, i + 4, j + 16, k, air, 0);
		b(w, i + 5, j, k, air, 0);
		b(w, i + 5, j + 1, k, air, 0);
		b(w, i + 5, j + 2, k, air, 0);
		b(w, i + 5, j + 3, k, air, 0);
		b(w, i + 5, j + 4, k, air, 0);
		b(w, i + 5, j + 5, k, air, 0);
		b(w, i + 5, j + 6, k, air, 0);
		b(w, i + 5, j + 7, k, air, 0);
		b(w, i + 5, j + 8, k, stone, 0);
		b(w, i + 5, j + 9, k, stone, 0);
		b(w, i + 5, j + 10, k, air, 0);
		b(w, i + 5, j + 11, k, air, 0);
		b(w, i + 5, j + 12, k, air, 0);
		b(w, i + 5, j + 13, k, air, 0);
		b(w, i + 5, j + 14, k, air, 0);
		b(w, i + 5, j + 15, k, air, 0);
		b(w, i + 5, j + 16, k, air, 0);
		b(w, i + 6, j, k, air, 0);
		b(w, i + 6, j + 1, k, air, 0);
		b(w, i + 6, j + 2, k, air, 0);
		b(w, i + 6, j + 3, k, air, 0);
		b(w, i + 6, j + 4, k, air, 0);
		b(w, i + 6, j + 5, k, air, 0);
		b(w, i + 6, j + 6, k, air, 0);
		b(w, i + 6, j + 7, k, air, 0);
		b(w, i + 6, j + 8, k, stone, 0);
		b(w, i + 6, j + 9, k, stone, 0);
		b(w, i + 6, j + 10, k, stone, 0);
		b(w, i + 6, j + 11, k, air, 0);
		b(w, i + 6, j + 12, k, air, 0);
		b(w, i + 6, j + 13, k, air, 0);
		b(w, i + 6, j + 14, k, air, 0);
		b(w, i + 6, j + 15, k, air, 0);
		b(w, i + 6, j + 16, k, air, 0);
		b(w, i + 7, j, k, air, 0);
		b(w, i + 7, j + 1, k, air, 0);
		b(w, i + 7, j + 2, k, air, 0);
		b(w, i + 7, j + 3, k, air, 0);
		b(w, i + 7, j + 4, k, air, 0);
		b(w, i + 7, j + 5, k, air, 0);
		b(w, i + 7, j + 6, k, air, 0);
		b(w, i + 7, j + 7, k, air, 0);
		b(w, i + 7, j + 8, k, stone, 0);
		b(w, i + 7, j + 9, k, stone, 0);
		b(w, i + 7, j + 10, k, stone, 0);
		b(w, i + 7, j + 11, k, air, 0);
		b(w, i + 7, j + 12, k, air, 0);
		b(w, i + 7, j + 13, k, air, 0);
		b(w, i + 7, j + 14, k, air, 0);
		b(w, i + 7, j + 15, k, air, 0);
		b(w, i + 7, j + 16, k, air, 0);
		b(w, i + 8, j, k, air, 0);
		b(w, i + 8, j + 1, k, air, 0);
		b(w, i + 8, j + 2, k, air, 0);
		b(w, i + 8, j + 3, k, air, 0);
		b(w, i + 8, j + 4, k, air, 0);
		b(w, i + 8, j + 5, k, air, 0);
		b(w, i + 8, j + 6, k, air, 0);
		b(w, i + 8, j + 7, k, air, 0);
		b(w, i + 8, j + 8, k, stone, 0);
		b(w, i + 8, j + 9, k, stone, 0);
		b(w, i + 8, j + 10, k, stone, 0);
		b(w, i + 8, j + 11, k, air, 0);
		b(w, i + 8, j + 12, k, air, 0);
		b(w, i + 8, j + 13, k, air, 0);
		b(w, i + 8, j + 14, k, air, 0);
		b(w, i + 8, j + 15, k, air, 0);
		b(w, i + 8, j + 16, k, air, 0);
		b(w, i + 9, j, k, air, 0);
		b(w, i + 9, j + 1, k, air, 0);
		b(w, i + 9, j + 2, k, air, 0);
		b(w, i + 9, j + 3, k, air, 0);
		b(w, i + 9, j + 4, k, air, 0);
		b(w, i + 9, j + 5, k, air, 0);
		b(w, i + 9, j + 6, k, air, 0);
		b(w, i + 9, j + 7, k, stone, 0);
		b(w, i + 9, j + 8, k, stone, 0);
		b(w, i + 9, j + 9, k, stone, 0);
		b(w, i + 9, j + 10, k, air, 0);
		b(w, i + 9, j + 11, k, air, 0);
		b(w, i + 9, j + 12, k, air, 0);
		b(w, i + 9, j + 13, k, air, 0);
		b(w, i + 9, j + 14, k, air, 0);
		b(w, i + 9, j + 15, k, air, 0);
		b(w, i + 9, j + 16, k, air, 0);
		b(w, i + 10, j, k, air, 0);
		b(w, i + 10, j + 1, k, air, 0);
		b(w, i + 10, j + 2, k, air, 0);
		b(w, i + 10, j + 3, k, air, 0);
		b(w, i + 10, j + 4, k, air, 0);
		b(w, i + 10, j + 5, k, air, 0);
		b(w, i + 10, j + 6, k, air, 0);
		b(w, i + 10, j + 7, k, air, 0);
		b(w, i + 10, j + 8, k, air, 0);
		b(w, i + 10, j + 9, k, air, 0);
		b(w, i + 10, j + 10, k, air, 0);
		b(w, i + 10, j + 11, k, air, 0);
		b(w, i + 10, j + 12, k, air, 0);
		b(w, i + 10, j + 13, k, air, 0);
		b(w, i + 10, j + 14, k, air, 0);
		b(w, i + 10, j + 15, k, air, 0);
		b(w, i + 10, j + 16, k, air, 0);
		b(w, i + 11, j, k, air, 0);
		b(w, i + 11, j + 1, k, air, 0);
		b(w, i + 11, j + 2, k, air, 0);
		b(w, i + 11, j + 3, k, air, 0);
		b(w, i + 11, j + 4, k, air, 0);
		b(w, i + 11, j + 5, k, air, 0);
		b(w, i + 11, j + 6, k, air, 0);
		b(w, i + 11, j + 7, k, air, 0);
		b(w, i + 11, j + 8, k, air, 0);
		b(w, i + 11, j + 9, k, air, 0);
		b(w, i + 11, j + 10, k, air, 0);
		b(w, i + 11, j + 11, k, air, 0);
		b(w, i + 11, j + 12, k, air, 0);
		b(w, i + 11, j + 13, k, air, 0);
		b(w, i + 11, j + 14, k, air, 0);
		b(w, i + 11, j + 15, k, air, 0);
		b(w, i + 11, j + 16, k, air, 0);
		b(w, i + 12, j, k, air, 0);
		b(w, i + 12, j + 1, k, air, 0);
		b(w, i + 12, j + 2, k, air, 0);
		b(w, i + 12, j + 3, k, air, 0);
		b(w, i + 12, j + 4, k, air, 0);
		b(w, i + 12, j + 5, k, air, 0);
		b(w, i + 12, j + 6, k, air, 0);
		b(w, i + 12, j + 7, k, air, 0);
		b(w, i + 12, j + 8, k, air, 0);
		b(w, i + 12, j + 9, k, air, 0);
		b(w, i + 12, j + 10, k, air, 0);
		b(w, i + 12, j + 11, k, air, 0);
		b(w, i + 12, j + 12, k, air, 0);
		b(w, i + 12, j + 13, k, air, 0);
		b(w, i + 12, j + 14, k, air, 0);
		b(w, i + 12, j + 15, k, air, 0);
		b(w, i + 12, j + 16, k, air, 0);
		b(w, i + 13, j, k, air, 0);
		b(w, i + 13, j + 1, k, air, 0);
		b(w, i + 13, j + 2, k, air, 0);
		b(w, i + 13, j + 3, k, air, 0);
		b(w, i + 13, j + 4, k, air, 0);
		b(w, i + 13, j + 5, k, air, 0);
		b(w, i + 13, j + 6, k, air, 0);
		b(w, i + 13, j + 7, k, air, 0);
		b(w, i + 13, j + 8, k, air, 0);
		b(w, i + 13, j + 9, k, air, 0);
		b(w, i + 13, j + 10, k, air, 0);
		b(w, i + 13, j + 11, k, air, 0);
		b(w, i + 13, j + 12, k, air, 0);
		b(w, i + 13, j + 13, k, air, 0);
		b(w, i + 13, j + 14, k, air, 0);
		b(w, i + 13, j + 15, k, air, 0);
		b(w, i + 13, j + 16, k, air, 0);
		b(w, i + 14, j, k, air, 0);
		b(w, i + 14, j + 1, k, air, 0);
		b(w, i + 14, j + 2, k, air, 0);
		b(w, i + 14, j + 3, k, air, 0);
		b(w, i + 14, j + 4, k, air, 0);
		b(w, i + 14, j + 5, k, air, 0);
		b(w, i + 14, j + 6, k, air, 0);
		b(w, i + 14, j + 7, k, air, 0);
		b(w, i + 14, j + 8, k, air, 0);
		b(w, i + 14, j + 9, k, air, 0);
		b(w, i + 14, j + 10, k, air, 0);
		b(w, i + 14, j + 11, k, air, 0);
		b(w, i + 14, j + 12, k, air, 0);
		b(w, i + 14, j + 13, k, air, 0);
		b(w, i + 14, j + 14, k, air, 0);
		b(w, i + 14, j + 15, k, air, 0);
		b(w, i + 14, j + 16, k, air, 0);
		b(w, i + 15, j, k, air, 0);
		b(w, i + 15, j + 1, k, air, 0);
		b(w, i + 15, j + 2, k, air, 0);
		b(w, i + 15, j + 3, k, air, 0);
		b(w, i + 15, j + 4, k, air, 0);
		b(w, i + 15, j + 5, k, air, 0);
		b(w, i + 15, j + 6, k, air, 0);
		b(w, i + 15, j + 7, k, air, 0);
		b(w, i + 15, j + 8, k, air, 0);
		b(w, i + 15, j + 9, k, air, 0);
		b(w, i + 15, j + 10, k, air, 0);
		b(w, i + 15, j + 11, k, air, 0);
		b(w, i + 15, j + 12, k, air, 0);
		b(w, i + 15, j + 13, k, air, 0);
		b(w, i + 15, j + 14, k, air, 0);
		b(w, i + 15, j + 15, k, air, 0);
		b(w, i + 15, j + 16, k, air, 0);
	}

}
//@formatter:on
